{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar axios = require('axios');\nvar Concepts = require('./Concepts');\nvar Regions = require('./Regions');\nvar _require = require('./constants'),\n  API = _require.API;\nvar INPUTS_PATH = API.INPUTS_PATH;\n\n/**\n * class representing an input\n * @class\n */\n\nvar Input = function () {\n  function Input(_config, data) {\n    _classCallCheck(this, Input);\n    this.id = data.id;\n    this.createdAt = data.created_at || data.createdAt;\n    this.imageUrl = data.data.image.url;\n    this.concepts = new Concepts(_config, data.data.concepts);\n    this.regions = new Regions(_config, data.data.regions || []);\n    this.score = data.score;\n    this.metadata = data.data.metadata;\n    if (data.data.geo && data.data.geo['geo_point']) {\n      this.geo = {\n        geoPoint: data.data.geo['geo_point']\n      };\n    }\n    this.rawData = data;\n    this._config = _config;\n  }\n\n  /**\n   * Merge concepts to an input\n   * @param {object[]}         concepts    Object with keys explained below:\n   *   @param {object}           concepts[].concept\n   *     @param {string}           concepts[].concept.id        The concept id (required)\n   *     @param {boolean}          concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @param {object}           metadata                      Object with key values to attach to the input (optional)\n   * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n   */\n\n  _createClass(Input, [{\n    key: 'mergeConcepts',\n    value: function mergeConcepts(concepts, metadata) {\n      return this._update('merge', concepts, metadata);\n    }\n\n    /**\n     * Delete concept from an input\n     * @param {object[]}         concepts    Object with keys explained below:\n     *   @param {object}           concepts[].concept\n     *     @param {string}           concepts[].concept.id        The concept id (required)\n     *     @param {boolean}          concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @param {object}           metadata                      Object with key values to attach to the input (optional)\n     * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n     */\n  }, {\n    key: 'deleteConcepts',\n    value: function deleteConcepts(concepts, metadata) {\n      return this._update('remove', concepts, metadata);\n    }\n\n    /**\n     * Overwrite inputs\n     * @param {object[]}         concepts                      Array of object with keys explained below:\n     *   @param {object}           concepts[].concept\n     *     @param {string}           concepts[].concept.id         The concept id (required)\n     *     @param {boolean}          concepts[].concept.value      Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @param {object}           metadata                      Object with key values to attach to the input (optional)\n     * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n     */\n  }, {\n    key: 'overwriteConcepts',\n    value: function overwriteConcepts(concepts, metadata) {\n      return this._update('overwrite', concepts, metadata);\n    }\n  }, {\n    key: '_update',\n    value: function _update(action) {\n      var concepts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      var inputData = {};\n      if (concepts.length) {\n        inputData.concepts = concepts;\n      }\n      if (metadata !== null) {\n        inputData.metadata = metadata;\n      }\n      var data = {\n        action: action,\n        inputs: [{\n          id: this.id,\n          data: inputData\n        }]\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          return axios.patch(url, data, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Input(response.data.input));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }]);\n  return Input;\n}();\n;\nmodule.exports = Input;","map":{"version":3,"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","axios","require","Concepts","Regions","_require","API","INPUTS_PATH","Input","_config","data","id","createdAt","created_at","imageUrl","image","url","concepts","regions","score","metadata","geo","geoPoint","rawData","value","mergeConcepts","_update","deleteConcepts","overwriteConcepts","action","arguments","undefined","basePath","inputData","inputs","wrapToken","headers","Promise","resolve","reject","patch","then","response","isSuccess","input","module","exports"],"sources":["/workspace/smartBrain/node_modules/clarifai/dist/Input.js"],"sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar axios = require('axios');\nvar Concepts = require('./Concepts');\nvar Regions = require('./Regions');\n\nvar _require = require('./constants'),\n    API = _require.API;\n\nvar INPUTS_PATH = API.INPUTS_PATH;\n\n/**\n * class representing an input\n * @class\n */\n\nvar Input = function () {\n  function Input(_config, data) {\n    _classCallCheck(this, Input);\n\n    this.id = data.id;\n    this.createdAt = data.created_at || data.createdAt;\n    this.imageUrl = data.data.image.url;\n    this.concepts = new Concepts(_config, data.data.concepts);\n    this.regions = new Regions(_config, data.data.regions || []);\n    this.score = data.score;\n    this.metadata = data.data.metadata;\n    if (data.data.geo && data.data.geo['geo_point']) {\n      this.geo = { geoPoint: data.data.geo['geo_point'] };\n    }\n    this.rawData = data;\n    this._config = _config;\n  }\n\n  /**\n   * Merge concepts to an input\n   * @param {object[]}         concepts    Object with keys explained below:\n   *   @param {object}           concepts[].concept\n   *     @param {string}           concepts[].concept.id        The concept id (required)\n   *     @param {boolean}          concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n   * @param {object}           metadata                      Object with key values to attach to the input (optional)\n   * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n   */\n\n\n  _createClass(Input, [{\n    key: 'mergeConcepts',\n    value: function mergeConcepts(concepts, metadata) {\n      return this._update('merge', concepts, metadata);\n    }\n\n    /**\n     * Delete concept from an input\n     * @param {object[]}         concepts    Object with keys explained below:\n     *   @param {object}           concepts[].concept\n     *     @param {string}           concepts[].concept.id        The concept id (required)\n     *     @param {boolean}          concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @param {object}           metadata                      Object with key values to attach to the input (optional)\n     * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n     */\n\n  }, {\n    key: 'deleteConcepts',\n    value: function deleteConcepts(concepts, metadata) {\n      return this._update('remove', concepts, metadata);\n    }\n\n    /**\n     * Overwrite inputs\n     * @param {object[]}         concepts                      Array of object with keys explained below:\n     *   @param {object}           concepts[].concept\n     *     @param {string}           concepts[].concept.id         The concept id (required)\n     *     @param {boolean}          concepts[].concept.value      Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @param {object}           metadata                      Object with key values to attach to the input (optional)\n     * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n     */\n\n  }, {\n    key: 'overwriteConcepts',\n    value: function overwriteConcepts(concepts, metadata) {\n      return this._update('overwrite', concepts, metadata);\n    }\n  }, {\n    key: '_update',\n    value: function _update(action) {\n      var concepts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      var inputData = {};\n      if (concepts.length) {\n        inputData.concepts = concepts;\n      }\n      if (metadata !== null) {\n        inputData.metadata = metadata;\n      }\n      var data = {\n        action: action,\n        inputs: [{\n          id: this.id,\n          data: inputData\n        }]\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          return axios.patch(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Input(response.data.input));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Input;\n}();\n\n;\n\nmodule.exports = Input;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}