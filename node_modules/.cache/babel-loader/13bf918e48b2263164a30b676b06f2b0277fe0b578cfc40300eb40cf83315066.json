{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar axios = require('axios');\nvar Input = require('./Input');\nvar _require = require('./constants'),\n  API = _require.API,\n  ERRORS = _require.ERRORS,\n  MAX_BATCH_SIZE = _require.MAX_BATCH_SIZE,\n  replaceVars = _require.replaceVars;\nvar INPUT_PATH = API.INPUT_PATH,\n  INPUTS_PATH = API.INPUTS_PATH,\n  INPUTS_STATUS_PATH = API.INPUTS_STATUS_PATH,\n  SEARCH_PATH = API.SEARCH_PATH,\n  SEARCH_FEEDBACK_PATH = API.SEARCH_FEEDBACK_PATH;\nvar _require2 = require('./utils'),\n  wrapToken = _require2.wrapToken,\n  formatInput = _require2.formatInput,\n  formatImagesSearch = _require2.formatImagesSearch,\n  formatConceptsSearch = _require2.formatConceptsSearch;\nvar _require3 = require('./helpers'),\n  isSuccess = _require3.isSuccess,\n  checkType = _require3.checkType,\n  clone = _require3.clone;\n\n/**\n * class representing a collection of inputs\n * @class\n */\n\nvar Inputs = function () {\n  function Inputs(_config) {\n    var _this = this;\n    var rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    _classCallCheck(this, Inputs);\n    this.rawData = rawData;\n    rawData.forEach(function (inputData, index) {\n      if (inputData.input && inputData.score) {\n        inputData.input.score = inputData.score;\n        inputData = inputData.input;\n      }\n      _this[index] = new Input(_this._config, inputData);\n    });\n    this.length = rawData.length;\n    this._config = _config;\n  }\n\n  /**\n   * Get all inputs in app\n   * @param {Object}    options  Object with keys explained below: (optional)\n   *   @param {Number}    options.page  The page number (optional, default: 1)\n   *   @param {Number}    options.perPage  Number of images to return per page (optional, default: 20)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n\n  _createClass(Inputs, [{\n    key: 'list',\n    value: function list() {\n      var _this2 = this;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        page: 1,\n        perPage: 20\n      };\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            headers: headers,\n            params: {\n              page: options.page,\n              per_page: options.perPage\n            }\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Inputs(_this2._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Adds an input or multiple inputs\n     * @param {object|object[]}        inputs                                Can be a single media object or an array of media objects (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object|string}          inputs[].input                        If string, is given, this is assumed to be an image url\n     *     @param {string}                 inputs[].input.(url|base64)           Can be a publicly accessibly url or base64 string representing image bytes (required)\n     *     @param {string}                 inputs[].input.id                     ID of input (optional)\n     *     @param {number[]}               inputs[].input.crop                   An array containing the percent to be cropped from top, left, bottom and right (optional)\n     *     @param {boolean}               inputs[].input.allowDuplicateUrl       Whether to allow duplicate URL\n     *     @param {object[]}               inputs[].input.metadata               Object with key and values pair (value can be string, array or other objects) to attach to the input (optional)\n     *     @param {object}                 inputs[].input.geo                    Object with latitude and longitude coordinates to associate with an input. Can be used in search query as the proximity of an input to a reference point (optional)\n     *       @param {number}                 inputs[].input.geo.latitude           +/- latitude val of geodata\n     *       @param {number}                 inputs[].input.geo.longitude          +/- longitude val of geodata\n     *     @param {object[]}               inputs[].input.concepts               An array of concepts to attach to media object (optional)\n     *       @param {object|string}          inputs[].input.concepts[].concept     If string, is given, this is assumed to be concept id with value equals true\n     *         @param {string}                 inputs[].input.concepts[].concept.id          The concept id (required)\n     *         @param {boolean}                inputs[].input.concepts[].concept.value       Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n  }, {\n    key: 'create',\n    value: function create(inputs) {\n      var _this3 = this;\n      if (checkType(/(String|Object)/, inputs)) {\n        inputs = [inputs];\n      }\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      if (inputs.length > MAX_BATCH_SIZE) {\n        throw ERRORS.MAX_INPUTS;\n      }\n      return wrapToken(this._config, function (headers) {\n        var data = {\n          inputs: inputs.map(formatInput)\n        };\n        return new Promise(function (resolve, reject) {\n          axios.post(url, data, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Inputs(_this3._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Get input by id\n     * @param {String}    id  The input id\n     * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n     */\n  }, {\n    key: 'get',\n    value: function get(id) {\n      var _this4 = this;\n      var url = '' + this._config.basePath + replaceVars(INPUT_PATH, [id]);\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Input(_this4._config, response.data.input));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Delete an input or a list of inputs by id or all inputs if no id is passed\n     * @param {string|string[]}    id           The id of input to delete (optional)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n  }, {\n    key: 'delete',\n    value: function _delete() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var val = void 0;\n      // delete an input\n      if (checkType(/String/, id)) {\n        var url = '' + this._config.basePath + replaceVars(INPUT_PATH, [id]);\n        val = wrapToken(this._config, function (headers) {\n          return axios.delete(url, {\n            headers: headers\n          });\n        });\n      } else {\n        val = this._deleteInputs(id);\n      }\n      return val;\n    }\n  }, {\n    key: '_deleteInputs',\n    value: function _deleteInputs() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        var data = id === null ? {\n          delete_all: true\n        } : {\n          ids: id\n        };\n        return axios({\n          url: url,\n          method: 'delete',\n          headers: headers,\n          data: data\n        });\n      });\n    }\n\n    /**\n     * Merge concepts to inputs in bulk\n     * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id        The id of the input to update\n     *     @param {string}           inputs[].input.concepts  Object with keys explained below:\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n  }, {\n    key: 'mergeConcepts',\n    value: function mergeConcepts(inputs) {\n      inputs.action = 'merge';\n      return this.update(inputs);\n    }\n\n    /**\n     * Delete concepts to inputs in bulk\n     * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id                           The id of the input to update\n     *     @param {string}           inputs[].input.concepts                     Object with keys explained below:\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n  }, {\n    key: 'deleteConcepts',\n    value: function deleteConcepts(inputs) {\n      inputs.action = 'remove';\n      return this.update(inputs);\n    }\n\n    /**\n     * Overwrite inputs in bulk\n     * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id                           The id of the input to update\n     *     @param {string}           inputs[].input.concepts                     Object with keys explained below:\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n  }, {\n    key: 'overwriteConcepts',\n    value: function overwriteConcepts(inputs) {\n      inputs.action = 'overwrite';\n      return this.update(inputs);\n    }\n\n    /**\n     * @param {object[]}         inputs    List of inputs to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id                           The id of the input to update\n     *     @param {object}           inputs[].input.metadata                     Object with key values to attach to the input (optional)\n     *     @param {object}           inputs[].input.geo                          Object with latitude and longitude coordinates to associate with an input. Can be used in search query as the proximity of an input to a reference point (optional)\n     *       @param {number}           inputs[].input.geo.latitude                 +/- latitude val of geodata\n     *       @param {number}           inputs[].input.geo.longitude                +/- longitude val of geodata\n     *     @param {string}           inputs[].input.concepts                     Object with keys explained below (optional):\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n  }, {\n    key: 'update',\n    value: function update(inputs) {\n      var _this5 = this;\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      var inputsList = Array.isArray(inputs) ? inputs : [inputs];\n      if (inputsList.length > MAX_BATCH_SIZE) {\n        throw ERRORS.MAX_INPUTS;\n      }\n      var data = {\n        action: inputs.action,\n        inputs: inputsList.map(function (input) {\n          return formatInput(input, false);\n        })\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.patch(url, data, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Inputs(_this5._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Search for inputs or outputs based on concepts or images\n     *   @param {object[]}               queries          List of all predictions to match with\n     *     @param {object}                 queries[].concept            An object with the following keys:\n     *       @param {string}                 queries[].concept.id          The concept id\n     *       @param {string}                 queries[].concept.type        Search over 'input' to get input matches to criteria or 'output' to get inputs that are visually similar to the criteria (default: 'output')\n     *       @param {string}                 queries[].concept.name        The concept name\n     *       @param {boolean}                queries[].concept.value       Indicates whether or not the term should match with the prediction returned (default: true)\n     *     @param {object}                 queries[].input              An image object that contains the following keys:\n     *       @param {string}                 queries[].input.id            The input id\n     *       @param {string}                 queries[].input.type          Search over 'input' to get input matches to criteria or 'output' to get inputs that are visually similar to the criteria (default: 'output')\n     *       @param {string}                 queries[].input.(base64|url)  Can be a publicly accessibly url or base64 string representing image bytes (required)\n     *       @param {number[]}               queries[].input.crop          An array containing the percent to be cropped from top, left, bottom and right (optional)\n     *       @param {object}                 queries[].input.metadata      An object with key and value specified by user to refine search with (optional)\n     * @param {Object}                   options       Object with keys explained below: (optional)\n     *    @param {Number}                  options.page          The page number (optional, default: 1)\n     *    @param {Number}                  options.perPage       Number of images to return per page (optional, default: 20)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n  }, {\n    key: 'search',\n    value: function search() {\n      var queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        page: 1,\n        perPage: 20\n      };\n      var formattedAnds = [];\n      var url = '' + this._config.basePath + SEARCH_PATH;\n      var data = {\n        query: {\n          ands: []\n        },\n        pagination: {\n          page: options.page,\n          per_page: options.perPage\n        }\n      };\n      if (!Array.isArray(queries)) {\n        queries = [queries];\n      }\n      if (queries.length > 0) {\n        queries.forEach(function (query) {\n          if (query.input) {\n            formattedAnds = formattedAnds.concat(formatImagesSearch(query.input));\n          } else if (query.concept) {\n            formattedAnds = formattedAnds.concat(formatConceptsSearch(query.concept));\n          }\n        });\n        data.query.ands = formattedAnds;\n      }\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, data, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              var _data = clone(response.data);\n              _data.rawData = clone(response.data);\n              resolve(_data);\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }, {\n    key: 'searchFeedback',\n    value: function searchFeedback(inputID, searchID, endUserID, sessionID) {\n      var url = '' + this._config.basePath + SEARCH_FEEDBACK_PATH;\n      var body = {\n        input: {\n          id: inputID,\n          feedback_info: {\n            event_type: 'search_click',\n            search_id: searchID,\n            end_user_id: endUserID,\n            session_id: sessionID\n          }\n        }\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, body, {\n            headers: headers\n          }).then(function (_ref) {\n            var data = _ref.data;\n            var d = clone(data);\n            d.rawData = clone(data);\n            resolve(d);\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Get inputs status (number of uploaded, in process or failed inputs)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n  }, {\n    key: 'getStatus',\n    value: function getStatus() {\n      var url = '' + this._config.basePath + INPUTS_STATUS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              var data = clone(response.data);\n              data.rawData = clone(response.data);\n              resolve(data);\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }]);\n  return Inputs;\n}();\n;\nmodule.exports = Inputs;","map":{"version":3,"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","axios","require","Input","_require","API","ERRORS","MAX_BATCH_SIZE","replaceVars","INPUT_PATH","INPUTS_PATH","INPUTS_STATUS_PATH","SEARCH_PATH","SEARCH_FEEDBACK_PATH","_require2","wrapToken","formatInput","formatImagesSearch","formatConceptsSearch","_require3","isSuccess","checkType","clone","Inputs","_config","_this","rawData","arguments","undefined","forEach","inputData","index","input","score","value","list","_this2","options","page","perPage","url","basePath","headers","Promise","resolve","reject","get","params","per_page","then","response","data","inputs","create","_this3","MAX_INPUTS","map","post","id","_this4","_delete","val","delete","_deleteInputs","delete_all","ids","method","mergeConcepts","action","update","deleteConcepts","overwriteConcepts","_this5","inputsList","Array","isArray","patch","search","queries","formattedAnds","query","ands","pagination","concat","concept","_data","searchFeedback","inputID","searchID","endUserID","sessionID","body","feedback_info","event_type","search_id","end_user_id","session_id","_ref","d","getStatus","module","exports"],"sources":["/workspace/smartBrain/node_modules/clarifai/dist/Inputs.js"],"sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar axios = require('axios');\nvar Input = require('./Input');\n\nvar _require = require('./constants'),\n    API = _require.API,\n    ERRORS = _require.ERRORS,\n    MAX_BATCH_SIZE = _require.MAX_BATCH_SIZE,\n    replaceVars = _require.replaceVars;\n\nvar INPUT_PATH = API.INPUT_PATH,\n    INPUTS_PATH = API.INPUTS_PATH,\n    INPUTS_STATUS_PATH = API.INPUTS_STATUS_PATH,\n    SEARCH_PATH = API.SEARCH_PATH,\n    SEARCH_FEEDBACK_PATH = API.SEARCH_FEEDBACK_PATH;\n\nvar _require2 = require('./utils'),\n    wrapToken = _require2.wrapToken,\n    formatInput = _require2.formatInput,\n    formatImagesSearch = _require2.formatImagesSearch,\n    formatConceptsSearch = _require2.formatConceptsSearch;\n\nvar _require3 = require('./helpers'),\n    isSuccess = _require3.isSuccess,\n    checkType = _require3.checkType,\n    clone = _require3.clone;\n\n/**\n * class representing a collection of inputs\n * @class\n */\n\n\nvar Inputs = function () {\n  function Inputs(_config) {\n    var _this = this;\n\n    var rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Inputs);\n\n    this.rawData = rawData;\n    rawData.forEach(function (inputData, index) {\n      if (inputData.input && inputData.score) {\n        inputData.input.score = inputData.score;\n        inputData = inputData.input;\n      }\n      _this[index] = new Input(_this._config, inputData);\n    });\n    this.length = rawData.length;\n    this._config = _config;\n  }\n\n  /**\n   * Get all inputs in app\n   * @param {Object}    options  Object with keys explained below: (optional)\n   *   @param {Number}    options.page  The page number (optional, default: 1)\n   *   @param {Number}    options.perPage  Number of images to return per page (optional, default: 20)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n\n\n  _createClass(Inputs, [{\n    key: 'list',\n    value: function list() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { page: 1, perPage: 20 };\n\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            headers: headers,\n            params: {\n              page: options.page,\n              per_page: options.perPage\n            }\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Inputs(_this2._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Adds an input or multiple inputs\n     * @param {object|object[]}        inputs                                Can be a single media object or an array of media objects (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object|string}          inputs[].input                        If string, is given, this is assumed to be an image url\n     *     @param {string}                 inputs[].input.(url|base64)           Can be a publicly accessibly url or base64 string representing image bytes (required)\n     *     @param {string}                 inputs[].input.id                     ID of input (optional)\n     *     @param {number[]}               inputs[].input.crop                   An array containing the percent to be cropped from top, left, bottom and right (optional)\n     *     @param {boolean}               inputs[].input.allowDuplicateUrl       Whether to allow duplicate URL\n     *     @param {object[]}               inputs[].input.metadata               Object with key and values pair (value can be string, array or other objects) to attach to the input (optional)\n     *     @param {object}                 inputs[].input.geo                    Object with latitude and longitude coordinates to associate with an input. Can be used in search query as the proximity of an input to a reference point (optional)\n     *       @param {number}                 inputs[].input.geo.latitude           +/- latitude val of geodata\n     *       @param {number}                 inputs[].input.geo.longitude          +/- longitude val of geodata\n     *     @param {object[]}               inputs[].input.concepts               An array of concepts to attach to media object (optional)\n     *       @param {object|string}          inputs[].input.concepts[].concept     If string, is given, this is assumed to be concept id with value equals true\n     *         @param {string}                 inputs[].input.concepts[].concept.id          The concept id (required)\n     *         @param {boolean}                inputs[].input.concepts[].concept.value       Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'create',\n    value: function create(inputs) {\n      var _this3 = this;\n\n      if (checkType(/(String|Object)/, inputs)) {\n        inputs = [inputs];\n      }\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      if (inputs.length > MAX_BATCH_SIZE) {\n        throw ERRORS.MAX_INPUTS;\n      }\n      return wrapToken(this._config, function (headers) {\n        var data = {\n          inputs: inputs.map(formatInput)\n        };\n        return new Promise(function (resolve, reject) {\n          axios.post(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Inputs(_this3._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Get input by id\n     * @param {String}    id  The input id\n     * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n     */\n\n  }, {\n    key: 'get',\n    value: function get(id) {\n      var _this4 = this;\n\n      var url = '' + this._config.basePath + replaceVars(INPUT_PATH, [id]);\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Input(_this4._config, response.data.input));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Delete an input or a list of inputs by id or all inputs if no id is passed\n     * @param {string|string[]}    id           The id of input to delete (optional)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'delete',\n    value: function _delete() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var val = void 0;\n      // delete an input\n      if (checkType(/String/, id)) {\n        var url = '' + this._config.basePath + replaceVars(INPUT_PATH, [id]);\n        val = wrapToken(this._config, function (headers) {\n          return axios.delete(url, { headers: headers });\n        });\n      } else {\n        val = this._deleteInputs(id);\n      }\n      return val;\n    }\n  }, {\n    key: '_deleteInputs',\n    value: function _deleteInputs() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        var data = id === null ? { delete_all: true } : { ids: id };\n        return axios({\n          url: url,\n          method: 'delete',\n          headers: headers,\n          data: data\n        });\n      });\n    }\n\n    /**\n     * Merge concepts to inputs in bulk\n     * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id        The id of the input to update\n     *     @param {string}           inputs[].input.concepts  Object with keys explained below:\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'mergeConcepts',\n    value: function mergeConcepts(inputs) {\n      inputs.action = 'merge';\n      return this.update(inputs);\n    }\n\n    /**\n     * Delete concepts to inputs in bulk\n     * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id                           The id of the input to update\n     *     @param {string}           inputs[].input.concepts                     Object with keys explained below:\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'deleteConcepts',\n    value: function deleteConcepts(inputs) {\n      inputs.action = 'remove';\n      return this.update(inputs);\n    }\n\n    /**\n     * Overwrite inputs in bulk\n     * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id                           The id of the input to update\n     *     @param {string}           inputs[].input.concepts                     Object with keys explained below:\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'overwriteConcepts',\n    value: function overwriteConcepts(inputs) {\n      inputs.action = 'overwrite';\n      return this.update(inputs);\n    }\n\n    /**\n     * @param {object[]}         inputs    List of inputs to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id                           The id of the input to update\n     *     @param {object}           inputs[].input.metadata                     Object with key values to attach to the input (optional)\n     *     @param {object}           inputs[].input.geo                          Object with latitude and longitude coordinates to associate with an input. Can be used in search query as the proximity of an input to a reference point (optional)\n     *       @param {number}           inputs[].input.geo.latitude                 +/- latitude val of geodata\n     *       @param {number}           inputs[].input.geo.longitude                +/- longitude val of geodata\n     *     @param {string}           inputs[].input.concepts                     Object with keys explained below (optional):\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'update',\n    value: function update(inputs) {\n      var _this5 = this;\n\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      var inputsList = Array.isArray(inputs) ? inputs : [inputs];\n      if (inputsList.length > MAX_BATCH_SIZE) {\n        throw ERRORS.MAX_INPUTS;\n      }\n      var data = {\n        action: inputs.action,\n        inputs: inputsList.map(function (input) {\n          return formatInput(input, false);\n        })\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.patch(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Inputs(_this5._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Search for inputs or outputs based on concepts or images\n     *   @param {object[]}               queries          List of all predictions to match with\n     *     @param {object}                 queries[].concept            An object with the following keys:\n     *       @param {string}                 queries[].concept.id          The concept id\n     *       @param {string}                 queries[].concept.type        Search over 'input' to get input matches to criteria or 'output' to get inputs that are visually similar to the criteria (default: 'output')\n     *       @param {string}                 queries[].concept.name        The concept name\n     *       @param {boolean}                queries[].concept.value       Indicates whether or not the term should match with the prediction returned (default: true)\n     *     @param {object}                 queries[].input              An image object that contains the following keys:\n     *       @param {string}                 queries[].input.id            The input id\n     *       @param {string}                 queries[].input.type          Search over 'input' to get input matches to criteria or 'output' to get inputs that are visually similar to the criteria (default: 'output')\n     *       @param {string}                 queries[].input.(base64|url)  Can be a publicly accessibly url or base64 string representing image bytes (required)\n     *       @param {number[]}               queries[].input.crop          An array containing the percent to be cropped from top, left, bottom and right (optional)\n     *       @param {object}                 queries[].input.metadata      An object with key and value specified by user to refine search with (optional)\n     * @param {Object}                   options       Object with keys explained below: (optional)\n     *    @param {Number}                  options.page          The page number (optional, default: 1)\n     *    @param {Number}                  options.perPage       Number of images to return per page (optional, default: 20)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'search',\n    value: function search() {\n      var queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { page: 1, perPage: 20 };\n\n      var formattedAnds = [];\n      var url = '' + this._config.basePath + SEARCH_PATH;\n      var data = {\n        query: {\n          ands: []\n        },\n        pagination: {\n          page: options.page,\n          per_page: options.perPage\n        }\n      };\n\n      if (!Array.isArray(queries)) {\n        queries = [queries];\n      }\n      if (queries.length > 0) {\n        queries.forEach(function (query) {\n          if (query.input) {\n            formattedAnds = formattedAnds.concat(formatImagesSearch(query.input));\n          } else if (query.concept) {\n            formattedAnds = formattedAnds.concat(formatConceptsSearch(query.concept));\n          }\n        });\n        data.query.ands = formattedAnds;\n      }\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              var _data = clone(response.data);\n              _data.rawData = clone(response.data);\n              resolve(_data);\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }, {\n    key: 'searchFeedback',\n    value: function searchFeedback(inputID, searchID, endUserID, sessionID) {\n      var url = '' + this._config.basePath + SEARCH_FEEDBACK_PATH;\n      var body = {\n        input: {\n          id: inputID,\n          feedback_info: {\n            event_type: 'search_click',\n            search_id: searchID,\n            end_user_id: endUserID,\n            session_id: sessionID\n          }\n        }\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, body, {\n            headers: headers\n          }).then(function (_ref) {\n            var data = _ref.data;\n\n            var d = clone(data);\n            d.rawData = clone(data);\n            resolve(d);\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Get inputs status (number of uploaded, in process or failed inputs)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'getStatus',\n    value: function getStatus() {\n      var url = '' + this._config.basePath + INPUTS_STATUS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              var data = clone(response.data);\n              data.rawData = clone(response.data);\n              resolve(data);\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Inputs;\n}();\n\n;\n\nmodule.exports = Inputs;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}