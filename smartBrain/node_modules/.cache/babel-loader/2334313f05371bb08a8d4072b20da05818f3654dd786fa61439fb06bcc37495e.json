{"ast":null,"code":"/*!\n* Proton v4.2.1\n* https://github.com/drawcall/Proton\n*\n* Copyright 2013-2020, A-JIE\n* Licensed under the MIT license\n* http://www.opensource.org/licenses/mit-license\n*\n*/\n!function (t, e) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = e() : \"function\" == typeof define && define.amd ? define(e) : t.Proton = e();\n}(this, function () {\n  \"use strict\";\n\n  var e = 3.1415926,\n    s = {\n      PI: e,\n      PIx2: 2 * e,\n      PI_2: e / 2,\n      PI_180: e / 180,\n      N180_PI: 180 / e,\n      Infinity: -999,\n      isInfinity: function (t) {\n        return t === this.Infinity || t === 1 / 0;\n      },\n      randomAToB: function (t, e, i) {\n        return 2 < arguments.length && void 0 !== i && i ? Math.floor(Math.random() * (e - t)) + t : t + Math.random() * (e - t);\n      },\n      randomFloating: function (t, e, i) {\n        return this.randomAToB(t - e, t + e, i);\n      },\n      randomColor: function () {\n        return \"#\" + (\"00000\" + (16777216 * Math.random() << 0).toString(16)).slice(-6);\n      },\n      randomZone: function () {},\n      floor: function (t, e) {\n        e = 1 < arguments.length && void 0 !== e ? e : 4, e = Math.pow(10, e);\n        return Math.floor(t * e) / e;\n      },\n      degreeTransform: function (t) {\n        return t * e / 180;\n      },\n      toColor16: function (t) {\n        return \"#\" + t.toString(16);\n      }\n    },\n    i = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (t) {\n      return typeof t;\n    } : function (t) {\n      return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n    },\n    o = function (t, e) {\n      if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n    },\n    t = function (t, e, i) {\n      return e && a(t.prototype, e), i && a(t, i), t;\n    };\n  function a(t, e) {\n    for (var i = 0; i < e.length; i++) {\n      var a = e[i];\n      a.enumerable = a.enumerable || !1, a.configurable = !0, \"value\" in a && (a.writable = !0), Object.defineProperty(t, a.key, a);\n    }\n  }\n  function n(t, e, i) {\n    null === t && (t = Function.prototype);\n    var a = Object.getOwnPropertyDescriptor(t, e);\n    if (void 0 !== a) {\n      if (\"value\" in a) return a.value;\n      a = a.get;\n      return void 0 !== a ? a.call(i) : void 0;\n    }\n    if (null !== (t = Object.getPrototypeOf(t))) return n(t, e, i);\n  }\n  var r = function (t, e) {\n      if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function, not \" + typeof e);\n      t.prototype = Object.create(e && e.prototype, {\n        constructor: {\n          value: t,\n          enumerable: !1,\n          writable: !0,\n          configurable: !0\n        }\n      }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);\n    },\n    h = function (t, e) {\n      if (!t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n      return !e || \"object\" != typeof e && \"function\" != typeof e ? t : e;\n    },\n    l = (t(u, [{\n      key: \"getValue\",\n      value: function (t) {\n        t = 0 < arguments.length && void 0 !== t && t;\n        return this.isArray ? P.getRandFromArray(this.a) : this.center ? s.randomFloating(this.a, this.b, t) : s.randomAToB(this.a, this.b, t);\n      }\n    }], [{\n      key: \"setSpanValue\",\n      value: function (t, e, i) {\n        return t instanceof u ? t : void 0 === e ? new u(t) : void 0 === i ? new u(t, e) : new u(t, e, i);\n      }\n    }, {\n      key: \"getSpanValue\",\n      value: function (t) {\n        return t instanceof u ? t.getValue() : t;\n      }\n    }]), u);\n  function u(t, e, i) {\n    o(this, u), P.isArray(t) ? (this.isArray = !0, this.a = t) : (this.isArray = !1, this.a = P.initValue(t, 1), this.b = P.initValue(e, this.a), this.center = P.initValue(i, !1));\n  }\n  var c = function (t) {\n      --t;\n      for (var e = 1; e < 32; e <<= 1) t |= t >> e;\n      return t + 1;\n    },\n    d = function (t, e) {\n      return [1, 0, 0, 0, 1, 0, t, e, 1];\n    },\n    y = function (t) {\n      var e = Math.cos(t),\n        t = Math.sin(t);\n      return [e, -t, 0, t, e, 0, 0, 0, 1];\n    },\n    p = function (t, e) {\n      return [t, 0, 0, 0, e, 0, 0, 0, 1];\n    },\n    f = function (t, e) {\n      var i = t[0],\n        a = t[1],\n        r = t[2],\n        n = t[3],\n        s = t[4],\n        o = t[5],\n        h = t[6],\n        l = t[7],\n        u = t[8],\n        c = e[0],\n        d = e[1],\n        y = e[2],\n        p = e[3],\n        f = e[4],\n        v = e[5],\n        g = e[6],\n        t = e[7],\n        e = e[8];\n      return [i * c + a * p + r * g, i * d + a * f + r * t, i * y + a * v + r * e, n * c + s * p + o * g, n * d + s * f + o * t, n * y + s * v + o * e, h * c + l * p + u * g, h * d + l * f + u * t, h * y + l * v + u * e];\n    },\n    v = {\n      createCanvas: function (t, e, i, a) {\n        var r = 3 < arguments.length && void 0 !== a ? a : \"absolute\",\n          a = document.createElement(\"canvas\");\n        return a.id = t, a.width = e, a.height = i, a.style.opacity = 0, a.style.position = r, this.transform(a, -500, -500, 0, 0), a;\n      },\n      createDiv: function (t, e, i) {\n        var a = document.createElement(\"div\");\n        return a.id = t, a.style.position = \"absolute\", this.resize(a, e, i), a;\n      },\n      resize: function (t, e, i) {\n        t.style.width = e + \"px\", t.style.height = i + \"px\", t.style.marginLeft = -e / 2 + \"px\", t.style.marginTop = -i / 2 + \"px\";\n      },\n      transform: function (t, e, i, a, r) {\n        t.style.willChange = \"transform\";\n        var n = \"translate(\" + e + \"px, \" + i + \"px) scale(\" + a + \") rotate(\" + r + \"deg)\";\n        this.css3(t, \"transform\", n);\n      },\n      transform3d: function (t, e, i, a, r) {\n        t.style.willChange = \"transform\";\n        r = \"translate3d(\" + e + \"px, \" + i + \"px, 0) scale(\" + a + \") rotate(\" + r + \"deg)\";\n        this.css3(t, \"backfaceVisibility\", \"hidden\"), this.css3(t, \"transform\", r);\n      },\n      css3: function (t, e, i) {\n        var a = e.charAt(0).toUpperCase() + e.substr(1);\n        t.style[\"Webkit\" + a] = i, t.style[\"Moz\" + a] = i, t.style[\"O\" + a] = i, t.style[\"ms\" + a] = i, t.style[\"\" + e] = i;\n      }\n    },\n    g = {},\n    m = {},\n    b = 0,\n    _ = function (t, e, i) {\n      t.drawImage(e, i.x, i.y);\n      e = t.getImageData(i.x, i.y, i.width, i.height);\n      return t.clearRect(i.x, i.y, i.width, i.height), e;\n    },\n    x = function (t, e, i) {\n      var a = \"string\" == typeof t ? t : t.src;\n      g[a] ? e(g[a], i) : ((t = new Image()).onload = function (t) {\n        g[a] = t.target, e(g[a], i);\n      }, t.src = a);\n    },\n    k = function (t, e, i) {\n      var a,\n        r,\n        n = t.src;\n      return m[n] || (a = c(t.width), r = c(t.height), (r = v.createCanvas(\"proton_canvas_cache_\" + ++b, a, r)).getContext(\"2d\").drawImage(t, 0, 0, t.width, t.height), m[n] = r), e && e(m[n], i), m[n];\n    },\n    P = {\n      initValue: function (t, e) {\n        return t = null != t ? t : e;\n      },\n      isArray: function (t) {\n        return \"[object Array]\" === Object.prototype.toString.call(t);\n      },\n      emptyArray: function (t) {\n        t && (t.length = 0);\n      },\n      toArray: function (t) {\n        return this.isArray(t) ? t : [t];\n      },\n      getRandFromArray: function (t) {\n        return t ? t[Math.floor(t.length * Math.random())] : null;\n      },\n      emptyObject: function (t, e) {\n        var i,\n          a = 1 < arguments.length && void 0 !== e ? e : null;\n        for (i in t) a && -1 < a.indexOf(i) || delete t[i];\n      },\n      classApply: function (t, e) {\n        e = 1 < arguments.length && void 0 !== e ? e : null;\n        return new (e ? t.bind.apply(t, [null].concat(e)) : t)();\n      },\n      setVectorVal: function (t, e) {\n        e = 1 < arguments.length && void 0 !== e ? e : null;\n        e && (this.hasProp(e, \"x\") && (t.p.x = e.x), this.hasProp(e, \"y\") && (t.p.y = e.y), this.hasProp(e, \"vx\") && (t.v.x = e.vx), this.hasProp(e, \"vy\") && (t.v.y = e.vy), this.hasProp(e, \"ax\") && (t.a.x = e.ax), this.hasProp(e, \"ay\") && (t.a.y = e.ay), this.hasProp(e, \"p\") && t.p.copy(e.p), this.hasProp(e, \"v\") && t.v.copy(e.v), this.hasProp(e, \"a\") && t.a.copy(e.a), this.hasProp(e, \"position\") && t.p.copy(e.position), this.hasProp(e, \"velocity\") && t.v.copy(e.velocity), this.hasProp(e, \"accelerate\") && t.a.copy(e.accelerate));\n      },\n      hasProp: function (t, e) {\n        return !!t && void 0 !== t[e];\n      },\n      setProp: function (t, e) {\n        for (var i in e) t.hasOwnProperty(i) && (t[i] = l.getSpanValue(e[i]));\n        return t;\n      },\n      getImageData: function (t, e, i) {\n        return _(t, e, i);\n      },\n      destroyAll: function (t, e) {\n        for (var i = 1 < arguments.length && void 0 !== e ? e : null, a = t.length; a--;) {\n          try {\n            t[a].destroy(i);\n          } catch (t) {}\n          delete t[a];\n        }\n        t.length = 0;\n      },\n      assign: function (t, e) {\n        if (\"function\" == typeof Object.assign) return Object.assign(t, e);\n        for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);\n        return t;\n      }\n    },\n    E = {},\n    A = {\n      _index: 0,\n      _cache: {},\n      id: function (t) {\n        return void 0 !== E[t] && null !== E[t] || (E[t] = 0), t + \"_\" + E[t]++;\n      },\n      getId: function (t) {\n        var e = this.getIdFromCache(t);\n        return e || (e = \"PUID_\" + this._index++, this._cache[e] = t, e);\n      },\n      getIdFromCache: function (t) {\n        var e,\n          i = void 0;\n        for (i in this._cache) {\n          if ((e = this._cache[i]) === t) return i;\n          if (this.isBody(e, t) && e.src === t.src) return i;\n        }\n        return null;\n      },\n      isBody: function (t, e) {\n        return \"object\" === (void 0 === t ? \"undefined\" : i(t)) && \"object\" === (void 0 === e ? \"undefined\" : i(e)) && t.isInner && e.isInner;\n      },\n      getTarget: function (t) {\n        return this._cache[t];\n      }\n    },\n    T = (t(R, [{\n      key: \"get\",\n      value: function (t, e, i) {\n        var a = void 0;\n        return i = i || t.__puid || A.getId(t), (a = this.cache[i] && 0 < this.cache[i].length ? this.cache[i].pop() : this.createOrClone(t, e)).__puid = t.__puid || i, a;\n      }\n    }, {\n      key: \"expire\",\n      value: function (t) {\n        return this.getCache(t.__puid).push(t);\n      }\n    }, {\n      key: \"createOrClone\",\n      value: function (t, e) {\n        return this.total++, this.create ? this.create(t, e) : \"function\" == typeof t ? P.classApply(t, e) : t.clone();\n      }\n    }, {\n      key: \"getCount\",\n      value: function () {\n        var t,\n          e = 0;\n        for (t in this.cache) e += this.cache[t].length;\n        return e++;\n      }\n    }, {\n      key: \"destroy\",\n      value: function () {\n        for (var t in this.cache) this.cache[t].length = 0, delete this.cache[t];\n      }\n    }, {\n      key: \"getCache\",\n      value: function (t) {\n        t = 0 < arguments.length && void 0 !== t ? t : \"default\";\n        return this.cache[t] || (this.cache[t] = []), this.cache[t];\n      }\n    }]), R);\n  function R(t) {\n    o(this, R), this.total = 0, this.cache = {};\n  }\n  var O = (t(w, [{\n    key: \"update\",\n    value: function (t, e) {\n      this.add(t, e);\n      var i = this.getEmitter(),\n        t = this.getRenderer(),\n        e = \"\";\n      switch (this.type) {\n        case 2:\n          e += \"emitter:\" + this.proton.emitters.length + \"<br>\", i && (e += \"em speed:\" + i.emitSpeed + \"<br>\"), i && (e += \"pos:\" + this.getEmitterPos(i));\n          break;\n        case 3:\n          i && (e += \"initializes:\" + i.initializes.length + \"<br>\"), i && (e += '<span style=\"display:inline-block;\">' + this.concatArr(i.initializes) + \"</span><br>\"), i && (e += \"behaviours:\" + i.behaviours.length + \"<br>\"), i && (e += '<span style=\"display:inline-block;\">' + this.concatArr(i.behaviours) + \"</span><br>\");\n          break;\n        case 4:\n          t && (e += t.name + \"<br>\"), t && (e += \"body:\" + this.getCreatedNumber(t) + \"<br>\");\n          break;\n        default:\n          e += \"particles:\" + this.proton.getCount() + \"<br>\", e += \"pool:\" + this.proton.pool.getCount() + \"<br>\", e += \"total:\" + this.proton.pool.total;\n      }\n      this.container.innerHTML = e;\n    }\n  }, {\n    key: \"add\",\n    value: function (t, e) {\n      var i = this;\n      if (!this.container) {\n        this.type = 1, this.container = document.createElement(\"div\"), this.container.style.cssText = [\"position:absolute;bottom:0px;left:0;cursor:pointer;\", \"opacity:0.9;z-index:10000;padding:10px;font-size:12px;font-family:Helvetica,Arial,sans-serif;\", \"width:120px;height:50px;background-color:#002;color:#0ff;\"].join(\"\"), this.container.addEventListener(\"click\", function (t) {\n          i.type++, 4 < i.type && (i.type = 1);\n        }, !1);\n        var a = void 0,\n          r = void 0;\n        switch (t) {\n          case 2:\n            a = \"#201\", r = \"#f08\";\n            break;\n          case 3:\n            a = \"#020\", r = \"#0f0\";\n            break;\n          default:\n            a = \"#002\", r = \"#0ff\";\n        }\n        this.container.style[\"background-color\"] = a, this.container.style.color = r;\n      }\n      this.container.parentNode || (e = e || this.body || document.body).appendChild(this.container);\n    }\n  }, {\n    key: \"getEmitter\",\n    value: function () {\n      return this.proton.emitters[this.emitterIndex];\n    }\n  }, {\n    key: \"getRenderer\",\n    value: function () {\n      return this.proton.renderers[this.rendererIndex];\n    }\n  }, {\n    key: \"concatArr\",\n    value: function (t) {\n      var e = \"\";\n      if (!t || !t.length) return e;\n      for (var i = 0; i < t.length; i++) e += (t[i].name || \"\").substr(0, 1) + \".\";\n      return e;\n    }\n  }, {\n    key: \"getCreatedNumber\",\n    value: function (t) {\n      return t.pool.total || t.cpool && t.cpool.total || 0;\n    }\n  }, {\n    key: \"getEmitterPos\",\n    value: function (t) {\n      return Math.round(t.p.x) + \",\" + Math.round(t.p.y);\n    }\n  }]), w);\n  function w(t) {\n    o(this, w), this.proton = t, this.container = null, this.type = 1, this.emitterIndex = 0, this.rendererIndex = 0;\n  }\n  var C = (t(S, [{\n    key: \"addEventListener\",\n    value: function (t, e) {\n      return this._listeners ? this.removeEventListener(t, e) : this._listeners = {}, this._listeners[t] || (this._listeners[t] = []), this._listeners[t].push(e), e;\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function (t, e) {\n      if (this._listeners && this._listeners[t]) for (var i = this._listeners[t], a = i.length, r = 0; r < a; r++) if (i[r] === e) {\n        1 === a ? delete this._listeners[t] : i.splice(r, 1);\n        break;\n      }\n    }\n  }, {\n    key: \"removeAllEventListeners\",\n    value: function (t) {\n      t ? this._listeners && delete this._listeners[t] : this._listeners = null;\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function (t, e) {\n      var i = !1,\n        a = this._listeners;\n      if (t && a) {\n        var r = a[t];\n        if (!r) return i;\n        for (var n = void 0, s = r.length; s--;) n = r[s], i = i || n(e);\n      }\n      return !!i;\n    }\n  }, {\n    key: \"hasEventListener\",\n    value: function (t) {\n      var e = this._listeners;\n      return !(!e || !e[t]);\n    }\n  }], [{\n    key: \"bind\",\n    value: function (t) {\n      t.prototype.dispatchEvent = S.prototype.dispatchEvent, t.prototype.hasEventListener = S.prototype.hasEventListener, t.prototype.addEventListener = S.prototype.addEventListener, t.prototype.removeEventListener = S.prototype.removeEventListener, t.prototype.removeAllEventListeners = S.prototype.removeAllEventListeners;\n    }\n  }]), S);\n  function S() {\n    o(this, S), this._listeners = null;\n  }\n  var I = (t(D, [{\n    key: \"calculate\",\n    value: function (t, e, i) {\n      this.eulerIntegrate(t, e, i);\n    }\n  }, {\n    key: \"eulerIntegrate\",\n    value: function (t, e, i) {\n      t.sleep || (t.old.p.copy(t.p), t.old.v.copy(t.v), t.a.multiplyScalar(1 / t.mass), t.v.add(t.a.multiplyScalar(e)), t.p.add(t.old.v.multiplyScalar(e)), i && t.v.multiplyScalar(i), t.a.clear());\n    }\n  }]), D);\n  function D(t) {\n    o(this, D), this.type = t;\n  }\n  var V = (t(M, [{\n    key: \"addRenderer\",\n    value: function (t) {\n      t.init(this), this.renderers.push(t);\n    }\n  }, {\n    key: \"removeRenderer\",\n    value: function (t) {\n      var e = this.renderers.indexOf(t);\n      this.renderers.splice(e, 1), t.remove(this);\n    }\n  }, {\n    key: \"addEmitter\",\n    value: function (t) {\n      this.emitters.push(t), (t.parent = this).dispatchEvent(M.EMITTER_ADDED, t);\n    }\n  }, {\n    key: \"removeEmitter\",\n    value: function (t) {\n      var e = this.emitters.indexOf(t);\n      this.emitters.splice(e, 1), t.parent = null, this.dispatchEvent(M.EMITTER_REMOVED, t);\n    }\n  }, {\n    key: \"update\",\n    value: function () {\n      \"auto\" === this._fps ? (this.dispatchEvent(M.PROTON_UPDATE), M.USE_CLOCK ? (this.then || (this.then = new Date().getTime()), this.now = new Date().getTime(), this.elapsed = .001 * (this.now - this.then), this.amendChangeTabsBug(), 0 < this.elapsed && this.emittersUpdate(this.elapsed), this.then = this.now) : this.emittersUpdate(M.DEFAULT_INTERVAL), this.dispatchEvent(M.PROTON_UPDATE_AFTER)) : (this.then || (this.then = new Date().getTime()), this.now = new Date().getTime(), this.elapsed = .001 * (this.now - this.then), this.elapsed > this._interval && (this.dispatchEvent(M.PROTON_UPDATE), this.emittersUpdate(this._interval), this.then = this.now - this.elapsed % this._interval * 1e3, this.dispatchEvent(M.PROTON_UPDATE_AFTER)));\n    }\n  }, {\n    key: \"emittersUpdate\",\n    value: function (t) {\n      for (var e = this.emitters.length; e--;) this.emitters[e].update(t);\n    }\n  }, {\n    key: \"amendChangeTabsBug\",\n    value: function () {\n      M.amendChangeTabsBug && .5 < this.elapsed && (this.then = new Date().getTime(), this.elapsed = 0);\n    }\n  }, {\n    key: \"getCount\",\n    value: function () {\n      for (var t = 0, e = this.emitters.length; e--;) t += this.emitters[e].particles.length;\n      return t;\n    }\n  }, {\n    key: \"getAllParticles\",\n    value: function () {\n      for (var t = [], e = this.emitters.length; e--;) t = t.concat(this.emitters[e].particles);\n      return t;\n    }\n  }, {\n    key: \"destroyAllEmitters\",\n    value: function () {\n      P.destroyAll(this.emitters);\n    }\n  }, {\n    key: \"destroy\",\n    value: function (t) {\n      function e() {\n        i.time = 0, i.then = 0, i.pool.destroy(), P.destroyAll(i.emitters), P.destroyAll(i.renderers, i.getAllParticles());\n      }\n      var i = this;\n      0 < arguments.length && void 0 !== t && t ? setTimeout(e, 200) : e();\n    }\n  }, {\n    key: \"fps\",\n    set: function (t) {\n      this._fps = t, this._interval = \"auto\" === t ? M.DEFAULT_INTERVAL : s.floor(1 / t, 7);\n    },\n    get: function () {\n      return this._fps;\n    }\n  }]), M);\n  function M(t) {\n    o(this, M), this.emitters = [], this.renderers = [], this.time = 0, this.now = 0, this.then = 0, this.elapsed = 0, this.stats = new O(this), this.pool = new T(80), this.integrationType = P.initValue(t, M.EULER), this.integrator = new I(this.integrationType), this._fps = \"auto\", this._interval = M.DEFAULT_INTERVAL;\n  }\n  V.USE_CLOCK = !1, V.MEASURE = 100, V.EULER = \"euler\", V.RK2 = \"runge-kutta2\", V.PARTICLE_CREATED = \"PARTICLE_CREATED\", V.PARTICLE_UPDATE = \"PARTICLE_UPDATE\", V.PARTICLE_SLEEP = \"PARTICLE_SLEEP\", V.PARTICLE_DEAD = \"PARTICLE_DEAD\", V.EMITTER_ADDED = \"EMITTER_ADDED\", V.EMITTER_REMOVED = \"EMITTER_REMOVED\", V.PROTON_UPDATE = \"PROTON_UPDATE\", V.PROTON_UPDATE_AFTER = \"PROTON_UPDATE_AFTER\", V.DEFAULT_INTERVAL = .0167, V.amendChangeTabsBug = !0, C.bind(V);\n  var B = (t(L, [{\n    key: \"reset\",\n    value: function () {\n      this.r = 255, this.g = 255, this.b = 255;\n    }\n  }]), L);\n  function L() {\n    var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 255,\n      e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 255,\n      i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 255;\n    o(this, L), this.r = t, this.g = e, this.b = i;\n  }\n  var U = {\n      easeLinear: function (t) {\n        return t;\n      },\n      easeInQuad: function (t) {\n        return Math.pow(t, 2);\n      },\n      easeOutQuad: function (t) {\n        return -(Math.pow(t - 1, 2) - 1);\n      },\n      easeInOutQuad: function (t) {\n        return (t /= .5) < 1 ? .5 * Math.pow(t, 2) : -.5 * ((t -= 2) * t - 2);\n      },\n      easeInCubic: function (t) {\n        return Math.pow(t, 3);\n      },\n      easeOutCubic: function (t) {\n        return Math.pow(t - 1, 3) + 1;\n      },\n      easeInOutCubic: function (t) {\n        return (t /= .5) < 1 ? .5 * Math.pow(t, 3) : .5 * (Math.pow(t - 2, 3) + 2);\n      },\n      easeInQuart: function (t) {\n        return Math.pow(t, 4);\n      },\n      easeOutQuart: function (t) {\n        return -(Math.pow(t - 1, 4) - 1);\n      },\n      easeInOutQuart: function (t) {\n        return (t /= .5) < 1 ? .5 * Math.pow(t, 4) : -.5 * ((t -= 2) * Math.pow(t, 3) - 2);\n      },\n      easeInSine: function (t) {\n        return 1 - Math.cos(t * s.PI_2);\n      },\n      easeOutSine: function (t) {\n        return Math.sin(t * s.PI_2);\n      },\n      easeInOutSine: function (t) {\n        return -.5 * (Math.cos(Math.PI * t) - 1);\n      },\n      easeInExpo: function (t) {\n        return 0 === t ? 0 : Math.pow(2, 10 * (t - 1));\n      },\n      easeOutExpo: function (t) {\n        return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);\n      },\n      easeInOutExpo: function (t) {\n        return 0 === t ? 0 : 1 === t ? 1 : (t /= .5) < 1 ? .5 * Math.pow(2, 10 * (t - 1)) : .5 * (2 - Math.pow(2, -10 * --t));\n      },\n      easeInCirc: function (t) {\n        return -(Math.sqrt(1 - t * t) - 1);\n      },\n      easeOutCirc: function (t) {\n        return Math.sqrt(1 - Math.pow(t - 1, 2));\n      },\n      easeInOutCirc: function (t) {\n        return (t /= .5) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n      },\n      easeInBack: function (t) {\n        return t * t * (2.70158 * t - 1.70158);\n      },\n      easeOutBack: function (t) {\n        return --t * t * (2.70158 * t + 1.70158) + 1;\n      },\n      easeInOutBack: function (t) {\n        var e = 1.70158;\n        return (t /= .5) < 1 ? t * t * ((1 + (e *= 1.525)) * t - e) * .5 : .5 * ((t -= 2) * t * ((1 + (e *= 1.525)) * t + e) + 2);\n      },\n      getEasing: function (t) {\n        return \"function\" == typeof t ? t : this[t] || this.easeLinear;\n      }\n    },\n    F = (t(z, [{\n      key: \"set\",\n      value: function (t, e) {\n        return this.x = t, this.y = e, this;\n      }\n    }, {\n      key: \"setX\",\n      value: function (t) {\n        return this.x = t, this;\n      }\n    }, {\n      key: \"setY\",\n      value: function (t) {\n        return this.y = t, this;\n      }\n    }, {\n      key: \"getGradient\",\n      value: function () {\n        return 0 !== this.x ? Math.atan2(this.y, this.x) : 0 < this.y ? s.PI_2 : this.y < 0 ? -s.PI_2 : void 0;\n      }\n    }, {\n      key: \"copy\",\n      value: function (t) {\n        return this.x = t.x, this.y = t.y, this;\n      }\n    }, {\n      key: \"add\",\n      value: function (t, e) {\n        return void 0 !== e ? this.addVectors(t, e) : (this.x += t.x, this.y += t.y, this);\n      }\n    }, {\n      key: \"addXY\",\n      value: function (t, e) {\n        return this.x += t, this.y += e, this;\n      }\n    }, {\n      key: \"addVectors\",\n      value: function (t, e) {\n        return this.x = t.x + e.x, this.y = t.y + e.y, this;\n      }\n    }, {\n      key: \"sub\",\n      value: function (t, e) {\n        return void 0 !== e ? this.subVectors(t, e) : (this.x -= t.x, this.y -= t.y, this);\n      }\n    }, {\n      key: \"subVectors\",\n      value: function (t, e) {\n        return this.x = t.x - e.x, this.y = t.y - e.y, this;\n      }\n    }, {\n      key: \"divideScalar\",\n      value: function (t) {\n        return 0 !== t ? (this.x /= t, this.y /= t) : this.set(0, 0), this;\n      }\n    }, {\n      key: \"multiplyScalar\",\n      value: function (t) {\n        return this.x *= t, this.y *= t, this;\n      }\n    }, {\n      key: \"negate\",\n      value: function () {\n        return this.multiplyScalar(-1);\n      }\n    }, {\n      key: \"dot\",\n      value: function (t) {\n        return this.x * t.x + this.y * t.y;\n      }\n    }, {\n      key: \"lengthSq\",\n      value: function () {\n        return this.x * this.x + this.y * this.y;\n      }\n    }, {\n      key: \"length\",\n      value: function () {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n      }\n    }, {\n      key: \"normalize\",\n      value: function () {\n        return this.divideScalar(this.length());\n      }\n    }, {\n      key: \"distanceTo\",\n      value: function (t) {\n        return Math.sqrt(this.distanceToSquared(t));\n      }\n    }, {\n      key: \"rotate\",\n      value: function (t) {\n        var e = this.x,\n          i = this.y;\n        return this.x = e * Math.cos(t) + i * Math.sin(t), this.y = -e * Math.sin(t) + i * Math.cos(t), this;\n      }\n    }, {\n      key: \"distanceToSquared\",\n      value: function (t) {\n        var e = this.x - t.x,\n          t = this.y - t.y;\n        return e * e + t * t;\n      }\n    }, {\n      key: \"lerp\",\n      value: function (t, e) {\n        return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this;\n      }\n    }, {\n      key: \"equals\",\n      value: function (t) {\n        return t.x === this.x && t.y === this.y;\n      }\n    }, {\n      key: \"clear\",\n      value: function () {\n        return this.x = 0, this.y = 0, this;\n      }\n    }, {\n      key: \"clone\",\n      value: function () {\n        return new z(this.x, this.y);\n      }\n    }]), z);\n  function z(t, e) {\n    o(this, z), this.x = t || 0, this.y = e || 0;\n  }\n  var j = (t(N, [{\n    key: \"getDirection\",\n    value: function () {\n      return Math.atan2(this.v.x, -this.v.y) * s.N180_PI;\n    }\n  }, {\n    key: \"reset\",\n    value: function () {\n      return this.life = 1 / 0, this.age = 0, this.dead = !1, this.sleep = !1, this.body = null, this.sprite = null, this.parent = null, this.energy = 1, this.mass = 1, this.radius = 10, this.alpha = 1, this.scale = 1, this.rotation = 0, this.color = null, this.p.set(0, 0), this.v.set(0, 0), this.a.set(0, 0), this.old.p.set(0, 0), this.old.v.set(0, 0), this.old.a.set(0, 0), this.easing = U.easeLinear, this.rgb.reset(), P.emptyObject(this.data), this.removeAllBehaviours(), this;\n    }\n  }, {\n    key: \"update\",\n    value: function (t, e) {\n      this.sleep || (this.age += t, this.applyBehaviours(t, e)), this.age < this.life ? (e = this.easing(this.age / this.life), this.energy = Math.max(1 - e, 0)) : this.destroy();\n    }\n  }, {\n    key: \"applyBehaviours\",\n    value: function (t, e) {\n      for (var i = this.behaviours.length, a = void 0, a = 0; a < i; a++) this.behaviours[a] && this.behaviours[a].applyBehaviour(this, t, e);\n    }\n  }, {\n    key: \"addBehaviour\",\n    value: function (t) {\n      this.behaviours.push(t), t.hasOwnProperty(\"parents\") && t.parents.push(this), t.initialize(this);\n    }\n  }, {\n    key: \"addBehaviours\",\n    value: function (t) {\n      for (var e = t.length, i = void 0, i = 0; i < e; i++) this.addBehaviour(t[i]);\n    }\n  }, {\n    key: \"removeBehaviour\",\n    value: function (t) {\n      t = this.behaviours.indexOf(t);\n      -1 < t && (this.behaviours.splice(t, 1).parents = null);\n    }\n  }, {\n    key: \"removeAllBehaviours\",\n    value: function () {\n      P.emptyArray(this.behaviours);\n    }\n  }, {\n    key: \"destroy\",\n    value: function () {\n      this.removeAllBehaviours(), this.energy = 0, this.dead = !0, this.parent = null;\n    }\n  }]), N);\n  function N(t) {\n    o(this, N), this.id = \"\", this.old = {}, this.data = {}, this.behaviours = [], this.p = [], this.v = [], this.a = [], this.rgb = {}, this.name = \"Particle\", this.id = A.id(this.name), this.old = {}, this.data = {}, this.behaviours = [], this.p = new F(), this.v = new F(), this.a = new F(), this.old.p = new F(), this.old.v = new F(), this.old.a = new F(), this.rgb = new B(), this.reset(), t && P.setProp(this, t);\n  }\n  var H = {\n      hexToRgb: function (t) {\n        t = \"#\" === t.charAt(0) ? t.substring(1, 7) : t;\n        return {\n          r: parseInt(t.substring(0, 2), 16),\n          g: parseInt(t.substring(2, 4), 16),\n          b: parseInt(t.substring(4, 6), 16)\n        };\n      },\n      rgbToHex: function (t) {\n        return \"rgb(\" + t.r + \", \" + t.g + \", \" + t.b + \")\";\n      },\n      getHex16FromParticle: function (t) {\n        return 65536 * Number(t.rgb.r) + 256 * Number(t.rgb.g) + Number(t.rgb.b);\n      }\n    },\n    q = (t(G, [{\n      key: \"set\",\n      value: function (t, e) {\n        return this.r = t, this.tha = e, this;\n      }\n    }, {\n      key: \"setR\",\n      value: function (t) {\n        return this.r = t, this;\n      }\n    }, {\n      key: \"setTha\",\n      value: function (t) {\n        return this.tha = t, this;\n      }\n    }, {\n      key: \"copy\",\n      value: function (t) {\n        return this.r = t.r, this.tha = t.tha, this;\n      }\n    }, {\n      key: \"toVector\",\n      value: function () {\n        return new F(this.getX(), this.getY());\n      }\n    }, {\n      key: \"getX\",\n      value: function () {\n        return this.r * Math.sin(this.tha);\n      }\n    }, {\n      key: \"getY\",\n      value: function () {\n        return -this.r * Math.cos(this.tha);\n      }\n    }, {\n      key: \"normalize\",\n      value: function () {\n        return this.r = 1, this;\n      }\n    }, {\n      key: \"equals\",\n      value: function (t) {\n        return t.r === this.r && t.tha === this.tha;\n      }\n    }, {\n      key: \"clear\",\n      value: function () {\n        return this.r = 0, this.tha = 0, this;\n      }\n    }, {\n      key: \"clone\",\n      value: function () {\n        return new G(this.r, this.tha);\n      }\n    }]), G);\n  function G(t, e) {\n    o(this, G), this.r = Math.abs(t) || 0, this.tha = e || 0;\n  }\n  var X = {\n      create: function (t) {\n        var e = new Float32Array(9);\n        return t && this.set(t, e), e;\n      },\n      set: function (t, e) {\n        for (var i = 0; i < 9; i++) e[i] = t[i];\n        return e;\n      },\n      multiply: function (t, e, i) {\n        var a = t[0],\n          r = t[1],\n          n = t[2],\n          s = t[3],\n          o = t[4],\n          h = t[6],\n          l = t[7],\n          u = e[0],\n          c = e[1],\n          d = e[2],\n          y = e[3],\n          p = e[4],\n          t = e[6],\n          e = e[7];\n        return i[0] = u * a + c * s, i[1] = u * r + c * o, i[2] = n * d, i[3] = y * a + p * s, i[4] = y * r + p * o, i[6] = t * a + e * s + h, i[7] = t * r + e * o + l, i;\n      },\n      inverse: function (t, e) {\n        var i = t[0],\n          a = t[1],\n          r = t[3],\n          n = t[4],\n          s = t[6],\n          o = t[7],\n          h = -r,\n          t = o * r - n * s,\n          r = 1 / (i * n + a * h);\n        return e[0] = n * r, e[1] = -a * r, e[3] = h * r, e[4] = i * r, e[6] = t * r, e[7] = (-o * i + a * s) * r, e;\n      },\n      multiplyVec2: function (t, e, i) {\n        var a = e[0],\n          e = e[1];\n        return i[0] = a * t[0] + e * t[3] + t[6], i[1] = a * t[1] + e * t[4] + t[7], i;\n      }\n    },\n    Y = (r(W, l), t(W, [{\n      key: \"getValue\",\n      value: function () {\n        var t = P.getRandFromArray(this._arr);\n        return \"random\" === t || \"Random\" === t ? s.randomColor() : t;\n      }\n    }], [{\n      key: \"createArraySpan\",\n      value: function (t) {\n        return t ? t instanceof W ? t : new W(t) : null;\n      }\n    }]), W);\n  function W(t) {\n    o(this, W);\n    var e = h(this, (W.__proto__ || Object.getPrototypeOf(W)).call(this));\n    return e._arr = P.toArray(t), e;\n  }\n  var Z = (t(Q, [{\n    key: \"contains\",\n    value: function (t, e) {\n      return t <= this.right && t >= this.x && e <= this.bottom && e >= this.y;\n    }\n  }]), Q);\n  function Q(t, e, i, a) {\n    o(this, Q), this.x = t, this.y = e, this.width = i, this.height = a, this.bottom = this.y + this.height, this.right = this.x + this.width;\n  }\n  var K = (t(J, [{\n    key: \"init\",\n    value: function () {\n      this.startTime = 0, this.nextTime = this.timePan.getValue();\n    }\n  }, {\n    key: \"getValue\",\n    value: function (t) {\n      return this.startTime += t, this.startTime >= this.nextTime ? (this.startTime = 0, this.nextTime = this.timePan.getValue(), 1 === this.numPan.b ? .5 < this.numPan.getValue(!1) ? 1 : 0 : this.numPan.getValue(!0)) : 0;\n    }\n  }]), J);\n  function J(t, e) {\n    o(this, J), this.numPan = l.setSpanValue(P.initValue(t, 1)), this.timePan = l.setSpanValue(P.initValue(e, 1)), this.startTime = 0, this.nextTime = 0, this.init();\n  }\n  var $ = (t(tt, [{\n    key: \"reset\",\n    value: function () {}\n  }, {\n    key: \"init\",\n    value: function (t, e) {\n      e ? this.initialize(e) : this.initialize(t);\n    }\n  }, {\n    key: \"initialize\",\n    value: function () {}\n  }]), tt);\n  function tt() {\n    o(this, tt);\n  }\n  var et = (r(it, $), t(it, [{\n    key: \"initialize\",\n    value: function (t) {\n      this.lifePan.a === 1 / 0 ? t.life = 1 / 0 : t.life = this.lifePan.getValue();\n    }\n  }]), it);\n  function it(t, e, i) {\n    o(this, it);\n    var a = h(this, (it.__proto__ || Object.getPrototypeOf(it)).call(this));\n    return a.lifePan = l.setSpanValue(t, e, i), a.name = \"Life\", a;\n  }\n  var at = (t(rt, [{\n    key: \"getPosition\",\n    value: function () {}\n  }, {\n    key: \"crossing\",\n    value: function () {}\n  }]), rt);\n  function rt() {\n    o(this, rt), this.vector = new F(0, 0), this.random = 0, this.crossType = \"dead\", this.alert = !0;\n  }\n  var nt = (r(st, at), t(st, [{\n    key: \"getPosition\",\n    value: function () {\n      return this.vector.x = this.x, this.vector.y = this.y, this.vector;\n    }\n  }, {\n    key: \"crossing\",\n    value: function () {\n      this.alert && (console.error(\"Sorry, PointZone does not support crossing method!\"), this.alert = !1);\n    }\n  }]), st);\n  function st(t, e) {\n    o(this, st);\n    var i = h(this, (st.__proto__ || Object.getPrototypeOf(st)).call(this));\n    return i.x = t, i.y = e, i;\n  }\n  var ot = (r(ht, $), t(ht, [{\n    key: \"reset\",\n    value: function (t) {\n      this.zone = P.initValue(t, new nt());\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      this.zone.getPosition(), t.p.x = this.zone.vector.x, t.p.y = this.zone.vector.y;\n    }\n  }]), ht);\n  function ht(t) {\n    o(this, ht);\n    var e = h(this, (ht.__proto__ || Object.getPrototypeOf(ht)).call(this));\n    return e.zone = P.initValue(t, new nt()), e.name = \"Position\", e;\n  }\n  var lt = (r(ut, $), t(ut, [{\n    key: \"reset\",\n    value: function (t, e, i) {\n      this.rPan = l.setSpanValue(t), this.thaPan = l.setSpanValue(e), this.type = P.initValue(i, \"vector\");\n    }\n  }, {\n    key: \"normalizeVelocity\",\n    value: function (t) {\n      return t * V.MEASURE;\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      var e;\n      \"p\" === this.type || \"P\" === this.type || \"polar\" === this.type ? (e = new q(this.normalizeVelocity(this.rPan.getValue()), this.thaPan.getValue() * s.PI_180), t.v.x = e.getX(), t.v.y = e.getY()) : (t.v.x = this.normalizeVelocity(this.rPan.getValue()), t.v.y = this.normalizeVelocity(this.thaPan.getValue()));\n    }\n  }]), ut);\n  function ut(t, e, i) {\n    o(this, ut);\n    var a = h(this, (ut.__proto__ || Object.getPrototypeOf(ut)).call(this));\n    return a.rPan = l.setSpanValue(t), a.thaPan = l.setSpanValue(e), a.type = P.initValue(i, \"vector\"), a.name = \"Velocity\", a;\n  }\n  var ct = (r(dt, $), t(dt, [{\n    key: \"initialize\",\n    value: function (t) {\n      t.mass = this.massPan.getValue();\n    }\n  }]), dt);\n  function dt(t, e, i) {\n    o(this, dt);\n    var a = h(this, (dt.__proto__ || Object.getPrototypeOf(dt)).call(this));\n    return a.massPan = l.setSpanValue(t, e, i), a.name = \"Mass\", a;\n  }\n  var yt = (r(pt, $), t(pt, [{\n    key: \"reset\",\n    value: function (t, e, i) {\n      this.radius = l.setSpanValue(t, e, i);\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      t.radius = this.radius.getValue(), t.data.oldRadius = t.radius;\n    }\n  }]), pt);\n  function pt(t, e, i) {\n    o(this, pt);\n    var a = h(this, (pt.__proto__ || Object.getPrototypeOf(pt)).call(this));\n    return a.radius = l.setSpanValue(t, e, i), a.name = \"Radius\", a;\n  }\n  var ft = (r(vt, $), t(vt, [{\n    key: \"initialize\",\n    value: function (t) {\n      var e = this.image.getValue();\n      t.body = \"string\" == typeof e ? {\n        width: this.w,\n        height: this.h,\n        src: e,\n        isInner: !0,\n        inner: !0\n      } : e;\n    }\n  }, {\n    key: \"setSpanValue\",\n    value: function (t) {\n      return t instanceof Y ? t : new Y(t);\n    }\n  }]), vt);\n  function vt(t, e, i) {\n    o(this, vt);\n    var a = h(this, (vt.__proto__ || Object.getPrototypeOf(vt)).call(this));\n    return a.image = a.setSpanValue(t), a.w = P.initValue(e, 20), a.h = P.initValue(i, a.w), a.name = \"Body\", a;\n  }\n  var gt = (t(mt, [{\n    key: \"reset\",\n    value: function (t, e) {\n      this.life = P.initValue(t, 1 / 0), this.easing = U.getEasing(e);\n    }\n  }, {\n    key: \"normalizeForce\",\n    value: function (t) {\n      return t.multiplyScalar(V.MEASURE);\n    }\n  }, {\n    key: \"normalizeValue\",\n    value: function (t) {\n      return t * V.MEASURE;\n    }\n  }, {\n    key: \"initialize\",\n    value: function () {}\n  }, {\n    key: \"calculate\",\n    value: function (t, e) {\n      this.age += e, this.age >= this.life || this.dead ? (this.energy = 0, this.dead = !0, this.destroy()) : (t = this.easing(t.age / t.life), this.energy = Math.max(1 - t, 0));\n    }\n  }, {\n    key: \"destroy\",\n    value: function () {\n      for (var t = this.parents.length; t--;) this.parents[t].removeBehaviour(this);\n      this.parents.length = 0;\n    }\n  }]), mt);\n  function mt(t, e) {\n    o(this, mt), this.life = P.initValue(t, 1 / 0), this.easing = U.getEasing(e), this.age = 0, this.energy = 1, this.dead = !1, this.parents = [], this.id = \"Behaviour_\" + mt.id++, this.name = \"Behaviour\";\n  }\n  gt.id = 0;\n  var bt = (r(_t, gt), t(_t, [{\n    key: \"reset\",\n    value: function (t, e, i, a) {\n      this.force = this.normalizeForce(new F(t, e)), i && n(_t.prototype.__proto__ || Object.getPrototypeOf(_t.prototype), \"reset\", this).call(this, i, a);\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.calculate(t, e, i), t.a.add(this.force);\n    }\n  }]), _t);\n  function _t(t, e, i, a) {\n    o(this, _t);\n    a = h(this, (_t.__proto__ || Object.getPrototypeOf(_t)).call(this, i, a));\n    return a.force = a.normalizeForce(new F(t, e)), a.name = \"Force\", a;\n  }\n  var xt = (r(kt, gt), t(kt, [{\n    key: \"reset\",\n    value: function (t, e, i, a, r) {\n      this.targetPosition = P.initValue(t, new F()), this.radius = P.initValue(i, 1e3), this.force = P.initValue(this.normalizeValue(e), 100), this.radiusSq = this.radius * this.radius, this.attractionForce = new F(), this.lengthSq = 0, a && n(kt.prototype.__proto__ || Object.getPrototypeOf(kt.prototype), \"reset\", this).call(this, a, r);\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.calculate(t, e, i), this.attractionForce.copy(this.targetPosition), this.attractionForce.sub(t.p), this.lengthSq = this.attractionForce.lengthSq(), 4e-5 < this.lengthSq && this.lengthSq < this.radiusSq && (this.attractionForce.normalize(), this.attractionForce.multiplyScalar(1 - this.lengthSq / this.radiusSq), this.attractionForce.multiplyScalar(this.force), t.a.add(this.attractionForce));\n    }\n  }]), kt);\n  function kt(t, e, i, a, r) {\n    o(this, kt);\n    r = h(this, (kt.__proto__ || Object.getPrototypeOf(kt)).call(this, a, r));\n    return r.targetPosition = P.initValue(t, new F()), r.radius = P.initValue(i, 1e3), r.force = P.initValue(r.normalizeValue(e), 100), r.radiusSq = r.radius * r.radius, r.attractionForce = new F(), r.lengthSq = 0, r.name = \"Attraction\", r;\n  }\n  var Pt = (r(Et, gt), t(Et, [{\n    key: \"reset\",\n    value: function (t, e, i, a, r) {\n      this.panFoce = new F(t, e), this.panFoce = this.normalizeForce(this.panFoce), this.delay = i, a && n(Et.prototype.__proto__ || Object.getPrototypeOf(Et.prototype), \"reset\", this).call(this, a, r);\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      t.data.time = 0;\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.calculate(t, e, i), t.data.time += e, t.data.time >= this.delay && (t.a.addXY(s.randomAToB(-this.panFoce.x, this.panFoce.x), s.randomAToB(-this.panFoce.y, this.panFoce.y)), t.data.time = 0);\n    }\n  }]), Et);\n  function Et(t, e, i, a, r) {\n    o(this, Et);\n    r = h(this, (Et.__proto__ || Object.getPrototypeOf(Et)).call(this, a, r));\n    return r.reset(t, e, i), r.time = 0, r.name = \"RandomDrift\", r;\n  }\n  var At = (r(Tt, bt), t(Tt, [{\n    key: \"reset\",\n    value: function (t, e, i) {\n      n(Tt.prototype.__proto__ || Object.getPrototypeOf(Tt.prototype), \"reset\", this).call(this, 0, t, e, i);\n    }\n  }]), Tt);\n  function Tt(t, e, i) {\n    o(this, Tt);\n    i = h(this, (Tt.__proto__ || Object.getPrototypeOf(Tt)).call(this, 0, t, e, i));\n    return i.name = \"Gravity\", i;\n  }\n  var Rt = (r(Ot, gt), t(Ot, [{\n    key: \"reset\",\n    value: function (t, e, i, a, r) {\n      this.emitter = P.initValue(t, null), this.mass = P.initValue(e, !0), this.callback = P.initValue(i, null), this.collisionPool = [], this.delta = new F(), a && n(Ot.prototype.__proto__ || Object.getPrototypeOf(Ot.prototype), \"reset\", this).call(this, a, r);\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      for (var a, r, n, s, o, h, l = (this.emitter ? this.emitter.particles : this.pool).slice(i), u = l.length, c = void 0, d = void 0, d = 0; d < u; d++) {\n        (c = l[d]) !== t && (this.delta.copy(c.p), this.delta.sub(t.p), (a = this.delta.lengthSq()) <= (h = t.radius + c.radius) * h && (r = h - Math.sqrt(a), r += .5, n = t.mass + c.mass, s = this.mass ? c.mass / n : .5, o = this.mass ? t.mass / n : .5, t.p.add(this.delta.clone().normalize().multiplyScalar(r * -s)), c.p.add(this.delta.normalize().multiplyScalar(r * o)), this.callback && this.callback(t, c)));\n      }\n    }\n  }]), Ot);\n  function Ot(t, e, i, a, r) {\n    o(this, Ot);\n    r = h(this, (Ot.__proto__ || Object.getPrototypeOf(Ot)).call(this, a, r));\n    return r.reset(t, e, i), r.name = \"Collision\", r;\n  }\n  var wt = (r(Ct, gt), t(Ct, [{\n    key: \"reset\",\n    value: function (t, e, i, a) {\n      this.zone = t, this.zone.crossType = P.initValue(e, \"dead\"), i && n(Ct.prototype.__proto__ || Object.getPrototypeOf(Ct.prototype), \"reset\", this).call(this, i, a);\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.calculate(t, e, i), this.zone.crossing(t);\n    }\n  }]), Ct);\n  function Ct(t, e, i, a) {\n    o(this, Ct);\n    a = h(this, (Ct.__proto__ || Object.getPrototypeOf(Ct)).call(this, i, a));\n    return a.reset(t, e), a.name = \"CrossZone\", a;\n  }\n  var St = (r(It, gt), t(It, [{\n    key: \"reset\",\n    value: function (t, e, i, a) {\n      this.same = null == e, this.a = l.setSpanValue(P.initValue(t, 1)), this.b = l.setSpanValue(e), i && n(It.prototype.__proto__ || Object.getPrototypeOf(It.prototype), \"reset\", this).call(this, i, a);\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      t.data.alphaA = this.a.getValue(), this.same ? t.data.alphaB = t.data.alphaA : t.data.alphaB = this.b.getValue();\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.calculate(t, e, i), t.alpha = t.data.alphaB + (t.data.alphaA - t.data.alphaB) * this.energy, t.alpha < .001 && (t.alpha = 0);\n    }\n  }]), It);\n  function It(t, e, i, a) {\n    o(this, It);\n    a = h(this, (It.__proto__ || Object.getPrototypeOf(It)).call(this, i, a));\n    return a.reset(t, e), a.name = \"Alpha\", a;\n  }\n  var Dt = (r(Vt, gt), t(Vt, [{\n    key: \"reset\",\n    value: function (t, e, i, a) {\n      this.same = null == e, this.a = l.setSpanValue(P.initValue(t, 1)), this.b = l.setSpanValue(e), i && n(Vt.prototype.__proto__ || Object.getPrototypeOf(Vt.prototype), \"reset\", this).call(this, i, a);\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      t.data.scaleA = this.a.getValue(), t.data.oldRadius = t.radius, t.data.scaleB = this.same ? t.data.scaleA : this.b.getValue();\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.calculate(t, e, i), t.scale = t.data.scaleB + (t.data.scaleA - t.data.scaleB) * this.energy, t.scale < 1e-4 && (t.scale = 0), t.radius = t.data.oldRadius * t.scale;\n    }\n  }]), Vt);\n  function Vt(t, e, i, a) {\n    o(this, Vt);\n    a = h(this, (Vt.__proto__ || Object.getPrototypeOf(Vt)).call(this, i, a));\n    return a.reset(t, e), a.name = \"Scale\", a;\n  }\n  var Mt = (r(Bt, gt), t(Bt, [{\n    key: \"reset\",\n    value: function (t, e, i, a, r) {\n      this.same = null == e, this.a = l.setSpanValue(P.initValue(t, \"Velocity\")), this.b = l.setSpanValue(P.initValue(e, 0)), this.style = P.initValue(i, \"to\"), a && n(Bt.prototype.__proto__ || Object.getPrototypeOf(Bt.prototype), \"reset\", this).call(this, a, r);\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      t.rotation = this.a.getValue(), t.data.rotationA = this.a.getValue(), this.same || (t.data.rotationB = this.b.getValue());\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.calculate(t, e, i), this.same ? \"V\" !== this.a.a && \"Velocity\" !== this.a.a && \"v\" !== this.a.a || (t.rotation = t.getDirection()) : \"to\" === this.style || \"TO\" === this.style || \"_\" === this.style ? t.rotation += t.data.rotationB + (t.data.rotationA - t.data.rotationB) * this.energy : t.rotation += t.data.rotationB;\n    }\n  }]), Bt);\n  function Bt(t, e, i, a, r) {\n    o(this, Bt);\n    r = h(this, (Bt.__proto__ || Object.getPrototypeOf(Bt)).call(this, a, r));\n    return r.reset(t, e, i), r.name = \"Rotate\", r;\n  }\n  var Lt = (r(Ut, gt), t(Ut, [{\n    key: \"reset\",\n    value: function (t, e, i, a) {\n      this.a = Y.createArraySpan(t), this.b = Y.createArraySpan(e), i && n(Ut.prototype.__proto__ || Object.getPrototypeOf(Ut.prototype), \"reset\", this).call(this, i, a);\n    }\n  }, {\n    key: \"initialize\",\n    value: function (t) {\n      t.color = this.a.getValue(), t.data.colorA = H.hexToRgb(t.color), this.b && (t.data.colorB = H.hexToRgb(this.b.getValue()));\n    }\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e, i) {\n      this.b ? (this.calculate(t, e, i), t.rgb.r = t.data.colorB.r + (t.data.colorA.r - t.data.colorB.r) * this.energy, t.rgb.g = t.data.colorB.g + (t.data.colorA.g - t.data.colorB.g) * this.energy, t.rgb.b = t.data.colorB.b + (t.data.colorA.b - t.data.colorB.b) * this.energy, t.rgb.r = Math.floor(t.rgb.r), t.rgb.g = Math.floor(t.rgb.g), t.rgb.b = Math.floor(t.rgb.b)) : (t.rgb.r = t.data.colorA.r, t.rgb.g = t.data.colorA.g, t.rgb.b = t.data.colorA.b);\n    }\n  }]), Ut);\n  function Ut(t, e, i, a) {\n    o(this, Ut);\n    a = h(this, (Ut.__proto__ || Object.getPrototypeOf(Ut)).call(this, i, a));\n    return a.reset(t, e), a.name = \"Color\", a;\n  }\n  var Ft = \"changing\",\n    zt = (r(jt, gt), t(jt, [{\n      key: \"setAngleAndForce\",\n      value: function (t, e) {\n        this.force = Ft, this.angle = s.PI / 2, \"right\" === t ? this.angle = s.PI / 2 : \"left\" === t ? this.angle = -s.PI / 2 : \"random\" === t ? this.angle = \"random\" : t instanceof l ? (this.angle = \"span\", this.span = t) : t && (this.angle = t), \"changing\" === String(e).toLowerCase() || \"chang\" === String(e).toLowerCase() || \"auto\" === String(e).toLowerCase() ? this.force = Ft : e && (this.force = e);\n      }\n    }, {\n      key: \"reset\",\n      value: function (t, e, i, a) {\n        this.angle = s.PI / 2, this.setAngleAndForce(t, e), i && n(jt.prototype.__proto__ || Object.getPrototypeOf(jt.prototype), \"reset\", this).call(this, i, a);\n      }\n    }, {\n      key: \"initialize\",\n      value: function (t) {\n        \"random\" === this.angle ? t.data.cangle = s.randomAToB(-s.PI, s.PI) : \"span\" === this.angle && (t.data.cangle = this.span.getValue()), t.data.cyclone = new F(0, 0);\n      }\n    }, {\n      key: \"applyBehaviour\",\n      value: function (t, e, i) {\n        this.calculate(t, e, i);\n        e = void 0, i = t.v.getGradient();\n        \"random\" === this.angle || \"span\" === this.angle ? i += t.data.cangle : i += this.angle, e = this.force === Ft ? t.v.length() / 100 : this.force, t.data.cyclone.x = e * Math.cos(i), t.data.cyclone.y = e * Math.sin(i), t.data.cyclone = this.normalizeForce(t.data.cyclone), t.a.add(t.data.cyclone);\n      }\n    }]), jt);\n  function jt(t, e, i, a) {\n    o(this, jt);\n    a = h(this, (jt.__proto__ || Object.getPrototypeOf(jt)).call(this, i, a));\n    return a.setAngleAndForce(t, e), a.name = \"Cyclone\", a;\n  }\n  var Nt = (r(Ht, xt), t(Ht, [{\n    key: \"reset\",\n    value: function (t, e, i, a, r) {\n      n(Ht.prototype.__proto__ || Object.getPrototypeOf(Ht.prototype), \"reset\", this).call(this, t, e, i, a, r), this.force *= -1;\n    }\n  }]), Ht);\n  function Ht(t, e, i, a, r) {\n    o(this, Ht);\n    r = h(this, (Ht.__proto__ || Object.getPrototypeOf(Ht)).call(this, t, e, i, a, r));\n    return r.force *= -1, r.name = \"Repulsion\", r;\n  }\n  var qt = (r(Gt, gt), t(Gt, [{\n    key: \"reset\",\n    value: function (t, e, i, a) {\n      this.distanceVec = new F(), this.centerPoint = P.initValue(t, new F()), this.force = P.initValue(this.normalizeValue(e), 100), i && n(Gt.prototype.__proto__ || Object.getPrototypeOf(Gt.prototype), \"reset\", this).call(this, i, a);\n    }\n  }, {\n    key: \"initialize\",\n    value: function () {}\n  }, {\n    key: \"applyBehaviour\",\n    value: function (t, e) {\n      this.distanceVec.set(this.centerPoint.x - t.p.x, this.centerPoint.y - t.p.y);\n      var i,\n        a = this.distanceVec.lengthSq();\n      0 !== a && (i = this.distanceVec.length(), i = this.force * e / (a * i), t.v.x += i * this.distanceVec.x, t.v.y += i * this.distanceVec.y);\n    }\n  }]), Gt);\n  function Gt(t, e, i, a) {\n    o(this, Gt);\n    a = h(this, (Gt.__proto__ || Object.getPrototypeOf(Gt)).call(this, i, a));\n    return a.distanceVec = new F(), a.centerPoint = P.initValue(t, new F()), a.force = P.initValue(a.normalizeValue(e), 100), a.name = \"GravityWell\", a;\n  }\n  var Xt = {\n      initialize: function (t, e, i) {\n        for (var a = i.length, r = void 0, r = 0; r < a; r++) i[r] instanceof $ ? i[r].init(t, e) : this.init(t, e, i[r]);\n        this.bindEmitter(t, e);\n      },\n      init: function (t, e, i) {\n        P.setProp(e, i), P.setVectorVal(e, i);\n      },\n      bindEmitter: function (t, e) {\n        t.bindEmitter && (e.p.add(t.p), e.v.add(t.v), e.a.add(t.a), e.v.rotate(s.degreeTransform(t.rotation)));\n      }\n    },\n    Yt = (r(Wt, j), t(Wt, [{\n      key: \"emit\",\n      value: function (t, e) {\n        this.stoped = !1, this.emitTime = 0, this.totalTime = P.initValue(t, 1 / 0), !0 === e || \"life\" === e || \"destroy\" === e ? this.life = \"once\" === t ? 1 : this.totalTime : isNaN(e) || (this.life = e), this.rate.init();\n      }\n    }, {\n      key: \"stop\",\n      value: function () {\n        this.totalTime = -1, this.emitTime = 0, this.stoped = !0;\n      }\n    }, {\n      key: \"preEmit\",\n      value: function (t) {\n        var e = this.stoped,\n          i = this.emitTime,\n          a = this.totalTime;\n        this.stoped = !1, this.emitTime = 0, this.totalTime = t, this.rate.init();\n        for (; .0167 < t;) t -= .0167, this.update(.0167);\n        this.stoped = e, this.emitTime = i + Math.max(t, 0), this.totalTime = a;\n      }\n    }, {\n      key: \"removeAllParticles\",\n      value: function () {\n        for (var t = this.particles.length; t--;) this.particles[t].dead = !0;\n      }\n    }, {\n      key: \"addSelfInitialize\",\n      value: function (t) {\n        t.init ? t.init(this) : this.initAll();\n      }\n    }, {\n      key: \"addInitialize\",\n      value: function () {\n        for (var t = arguments.length, e = Array(t), i = 0; i < t; i++) e[i] = arguments[i];\n        for (var a = e.length; a--;) this.initializes.push(e[a]);\n      }\n    }, {\n      key: \"removeInitialize\",\n      value: function (t) {\n        t = this.initializes.indexOf(t);\n        -1 < t && this.initializes.splice(t, 1);\n      }\n    }, {\n      key: \"removeAllInitializers\",\n      value: function () {\n        P.emptyArray(this.initializes);\n      }\n    }, {\n      key: \"addBehaviour\",\n      value: function () {\n        for (var t = arguments.length, e = Array(t), i = 0; i < t; i++) e[i] = arguments[i];\n        for (var a = arguments.length; a--;) {\n          var r = e[a];\n          this.behaviours.push(r), r.parents && r.parents.push(this);\n        }\n      }\n    }, {\n      key: \"removeBehaviour\",\n      value: function (t) {\n        var e = this.behaviours.indexOf(t);\n        return this.behaviours.splice(e, 1), t.parents && (e = t.parents.indexOf(t), t.parents.splice(e, 1)), e;\n      }\n    }, {\n      key: \"removeAllBehaviours\",\n      value: function () {\n        P.emptyArray(this.behaviours);\n      }\n    }, {\n      key: \"update\",\n      value: function (t) {\n        this.age += t, (this.age >= this.life || this.dead) && this.destroy(), this.emitting(t), this.integrate(t);\n      }\n    }, {\n      key: \"integrate\",\n      value: function (t) {\n        if (this.parent) {\n          var e = 1 - this.damping;\n          this.parent.integrator.calculate(this, t, e);\n          for (var i = void 0, a = void 0, i = this.particles.length - 1; 0 <= i; i--) (a = this.particles[i]).update(t, i), this.parent.integrator.calculate(a, t, e), this.dispatch(\"PARTICLE_UPDATE\", a), a.dead && (this.dispatch(\"PARTICLE_DEAD\", a), this.parent.pool.expire(a), this.particles.splice(i, 1));\n        }\n      }\n    }, {\n      key: \"dispatch\",\n      value: function (t, e) {\n        this.parent && this.parent.dispatchEvent(t, e), this.bindEvent && this.dispatchEvent(t, e);\n      }\n    }, {\n      key: \"emitting\",\n      value: function (t) {\n        if (\"once\" === this.totalTime) {\n          var e = void 0,\n            i = this.rate.getValue(99999);\n          for (0 < i && (this.emitSpeed = i), e = 0; e < i; e++) this.createParticle();\n          this.totalTime = \"none\";\n        } else if (this.emitTime += t, this.emitTime < this.totalTime) {\n          var a = this.rate.getValue(t),\n            r = void 0;\n          for (0 < a && (this.emitSpeed = a), r = 0; r < a; r++) this.createParticle();\n        }\n      }\n    }, {\n      key: \"createParticle\",\n      value: function (t, e) {\n        var i = this.parent.pool.get(j);\n        return this.setupParticle(i, t, e), this.dispatch(\"PARTICLE_CREATED\", i), i;\n      }\n    }, {\n      key: \"setupParticle\",\n      value: function (t, e, i) {\n        var a = this.initializes,\n          r = this.behaviours;\n        e && (a = P.toArray(e)), i && (r = P.toArray(i)), t.reset(), Xt.initialize(this, t, a), t.addBehaviours(r), (t.parent = this).particles.push(t);\n      }\n    }, {\n      key: \"remove\",\n      value: function () {\n        this.stop(), P.destroyAll(this.particles);\n      }\n    }, {\n      key: \"destroy\",\n      value: function () {\n        this.dead = !0, this.remove(), this.removeAllInitializers(), this.removeAllBehaviours(), this.parent && this.parent.removeEmitter(this);\n      }\n    }]), Wt);\n  function Wt() {\n    var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};\n    o(this, Wt);\n    t = h(this, (Wt.__proto__ || Object.getPrototypeOf(Wt)).call(this, t));\n    return t.particles = [], t.behaviours = [], t.initializes = [], t.emitTime = 0, t.emitSpeed = 0, t.totalTime = -1, t.damping = .006, t.bindEmitter = !0, t.rate = new K(1, .1), t.name = \"Emitter\", t.id = A.id(t.name), t;\n  }\n  C.bind(Yt);\n  var Zt = (r(Qt, Yt), t(Qt, [{\n    key: \"addSelfBehaviour\",\n    value: function () {\n      for (var t = arguments.length, e = Array(t), i = 0; i < t; i++) e[i] = arguments[i];\n      for (var a = void 0, r = e.length, a = 0; a < r; a++) {\n        var n = e[a];\n        this.selfBehaviours.push(n), n.initialize(this);\n      }\n    }\n  }, {\n    key: \"removeSelfBehaviour\",\n    value: function (t) {\n      t = this.selfBehaviours.indexOf(t);\n      -1 < t && this.selfBehaviours.splice(t, 1);\n    }\n  }, {\n    key: \"update\",\n    value: function (t) {\n      if (n(Qt.prototype.__proto__ || Object.getPrototypeOf(Qt.prototype), \"update\", this).call(this, t), !this.sleep) for (var e = this.selfBehaviours.length, i = void 0, i = 0; i < e; i++) this.selfBehaviours[i].applyBehaviour(this, t, i);\n    }\n  }]), Qt);\n  function Qt(t) {\n    o(this, Qt);\n    t = h(this, (Qt.__proto__ || Object.getPrototypeOf(Qt)).call(this, t));\n    return t.selfBehaviours = [], t;\n  }\n  var Kt = (r(Jt, Yt), t(Jt, [{\n    key: \"initEventHandler\",\n    value: function () {\n      var e = this;\n      this.mousemoveHandler = function (t) {\n        return e.mousemove.call(e, t);\n      }, this.mousedownHandler = function (t) {\n        return e.mousedown.call(e, t);\n      }, this.mouseupHandler = function (t) {\n        return e.mouseup.call(e, t);\n      }, this.mouseTarget.addEventListener(\"mousemove\", this.mousemoveHandler, !1);\n    }\n  }, {\n    key: \"emit\",\n    value: function () {\n      this._allowEmitting = !0;\n    }\n  }, {\n    key: \"stop\",\n    value: function () {\n      this._allowEmitting = !1;\n    }\n  }, {\n    key: \"mousemove\",\n    value: function (t) {\n      t.layerX || 0 === t.layerX ? (this.p.x += (t.layerX - this.p.x) * this.ease, this.p.y += (t.layerY - this.p.y) * this.ease) : !t.offsetX && 0 !== t.offsetX || (this.p.x += (t.offsetX - this.p.x) * this.ease, this.p.y += (t.offsetY - this.p.y) * this.ease), this._allowEmitting && n(Jt.prototype.__proto__ || Object.getPrototypeOf(Jt.prototype), \"emit\", this).call(this, \"once\");\n    }\n  }, {\n    key: \"destroy\",\n    value: function () {\n      n(Jt.prototype.__proto__ || Object.getPrototypeOf(Jt.prototype), \"destroy\", this).call(this), this.mouseTarget.removeEventListener(\"mousemove\", this.mousemoveHandler, !1);\n    }\n  }]), Jt);\n  function Jt(t, e, i) {\n    o(this, Jt);\n    i = h(this, (Jt.__proto__ || Object.getPrototypeOf(Jt)).call(this, i));\n    return i.mouseTarget = P.initValue(t, window), i.ease = P.initValue(e, .7), i._allowEmitting = !1, i.initEventHandler(), i;\n  }\n  var $t = (t(te, [{\n    key: \"setStroke\",\n    value: function (t, e) {\n      t = 0 < arguments.length && void 0 !== t ? t : \"#000000\", e = 1 < arguments.length && void 0 !== e ? e : 1;\n      this.stroke = {\n        color: t,\n        thinkness: e\n      };\n    }\n  }, {\n    key: \"initHandler\",\n    value: function () {\n      var e = this;\n      this._protonUpdateHandler = function () {\n        e.onProtonUpdate.call(e);\n      }, this._protonUpdateAfterHandler = function () {\n        e.onProtonUpdateAfter.call(e);\n      }, this._emitterAddedHandler = function (t) {\n        e.onEmitterAdded.call(e, t);\n      }, this._emitterRemovedHandler = function (t) {\n        e.onEmitterRemoved.call(e, t);\n      }, this._particleCreatedHandler = function (t) {\n        e.onParticleCreated.call(e, t);\n      }, this._particleUpdateHandler = function (t) {\n        e.onParticleUpdate.call(e, t);\n      }, this._particleDeadHandler = function (t) {\n        e.onParticleDead.call(e, t);\n      };\n    }\n  }, {\n    key: \"init\",\n    value: function (t) {\n      (this.parent = t).addEventListener(\"PROTON_UPDATE\", this._protonUpdateHandler), t.addEventListener(\"PROTON_UPDATE_AFTER\", this._protonUpdateAfterHandler), t.addEventListener(\"EMITTER_ADDED\", this._emitterAddedHandler), t.addEventListener(\"EMITTER_REMOVED\", this._emitterRemovedHandler), t.addEventListener(\"PARTICLE_CREATED\", this._particleCreatedHandler), t.addEventListener(\"PARTICLE_UPDATE\", this._particleUpdateHandler), t.addEventListener(\"PARTICLE_DEAD\", this._particleDeadHandler);\n    }\n  }, {\n    key: \"resize\",\n    value: function () {}\n  }, {\n    key: \"destroy\",\n    value: function () {\n      this.remove();\n    }\n  }, {\n    key: \"remove\",\n    value: function () {\n      this.parent.removeEventListener(\"PROTON_UPDATE\", this._protonUpdateHandler), this.parent.removeEventListener(\"PROTON_UPDATE_AFTER\", this._protonUpdateAfterHandler), this.parent.removeEventListener(\"EMITTER_ADDED\", this._emitterAddedHandler), this.parent.removeEventListener(\"EMITTER_REMOVED\", this._emitterRemovedHandler), this.parent.removeEventListener(\"PARTICLE_CREATED\", this._particleCreatedHandler), this.parent.removeEventListener(\"PARTICLE_UPDATE\", this._particleUpdateHandler), this.parent.removeEventListener(\"PARTICLE_DEAD\", this._particleDeadHandler), this.parent = null;\n    }\n  }, {\n    key: \"onProtonUpdate\",\n    value: function () {}\n  }, {\n    key: \"onProtonUpdateAfter\",\n    value: function () {}\n  }, {\n    key: \"onEmitterAdded\",\n    value: function () {}\n  }, {\n    key: \"onEmitterRemoved\",\n    value: function () {}\n  }, {\n    key: \"onParticleCreated\",\n    value: function () {}\n  }, {\n    key: \"onParticleUpdate\",\n    value: function () {}\n  }, {\n    key: \"onParticleDead\",\n    value: function () {}\n  }]), te);\n  function te(t, e) {\n    o(this, te), this.pool = new T(), this.element = t, this.stroke = e, this.circleConf = {\n      isCircle: !0\n    }, this.initHandler(), this.name = \"BaseRenderer\";\n  }\n  var ee = (r(ie, $t), t(ie, [{\n    key: \"resize\",\n    value: function (t, e) {\n      this.element.width = t, this.element.height = e;\n    }\n  }, {\n    key: \"onProtonUpdate\",\n    value: function () {\n      this.context.clearRect(0, 0, this.element.width, this.element.height);\n    }\n  }, {\n    key: \"onParticleCreated\",\n    value: function (t) {\n      t.body ? x(t.body, this.addImg2Body, t) : t.color = t.color || \"#ff0000\";\n    }\n  }, {\n    key: \"onParticleUpdate\",\n    value: function (t) {\n      t.body ? t.body instanceof Image && this.drawImage(t) : this.drawCircle(t);\n    }\n  }, {\n    key: \"onParticleDead\",\n    value: function (t) {\n      t.body = null;\n    }\n  }, {\n    key: \"addImg2Body\",\n    value: function (t, e) {\n      e.body = t;\n    }\n  }, {\n    key: \"drawImage\",\n    value: function (t) {\n      var e,\n        i = t.body.width * t.scale | 0,\n        a = t.body.height * t.scale | 0,\n        r = t.p.x - i / 2,\n        n = t.p.y - a / 2;\n      t.color ? (t.data.buffer || (t.data.buffer = this.createBuffer(t.body)), (e = t.data.buffer.getContext(\"2d\")).clearRect(0, 0, t.data.buffer.width, t.data.buffer.height), e.globalAlpha = t.alpha, e.drawImage(t.body, 0, 0), e.globalCompositeOperation = \"source-atop\", e.fillStyle = H.rgbToHex(t.rgb), e.fillRect(0, 0, t.data.buffer.width, t.data.buffer.height), e.globalCompositeOperation = \"source-over\", e.globalAlpha = 1, this.context.drawImage(t.data.buffer, 0, 0, t.data.buffer.width, t.data.buffer.height, r, n, i, a)) : (this.context.save(), this.context.globalAlpha = t.alpha, this.context.translate(t.p.x, t.p.y), this.context.rotate(s.degreeTransform(t.rotation)), this.context.translate(-t.p.x, -t.p.y), this.context.drawImage(t.body, 0, 0, t.body.width, t.body.height, r, n, i, a), this.context.globalAlpha = 1, this.context.restore());\n    }\n  }, {\n    key: \"drawCircle\",\n    value: function (t) {\n      t.rgb ? this.context.fillStyle = \"rgba(\" + t.rgb.r + \",\" + t.rgb.g + \",\" + t.rgb.b + \",\" + t.alpha + \")\" : this.context.fillStyle = t.color, this.context.beginPath(), this.context.arc(t.p.x, t.p.y, t.radius, 0, 2 * Math.PI, !0), this.stroke && (this.context.strokeStyle = this.stroke.color, this.context.lineWidth = this.stroke.thinkness, this.context.stroke()), this.context.closePath(), this.context.fill();\n    }\n  }, {\n    key: \"createBuffer\",\n    value: function (t) {\n      if (t instanceof Image) {\n        var e = t.width + \"_\" + t.height,\n          i = this.bufferCache[e];\n        return i || ((i = document.createElement(\"canvas\")).width = t.width, i.height = t.height, this.bufferCache[e] = i), i;\n      }\n    }\n  }]), ie);\n  function ie(t) {\n    o(this, ie);\n    t = h(this, (ie.__proto__ || Object.getPrototypeOf(ie)).call(this, t));\n    return t.stroke = null, t.context = t.element.getContext(\"2d\"), t.bufferCache = {}, t.name = \"CanvasRenderer\", t;\n  }\n  var ae = (r(re, $t), t(re, [{\n    key: \"onParticleCreated\",\n    value: function (t) {\n      t.body ? x(t.body, this.addImg2Body, t) : (t.body = this.pool.get(this.circleConf, t), this.element.appendChild(t.body));\n    }\n  }, {\n    key: \"onParticleUpdate\",\n    value: function (t) {\n      this.bodyReady(t) && (this.transform3d ? v.transform3d(t.body, t.p.x, t.p.y, t.scale, t.rotation) : v.transform(t.body, t.p.x, t.p.y, t.scale, t.rotation), t.body.style.opacity = t.alpha, t.body.isCircle && (t.body.style.backgroundColor = t.color || \"#ff0000\"));\n    }\n  }, {\n    key: \"onParticleDead\",\n    value: function (t) {\n      this.bodyReady(t) && (this.element.removeChild(t.body), this.pool.expire(t.body), t.body = null);\n    }\n  }, {\n    key: \"bodyReady\",\n    value: function (t) {\n      return \"object\" === i(t.body) && t.body && !t.body.isInner;\n    }\n  }, {\n    key: \"addImg2Body\",\n    value: function (t, e) {\n      e.dead || (e.body = this.pool.get(t, e), v.resize(e.body, t.width, t.height), this.element.appendChild(e.body));\n    }\n  }, {\n    key: \"createBody\",\n    value: function (t, e) {\n      return t.isCircle ? this.createCircle(e) : this.createSprite(t, e);\n    }\n  }, {\n    key: \"createCircle\",\n    value: function (t) {\n      var e = v.createDiv(t.id + \"_dom\", 2 * t.radius, 2 * t.radius);\n      return e.style.borderRadius = t.radius + \"px\", this.stroke && (e.style.borderColor = this.stroke.color, e.style.borderWidth = this.stroke.thinkness + \"px\"), e.isCircle = !0, e;\n    }\n  }, {\n    key: \"createSprite\",\n    value: function (t, e) {\n      var i = \"string\" == typeof t ? t : t.src,\n        t = v.createDiv(e.id + \"_dom\", t.width, t.height);\n      return t.style.backgroundImage = \"url(\" + i + \")\", t;\n    }\n  }]), re);\n  function re(t) {\n    o(this, re);\n    var i = h(this, (re.__proto__ || Object.getPrototypeOf(re)).call(this, t));\n    return i.stroke = null, i.pool.create = function (t, e) {\n      return i.createBody(t, e);\n    }, i.addImg2Body = i.addImg2Body.bind(i), i.transform3d = !1, i.name = \"DomRenderer\", i;\n  }\n  var ne = (r(se, $t), t(se, [{\n    key: \"onParticleCreated\",\n    value: function (t) {\n      t.body ? this.createSprite(t) : this.createCircle(t), this.element.addChild(t.body);\n    }\n  }, {\n    key: \"onParticleUpdate\",\n    value: function (t) {\n      t.body && (t.body.x = t.p.x, t.body.y = t.p.y, t.body.alpha = t.alpha, t.body.scaleX = t.body.scaleY = t.scale, t.body.rotation = t.rotation);\n    }\n  }, {\n    key: \"onParticleDead\",\n    value: function (t) {\n      t.body && (t.body.parent && t.body.parent.removeChild(t.body), this.pool.expire(t.body), t.body = null), t.graphics && this.pool.expire(t.graphics);\n    }\n  }, {\n    key: \"createSprite\",\n    value: function (t) {\n      t.body = this.pool.get(t.body), t.body.parent || t.body.image && (t.body.regX = t.body.image.width / 2, t.body.regY = t.body.image.height / 2);\n    }\n  }, {\n    key: \"createCircle\",\n    value: function (t) {\n      var e = this.pool.get(createjs.Graphics);\n      this.stroke && (this.stroke instanceof String ? e.beginStroke(this.stroke) : e.beginStroke(\"#000000\")), e.beginFill(t.color || \"#ff0000\").drawCircle(0, 0, t.radius);\n      var i = this.pool.get(createjs.Shape, [e]);\n      t.body = i, t.graphics = e;\n    }\n  }]), se);\n  function se(t, e) {\n    o(this, se);\n    t = h(this, (se.__proto__ || Object.getPrototypeOf(se)).call(this, t));\n    return t.stroke = e, t.name = \"EaselRenderer\", t;\n  }\n  var oe = (r(he, $t), t(he, [{\n    key: \"resize\",\n    value: function (t, e) {\n      this.element.width = t, this.element.height = e;\n    }\n  }, {\n    key: \"createImageData\",\n    value: function (t) {\n      this.rectangle = t || new Z(0, 0, this.element.width, this.element.height), this.imageData = this.context.createImageData(this.rectangle.width, this.rectangle.height), this.context.putImageData(this.imageData, this.rectangle.x, this.rectangle.y);\n    }\n  }, {\n    key: \"onProtonUpdate\",\n    value: function () {\n      this.context.clearRect(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height), this.imageData = this.context.getImageData(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height);\n    }\n  }, {\n    key: \"onProtonUpdateAfter\",\n    value: function () {\n      this.context.putImageData(this.imageData, this.rectangle.x, this.rectangle.y);\n    }\n  }, {\n    key: \"onParticleCreated\",\n    value: function () {}\n  }, {\n    key: \"onParticleUpdate\",\n    value: function (t) {\n      this.imageData && this.setPixel(this.imageData, Math.floor(t.p.x - this.rectangle.x), Math.floor(t.p.y - this.rectangle.y), t);\n    }\n  }, {\n    key: \"setPixel\",\n    value: function (t, e, i, a) {\n      var r = a.rgb;\n      e < 0 || e > this.element.width || i < 0 || i > this.elementwidth || (e = 4 * ((i >> 0) * t.width + (e >> 0)), t.data[e] = r.r, t.data[1 + e] = r.g, t.data[2 + e] = r.b, t.data[3 + e] = 255 * a.alpha);\n    }\n  }, {\n    key: \"onParticleDead\",\n    value: function () {}\n  }]), he);\n  function he(t, e) {\n    o(this, he);\n    t = h(this, (he.__proto__ || Object.getPrototypeOf(he)).call(this, t));\n    return t.context = t.element.getContext(\"2d\"), t.imageData = null, t.rectangle = null, t.rectangle = e, t.createImageData(e), t.name = \"PixelRenderer\", t;\n  }\n  var le = void 0,\n    ue = (r(ce, $t), t(ce, [{\n      key: \"setPIXI\",\n      value: function (t) {\n        try {\n          le = t || {\n            Sprite: {}\n          }, this.createFromImage = le.Sprite.from || le.Sprite.fromImage;\n        } catch (t) {}\n      }\n    }, {\n      key: \"onProtonUpdate\",\n      value: function () {}\n    }, {\n      key: \"onParticleCreated\",\n      value: function (t) {\n        t.body ? t.body = this.pool.get(t.body, t) : t.body = this.pool.get(this.circleConf, t), this.blendMode && (t.body.blendMode = this.blendMode), this.element.addChild(t.body);\n      }\n    }, {\n      key: \"onParticleUpdate\",\n      value: function (t) {\n        this.transform(t, t.body), !0 !== this.setColor && !0 !== this.color || (t.body.tint = H.getHex16FromParticle(t));\n      }\n    }, {\n      key: \"onParticleDead\",\n      value: function (t) {\n        this.element.removeChild(t.body), this.pool.expire(t.body), t.body = null;\n      }\n    }, {\n      key: \"destroy\",\n      value: function (t) {\n        n(ce.prototype.__proto__ || Object.getPrototypeOf(ce.prototype), \"destroy\", this).call(this), this.pool.destroy();\n        for (var e = t.length; e--;) {\n          var i = t[e];\n          i.body && this.element.removeChild(i.body);\n        }\n      }\n    }, {\n      key: \"transform\",\n      value: function (t, e) {\n        e.x = t.p.x, e.y = t.p.y, e.alpha = t.alpha, e.scale.x = t.scale, e.scale.y = t.scale, e.rotation = t.rotation * s.PI_180;\n      }\n    }, {\n      key: \"createBody\",\n      value: function (t, e) {\n        return t.isCircle ? this.createCircle(e) : this.createSprite(t);\n      }\n    }, {\n      key: \"createSprite\",\n      value: function (t) {\n        t = t.isInner ? this.createFromImage(t.src) : new le.Sprite(t);\n        return t.anchor.x = .5, t.anchor.y = .5, t;\n      }\n    }, {\n      key: \"createCircle\",\n      value: function (t) {\n        var e,\n          i = new le.Graphics();\n        return this.stroke && (e = this.stroke instanceof String ? this.stroke : 0, i.beginStroke(e)), i.beginFill(t.color || 36077), i.drawCircle(0, 0, t.radius), i.endFill(), i;\n      }\n    }]), ce);\n  function ce(t, e) {\n    o(this, ce);\n    var i = h(this, (ce.__proto__ || Object.getPrototypeOf(ce)).call(this, t));\n    return i.stroke = e, i.color = !1, i.setColor = !1, i.blendMode = null, i.pool.create = function (t, e) {\n      return i.createBody(t, e);\n    }, i.setPIXI(window.PIXI), i.name = \"PixiRenderer\", i;\n  }\n  var de = (t(ye, [{\n    key: \"set\",\n    value: function (t, e) {\n      0 === e ? X.set(t, this.mats[0]) : X.multiply(this.mats[e - 1], t, this.mats[e]), this.size = Math.max(this.size, e + 1);\n    }\n  }, {\n    key: \"push\",\n    value: function (t) {\n      0 === this.size ? X.set(t, this.mats[0]) : X.multiply(this.mats[this.size - 1], t, this.mats[this.size]), this.size++;\n    }\n  }, {\n    key: \"pop\",\n    value: function () {\n      0 < this.size && this.size--;\n    }\n  }, {\n    key: \"top\",\n    value: function () {\n      return this.mats[this.size - 1];\n    }\n  }]), ye);\n  function ye() {\n    o(this, ye), this.mats = [];\n    for (var t = this.size = 0; t < 20; t++) this.mats.push(X.create([0, 0, 0, 0, 0, 0, 0, 0, 0]));\n  }\n  r(pe, $t), t(pe, [{\n    key: \"init\",\n    value: function (t) {\n      n(pe.prototype.__proto__ || Object.getPrototypeOf(pe.prototype), \"init\", this).call(this, t), this.resize(this.element.width, this.element.height);\n    }\n  }, {\n    key: \"resize\",\n    value: function (t, e) {\n      this.umat[4] = -2, this.umat[7] = 1, this.smat[0] = 1 / t, this.smat[4] = 1 / e, this.mstack.set(this.umat, 0), this.mstack.set(this.smat, 1), this.gl.viewport(0, 0, t, e), this.element.width = t, this.element.height = e;\n    }\n  }, {\n    key: \"setMaxRadius\",\n    value: function (t) {\n      this.circleCanvasURL = this.createCircle(t);\n    }\n  }, {\n    key: \"getVertexShader\",\n    value: function () {\n      return [\"uniform vec2 viewport;\", \"attribute vec2 aVertexPosition;\", \"attribute vec2 aTextureCoord;\", \"uniform mat3 tMat;\", \"varying vec2 vTextureCoord;\", \"varying float alpha;\", \"void main() {\", \"vec3 v = tMat * vec3(aVertexPosition, 1.0);\", \"gl_Position = vec4(v.x, v.y, 0, 1);\", \"vTextureCoord = aTextureCoord;\", \"alpha = tMat[0][2];\", \"}\"].join(\"\\n\");\n    }\n  }, {\n    key: \"getFragmentShader\",\n    value: function () {\n      return [\"precision mediump float;\", \"varying vec2 vTextureCoord;\", \"varying float alpha;\", \"uniform sampler2D uSampler;\", \"uniform vec4 color;\", \"uniform bool useTexture;\", \"uniform vec3 uColor;\", \"void main() {\", \"vec4 textureColor = texture2D(uSampler, vTextureCoord);\", \"gl_FragColor = textureColor * vec4(uColor, 1.0);\", \"gl_FragColor.w *= alpha;\", \"}\"].join(\"\\n\");\n    }\n  }, {\n    key: \"initVar\",\n    value: function () {\n      this.mstack = new de(), this.umat = X.create([2, 0, 1, 0, -2, 0, -1, 1, 1]), this.smat = X.create([.01, 0, 1, 0, .01, 0, 0, 0, 1]), this.texturebuffers = {};\n    }\n  }, {\n    key: \"blendEquation\",\n    value: function (t) {\n      this.gl.blendEquation(this.gl[t]);\n    }\n  }, {\n    key: \"blendFunc\",\n    value: function (t, e) {\n      this.gl.blendFunc(this.gl[t], this.gl[e]);\n    }\n  }, {\n    key: \"getShader\",\n    value: function (t, e, i) {\n      i = i ? t.createShader(t.FRAGMENT_SHADER) : t.createShader(t.VERTEX_SHADER);\n      return t.shaderSource(i, e), t.compileShader(i), t.getShaderParameter(i, t.COMPILE_STATUS) ? i : (alert(t.getShaderInfoLog(i)), null);\n    }\n  }, {\n    key: \"initShaders\",\n    value: function () {\n      var t = this.getShader(this.gl, this.getFragmentShader(), !0),\n        e = this.getShader(this.gl, this.getVertexShader(), !1);\n      this.sprogram = this.gl.createProgram(), this.gl.attachShader(this.sprogram, e), this.gl.attachShader(this.sprogram, t), this.gl.linkProgram(this.sprogram), this.gl.getProgramParameter(this.sprogram, this.gl.LINK_STATUS) || alert(\"Could not initialise shaders\"), this.gl.useProgram(this.sprogram), this.sprogram.vpa = this.gl.getAttribLocation(this.sprogram, \"aVertexPosition\"), this.sprogram.tca = this.gl.getAttribLocation(this.sprogram, \"aTextureCoord\"), this.gl.enableVertexAttribArray(this.sprogram.tca), this.gl.enableVertexAttribArray(this.sprogram.vpa), this.sprogram.tMatUniform = this.gl.getUniformLocation(this.sprogram, \"tMat\"), this.sprogram.samplerUniform = this.gl.getUniformLocation(this.sprogram, \"uSampler\"), this.sprogram.useTex = this.gl.getUniformLocation(this.sprogram, \"useTexture\"), this.sprogram.color = this.gl.getUniformLocation(this.sprogram, \"uColor\"), this.gl.uniform1i(this.sprogram.useTex, 1);\n    }\n  }, {\n    key: \"initBuffers\",\n    value: function () {\n      var t;\n      this.unitIBuffer = this.gl.createBuffer(), this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer), this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 3, 1, 0, 2, 3]), this.gl.STATIC_DRAW);\n      for (var e = void 0, i = [], e = 0; e < 100; e++) i.push(e);\n      for (t = new Uint16Array(i), this.unitI33 = this.gl.createBuffer(), this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitI33), this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, t, this.gl.STATIC_DRAW), i = [], e = 0; e < 100; e++) i.push(e, e + 1, e + 2);\n      t = new Uint16Array(i), this.stripBuffer = this.gl.createBuffer(), this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.stripBuffer), this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, t, this.gl.STATIC_DRAW);\n    }\n  }, {\n    key: \"createCircle\",\n    value: function (t) {\n      this.circleCanvasRadius = c(P.initValue(t, 32));\n      var e = v.createCanvas(\"circle_canvas\", 2 * this.circleCanvasRadius, 2 * this.circleCanvasRadius),\n        t = e.getContext(\"2d\");\n      return t.beginPath(), t.arc(this.circleCanvasRadius, this.circleCanvasRadius, this.circleCanvasRadius, 0, 2 * Math.PI, !0), t.closePath(), t.fillStyle = \"#FFF\", t.fill(), e.toDataURL();\n    }\n  }, {\n    key: \"drawImg2Canvas\",\n    value: function (t) {\n      var e = t.body.width,\n        i = t.body.height,\n        a = c(t.body.width),\n        r = c(t.body.height),\n        n = t.body.width / a,\n        s = t.body.height / r;\n      this.texturebuffers[t.data.src] || (this.texturebuffers[t.data.src] = [this.gl.createTexture(), this.gl.createBuffer(), this.gl.createBuffer()]), t.data.texture = this.texturebuffers[t.data.src][0], t.data.vcBuffer = this.texturebuffers[t.data.src][1], t.data.tcBuffer = this.texturebuffers[t.data.src][2], this.gl.bindBuffer(this.gl.ARRAY_BUFFER, t.data.tcBuffer), this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0, 0, n, 0, 0, s, s, s]), this.gl.STATIC_DRAW), this.gl.bindBuffer(this.gl.ARRAY_BUFFER, t.data.vcBuffer), this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0, 0, e, 0, 0, i, e, i]), this.gl.STATIC_DRAW);\n      r = t.data.canvas.getContext(\"2d\").getImageData(0, 0, a, r);\n      this.gl.bindTexture(this.gl.TEXTURE_2D, t.data.texture), this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, r), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST), this.gl.generateMipmap(this.gl.TEXTURE_2D), t.data.textureLoaded = !0, t.data.textureWidth = e, t.data.textureHeight = i;\n    }\n  }, {\n    key: \"onProtonUpdate\",\n    value: function () {}\n  }, {\n    key: \"onParticleCreated\",\n    value: function (t) {\n      t.data.textureLoaded = !1, t.data.tmat = X.create(), t.data.tmat[8] = 1, t.data.imat = X.create(), t.data.imat[8] = 1, t.body ? x(t.body, this.addImg2Body, t) : (x(this.circleCanvasURL, this.addImg2Body, t), t.data.oldScale = t.radius / this.circleCanvasRadius);\n    }\n  }, {\n    key: \"addImg2Body\",\n    value: function (t, e) {\n      e.dead || (e.body = t, e.data.src = t.src, e.data.canvas = k(t), e.data.oldScale = 1, this.drawImg2Canvas(e));\n    }\n  }, {\n    key: \"onParticleUpdate\",\n    value: function (t) {\n      t.data.textureLoaded && (this.updateMatrix(t), this.gl.uniform3f(this.sprogram.color, t.rgb.r / 255, t.rgb.g / 255, t.rgb.b / 255), this.gl.uniformMatrix3fv(this.sprogram.tMatUniform, !1, this.mstack.top()), this.gl.bindBuffer(this.gl.ARRAY_BUFFER, t.data.vcBuffer), this.gl.vertexAttribPointer(this.sprogram.vpa, 2, this.gl.FLOAT, !1, 0, 0), this.gl.bindBuffer(this.gl.ARRAY_BUFFER, t.data.tcBuffer), this.gl.vertexAttribPointer(this.sprogram.tca, 2, this.gl.FLOAT, !1, 0, 0), this.gl.bindTexture(this.gl.TEXTURE_2D, t.data.texture), this.gl.uniform1i(this.sprogram.samplerUniform, 0), this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer), this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0), this.mstack.pop());\n    }\n  }, {\n    key: \"onParticleDead\",\n    value: function () {}\n  }, {\n    key: \"updateMatrix\",\n    value: function (t) {\n      var e = d(-t.data.textureWidth / 2, -t.data.textureHeight / 2),\n        i = d(t.p.x, t.p.y),\n        a = t.rotation * s.PI_180,\n        r = y(a),\n        a = t.scale * t.data.oldScale,\n        a = p(a, a),\n        a = f(e, a),\n        a = f(a, r);\n      a = f(a, i), X.inverse(a, t.data.imat), a[2] = t.alpha, this.mstack.push(a);\n    }\n  }]), C = pe;\n  function pe(t) {\n    o(this, pe);\n    t = h(this, (pe.__proto__ || Object.getPrototypeOf(pe)).call(this, t));\n    return t.gl = t.element.getContext(\"experimental-webgl\", {\n      antialias: !0,\n      stencil: !1,\n      depth: !1\n    }), t.gl || alert(\"Sorry your browser do not suppest WebGL!\"), t.initVar(), t.setMaxRadius(), t.initShaders(), t.initBuffers(), t.gl.blendEquation(t.gl.FUNC_ADD), t.gl.blendFunc(t.gl.SRC_ALPHA, t.gl.ONE_MINUS_SRC_ALPHA), t.gl.enable(t.gl.BLEND), t.addImg2Body = t.addImg2Body.bind(t), t.name = \"WebGLRenderer\", t;\n  }\n  r(fe, $t), $t = fe;\n  function fe(t) {\n    o(this, fe);\n    t = h(this, (fe.__proto__ || Object.getPrototypeOf(fe)).call(this, t));\n    return t.name = \"CustomRenderer\", t;\n  }\n  var ve = (r(ge, at), t(ge, [{\n    key: \"getPosition\",\n    value: function () {\n      return this.random = Math.random(), this.vector.x = this.x1 + this.random * this.length * Math.cos(this.gradient), this.vector.y = this.y1 + this.random * this.length * Math.sin(this.gradient), this.vector;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function (t, e) {\n      var i = this.dy,\n        a = -this.dx;\n      return 0 < (i * t + a * e + this.dot) * (0 == a ? 1 : a);\n    }\n  }, {\n    key: \"getDistance\",\n    value: function (t, e) {\n      return (this.dy * t + -this.dx * e + this.dot) / Math.sqrt(this.xxyy);\n    }\n  }, {\n    key: \"getSymmetric\",\n    value: function (t) {\n      var e = t.getGradient(),\n        i = 2 * (this.getGradient() - e),\n        a = t.x,\n        e = t.y;\n      return t.x = a * Math.cos(i) - e * Math.sin(i), t.y = a * Math.sin(i) + e * Math.cos(i), t;\n    }\n  }, {\n    key: \"getGradient\",\n    value: function () {\n      return Math.atan2(this.dy, this.dx);\n    }\n  }, {\n    key: \"rangeOut\",\n    value: function (t) {\n      if (Math.abs(this.getGradient()) <= s.PI / 4) {\n        if (t.p.x <= this.maxx && t.p.x >= this.minx) return !0;\n      } else if (t.p.y <= this.maxy && t.p.y >= this.miny) return !0;\n      return !1;\n    }\n  }, {\n    key: \"getLength\",\n    value: function () {\n      return Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n    }\n  }, {\n    key: \"crossing\",\n    value: function (t) {\n      \"dead\" === this.crossType ? \">\" === this.direction || \"R\" === this.direction || \"right\" === this.direction || \"down\" === this.direction ? this.rangeOut(t) && this.getDirection(t.p.x, t.p.y) && (t.dead = !0) : this.rangeOut(t) && (this.getDirection(t.p.x, t.p.y) || (t.dead = !0)) : \"bound\" === this.crossType ? this.rangeOut(t) && this.getDistance(t.p.x, t.p.y) <= t.radius && (0 === this.dx ? t.v.x *= -1 : 0 === this.dy ? t.v.y *= -1 : this.getSymmetric(t.v)) : \"cross\" === this.crossType && this.alert && (console.error(\"Sorry, LineZone does not support cross method!\"), this.alert = !1);\n    }\n  }]), ge);\n  function ge(t, e, i, a, r) {\n    o(this, ge);\n    var n = h(this, (ge.__proto__ || Object.getPrototypeOf(ge)).call(this));\n    return 0 <= i - t ? (n.x1 = t, n.y1 = e, n.x2 = i, n.y2 = a) : (n.x1 = i, n.y1 = a, n.x2 = t, n.y2 = e), n.dx = n.x2 - n.x1, n.dy = n.y2 - n.y1, n.minx = Math.min(n.x1, n.x2), n.miny = Math.min(n.y1, n.y2), n.maxx = Math.max(n.x1, n.x2), n.maxy = Math.max(n.y1, n.y2), n.dot = n.x2 * n.y1 - n.x1 * n.y2, n.xxyy = n.dx * n.dx + n.dy * n.dy, n.gradient = n.getGradient(), n.length = n.getLength(), n.direction = P.initValue(r, \">\"), n;\n  }\n  var me = (r(be, at), t(be, [{\n    key: \"getPosition\",\n    value: function () {\n      return this.angle = s.PIx2 * Math.random(), this.randomRadius = Math.random() * this.radius, this.vector.x = this.x + this.randomRadius * Math.cos(this.angle), this.vector.y = this.y + this.randomRadius * Math.sin(this.angle), this.vector;\n    }\n  }, {\n    key: \"setCenter\",\n    value: function (t, e) {\n      this.center.x = t, this.center.y = e;\n    }\n  }, {\n    key: \"crossing\",\n    value: function (t) {\n      var e = t.p.distanceTo(this.center);\n      \"dead\" === this.crossType ? e - t.radius > this.radius && (t.dead = !0) : \"bound\" === this.crossType ? e + t.radius >= this.radius && this.getSymmetric(t) : \"cross\" === this.crossType && this.alert && (console.error(\"Sorry, CircleZone does not support cross method!\"), this.alert = !1);\n    }\n  }, {\n    key: \"getSymmetric\",\n    value: function (t) {\n      var e = t.v.getGradient(),\n        i = 2 * (this.getGradient(t) - e),\n        a = t.v.x,\n        e = t.v.y;\n      t.v.x = a * Math.cos(i) - e * Math.sin(i), t.v.y = a * Math.sin(i) + e * Math.cos(i);\n    }\n  }, {\n    key: \"getGradient\",\n    value: function (t) {\n      return -s.PI_2 + Math.atan2(t.p.y - this.center.y, t.p.x - this.center.x);\n    }\n  }]), be);\n  function be(t, e, i) {\n    o(this, be);\n    var a = h(this, (be.__proto__ || Object.getPrototypeOf(be)).call(this));\n    return a.x = t, a.y = e, a.radius = i, a.angle = 0, a.center = {\n      x: t,\n      y: e\n    }, a;\n  }\n  var _e = (r(xe, at), t(xe, [{\n    key: \"getPosition\",\n    value: function () {\n      return this.vector.x = this.x + Math.random() * this.width, this.vector.y = this.y + Math.random() * this.height, this.vector;\n    }\n  }, {\n    key: \"crossing\",\n    value: function (t) {\n      \"dead\" === this.crossType ? ((t.p.x + t.radius < this.x || t.p.x - t.radius > this.x + this.width) && (t.dead = !0), (t.p.y + t.radius < this.y || t.p.y - t.radius > this.y + this.height) && (t.dead = !0)) : \"bound\" === this.crossType ? (t.p.x - t.radius < this.x ? (t.p.x = this.x + t.radius, t.v.x *= -1) : t.p.x + t.radius > this.x + this.width && (t.p.x = this.x + this.width - t.radius, t.v.x *= -1), t.p.y - t.radius < this.y ? (t.p.y = this.y + t.radius, t.v.y *= -1) : t.p.y + t.radius > this.y + this.height && (t.p.y = this.y + this.height - t.radius, t.v.y *= -1)) : \"cross\" === this.crossType && (t.p.x + t.radius < this.x && t.v.x <= 0 ? t.p.x = this.x + this.width + t.radius : t.p.x - t.radius > this.x + this.width && 0 <= t.v.x && (t.p.x = this.x - t.radius), t.p.y + t.radius < this.y && t.v.y <= 0 ? t.p.y = this.y + this.height + t.radius : t.p.y - t.radius > this.y + this.height && 0 <= t.v.y && (t.p.y = this.y - t.radius));\n    }\n  }]), xe);\n  function xe(t, e, i, a) {\n    o(this, xe);\n    var r = h(this, (xe.__proto__ || Object.getPrototypeOf(xe)).call(this));\n    return r.x = t, r.y = e, r.width = i, r.height = a, r;\n  }\n  r(ke, at), t(ke, [{\n    key: \"reset\",\n    value: function (t, e, i, a) {\n      this.imageData = t, this.x = P.initValue(e, 0), this.y = P.initValue(i, 0), this.d = P.initValue(a, 2), this.vectors = [], this.setVectors();\n    }\n  }, {\n    key: \"setVectors\",\n    value: function () {\n      for (var t = void 0, e = void 0, i = this.imageData.width, a = this.imageData.height, t = 0; t < i; t += this.d) for (e = 0; e < a; e += this.d) {\n        var r = 4 * ((e >> 0) * i + (t >> 0));\n        0 < this.imageData.data[3 + r] && this.vectors.push({\n          x: t + this.x,\n          y: e + this.y\n        });\n      }\n      return this.vector;\n    }\n  }, {\n    key: \"getBound\",\n    value: function (t, e) {\n      t = 4 * ((e >> 0) * this.imageData.width + (t >> 0));\n      return 0 < this.imageData.data[3 + t];\n    }\n  }, {\n    key: \"getPosition\",\n    value: function () {\n      var t = P.getRandFromArray(this.vectors);\n      return this.vector.copy(t);\n    }\n  }, {\n    key: \"getColor\",\n    value: function (t, e) {\n      t -= this.x;\n      t = 4 * (((e -= this.y) >> 0) * this.imageData.width + (t >> 0));\n      return {\n        r: this.imageData.data[t],\n        g: this.imageData.data[1 + t],\n        b: this.imageData.data[2 + t],\n        a: this.imageData.data[3 + t]\n      };\n    }\n  }, {\n    key: \"crossing\",\n    value: function (t) {\n      \"dead\" === this.crossType ? this.getBound(t.p.x - this.x, t.p.y - this.y) ? t.dead = !0 : t.dead = !1 : \"bound\" === this.crossType && (this.getBound(t.p.x - this.x, t.p.y - this.y) || t.v.negate());\n    }\n  }]), r = ke;\n  function ke(t, e, i, a) {\n    o(this, ke);\n    var r = h(this, (ke.__proto__ || Object.getPrototypeOf(ke)).call(this));\n    return r.reset(t, e, i, a), r;\n  }\n  t = {\n    addEventListener: function (t, e) {\n      t.addEventListener(\"PROTON_UPDATE_AFTER\", function () {\n        return e();\n      });\n    },\n    getStyle: function (t) {\n      t = H.hexToRgb(0 < arguments.length && void 0 !== t ? t : \"#ff0000\");\n      return \"rgba(\" + t.r + \", \" + t.g + \", \" + t.b + \", 0.5)\";\n    },\n    drawZone: function (t, e, i, a) {\n      var r = e.getContext(\"2d\"),\n        n = this.getStyle();\n      this.addEventListener(t, function () {\n        a && r.clearRect(0, 0, e.width, e.height), i instanceof nt ? (r.beginPath(), r.fillStyle = n, r.arc(i.x, i.y, 10, 0, 2 * Math.PI, !0), r.fill(), r.closePath()) : i instanceof ve ? (r.beginPath(), r.strokeStyle = n, r.moveTo(i.x1, i.y1), r.lineTo(i.x2, i.y2), r.stroke(), r.closePath()) : i instanceof _e ? (r.beginPath(), r.strokeStyle = n, r.drawRect(i.x, i.y, i.width, i.height), r.stroke(), r.closePath()) : i instanceof me && (r.beginPath(), r.strokeStyle = n, r.arc(i.x, i.y, i.radius, 0, 2 * Math.PI, !0), r.stroke(), r.closePath());\n      });\n    },\n    drawEmitter: function (t, e, i, a) {\n      var r = e.getContext(\"2d\"),\n        n = this.getStyle();\n      this.addEventListener(t, function () {\n        a && r.clearRect(0, 0, e.width, e.height), r.beginPath(), r.fillStyle = n, r.arc(i.p.x, i.p.y, 10, 0, 2 * Math.PI, !0), r.fill(), r.closePath();\n      });\n    }\n  };\n  return V.Particle = j, V.Pool = T, V.Util = P, V.ColorUtil = H, V.MathUtil = s, V.Vector2D = V.Vector = F, V.Polar2D = V.Polar = q, V.ArraySpan = Y, V.Rectangle = Z, V.Rate = K, V.ease = U, V.Span = l, V.Mat3 = X, V.getSpan = function (t, e, i) {\n    return new l(t, e, i);\n  }, V.createArraySpan = Y.createArraySpan, V.Initialize = V.Init = $, V.Life = V.L = et, V.Position = V.P = ot, V.Velocity = V.V = lt, V.Mass = V.M = ct, V.Radius = V.R = yt, V.Body = V.B = ft, V.Behaviour = gt, V.Force = V.F = bt, V.Attraction = V.A = xt, V.RandomDrift = V.RD = Pt, V.Gravity = V.G = At, V.Collision = Rt, V.CrossZone = wt, V.Alpha = St, V.Scale = V.S = Dt, V.Rotate = Mt, V.Color = Lt, V.Repulsion = Nt, V.Cyclone = zt, V.GravityWell = qt, V.Emitter = Yt, V.BehaviourEmitter = Zt, V.FollowEmitter = Kt, V.Zone = at, V.LineZone = ve, V.CircleZone = me, V.PointZone = nt, V.RectZone = _e, V.ImageZone = r, V.CanvasRenderer = ee, V.DomRenderer = ae, V.EaselRenderer = ne, V.PixiRenderer = ue, V.PixelRenderer = oe, V.WebGLRenderer = V.WebGlRenderer = C, V.CustomRenderer = $t, V.Debug = t, P.assign(V, U), V;\n});","map":{"version":3,"mappings":"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","names":["PI","MathUtil","PI_180","N180_PI","isInfinity","num","this","Infinity","a","b","Math","floor","random","center","f","isInt","randomAToB","toString","slice","randomZone","k","digits","pow","toColor16","i","o","t","constructor","value","enumerable","writable","configurable","h","Span","isArray","Util","getRandFromArray","randomFloating","c","undefined","pan","getValue","initValue","length","d","tx","ty","y","angleInRadians","cos","s","sin","p","sx","sy","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b01","b02","b10","b11","b12","b20","b21","b22","createCanvas","id","width","height","position","dom","document","createElement","style","opacity","transform","resize","marginLeft","marginTop","div","x","scale","rotate","willChange","css3","key","val","bkey","charAt","toUpperCase","substr","imgsCache","canvasCache","canvasId","_","context","image","rect","drawImage","imagedata","getImageData","clearRect","img","callback","param","src","Image","onload","g","e","target","canvas","WebGLUtil","DomUtil","getContext","defaults","Object","prototype","call","arr","toArray","emptyObject","obj","ignore","indexOf","args","bind","apply","concat","particle","conf","hasProp","v","copy","props","prop","hasOwnProperty","getSpanValue","ImgUtil","destroy","assign","source","idsMap","Puid","_index","_cache","type","uid","getIdFromCache","isBody","isInner","Pool","params","__puid","getId","cache","pop","createOrClone","getCache","push","total","create","classApply","clone","count","Stats","body","add","emitter","getEmitter","renderer","getRenderer","str","proton","emitters","emitSpeed","getEmitterPos","initializes","concatArr","behaviours","name","getCreatedNumber","getCount","pool","container","innerHTML","cssText","join","addEventListener","_this","bg","color","parentNode","appendChild","emitterIndex","renderers","rendererIndex","result","cpool","round","EventDispatcher","listener","_listeners","removeEventListener","splice","listeners","handler","dispatchEvent","hasEventListener","removeAllEventListeners","Integration","particles","time","damping","eulerIntegrate","sleep","old","multiplyScalar","mass","clear","Proton","render","init","index","remove","parent","EMITTER_ADDED","EMITTER_REMOVED","_fps","PROTON_UPDATE","USE_CLOCK","then","Date","getTime","now","elapsed","amendChangeTabsBug","emittersUpdate","DEFAULT_INTERVAL","PROTON_UPDATE_AFTER","_interval","update","destroyAll","destroyOther","getAllParticles","set","fps","get","integrationType","stats","EULER","integrator","MEASURE","RK2","PARTICLE_CREATED","PARTICLE_UPDATE","PARTICLE_SLEEP","PARTICLE_DEAD","Rgb","r","easeLinear","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInSine","PI_2","easeInExpo","easeOutExpo","sqrt","easeOutCirc","easeInOutCirc","easeInBack","easeOutBack","easeInOutBack","getEasing","ease","Vector2D","atan2","w","addVectors","subVectors","divideScalar","distanceToSquared","tha","dx","dy","alpha","Particle","life","age","dead","sprite","energy","radius","rotation","easing","rgb","reset","data","removeAllBehaviours","applyBehaviours","max","applyBehaviour","behaviour","parents","initialize","addBehaviour","P","emptyArray","setProp","hexToRgb","hex16","substring","parseInt","rgbToHex","rbg","Number","Polar2D","getX","getY","abs","Mat3","mat3","mat","Float32Array","mat1","mat2","m","vec","ArraySpan","_arr","randomColor","Rectangle","right","bottom","Rate","startTime","nextTime","timePan","numPan","numpan","timepan","setSpanValue","Initialize","Life","lifePan","Zone","vector","crossType","alert","PointZone","error","Position","zone","getPosition","Velocity","rpan","thapan","rPan","thaPan","vr","polar2d","normalizeVelocity","Mass","massPan","Radius","oldRadius","Body","imageTarget","inner","Behaviour","force","removeBehaviour","Force","fx","fy","normalizeForce","calculate","Attraction","targetPosition","normalizeValue","radiusSq","attractionForce","lengthSq","sub","normalize","RandomDrift","driftX","driftY","delay","panFoce","addXY","Gravity","Collision","collisionPool","delta","overlap","totalMass","averageMass1","averageMass2","distance","newPool","otherParticle","CrossZone","crossing","Alpha","same","alphaA","alphaB","Scale","scaleA","scaleB","Rotate","rotationA","rotationB","getDirection","influence","Color","createArraySpan","colorA","ColorUtil","colorB","CHANGING","Cyclone","angle","span","String","toLowerCase","setAngleAndForce","cangle","cyclone","gradient","getGradient","Repulsion","GravityWell","centerPoint","distanceVec","factor","distanceSq","bindEmitter","setVectorVal","degreeTransform","Emitter","totalTime","stoped","emitTime","isNaN","rate","oldStoped","oldEmitTime","oldTotalTime","initAll","rest","initializer","arguments","emitting","integrate","dispatch","expire","event","bindEvent","createParticle","setupParticle","addBehaviours","stop","removeAllInitializers","removeEmitter","BehaviourEmitter","selfBehaviours","FollowEmitter","mousemoveHandler","_this2","mousemove","mousedownHandler","mousedown","mouseupHandler","mouseup","mouseTarget","_allowEmitting","layerX","layerY","offsetX","offsetY","babelHelpers.get","n","window","initEventHandler","BaseRenderer","thinkness","stroke","_protonUpdateHandler","onProtonUpdate","_protonUpdateAfterHandler","onProtonUpdateAfter","_emitterAddedHandler","onEmitterAdded","_emitterRemovedHandler","onEmitterRemoved","_particleCreatedHandler","onParticleCreated","_particleUpdateHandler","onParticleUpdate","_particleDeadHandler","onParticleDead","element","circleConf","isCircle","initHandler","CanvasRenderer","addImg2Body","drawCircle","bufContext","buffer","createBuffer","globalAlpha","globalCompositeOperation","fillStyle","fillRect","save","translate","restore","beginPath","arc","strokeStyle","lineWidth","closePath","fill","size","bufferCache","DomRenderer","bodyReady","transform3d","backgroundColor","removeChild","babelHelpers.typeof","createCircle","createSprite","createDiv","borderRadius","borderColor","borderWidth","url","backgroundImage","createBody","EaselRenderer","addChild","scaleX","scaleY","graphics","regX","regY","createjs","Graphics","beginStroke","beginFill","shape","Shape","PixelRenderer","rectangle","imageData","createImageData","putImageData","setPixel","elementwidth","PIXIClass","PixiRenderer","PIXI","Sprite","createFromImage","from","fromImage","blendMode","setColor","tint","getHex16FromParticle","anchor","endFill","setPIXI","MStack","mats","multiply","umat","smat","mstack","gl","viewport","circleCanvasURL","texturebuffers","A","blendEquation","B","blendFunc","fs","shader","createShader","FRAGMENT_SHADER","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fragmentShader","getShader","getFragmentShader","vertexShader","getVertexShader","sprogram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","vpa","getAttribLocation","tca","enableVertexAttribArray","tMatUniform","getUniformLocation","samplerUniform","useTex","uniform1i","idx","unitIBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","Uint16Array","STATIC_DRAW","ids","unitI33","stripBuffer","raidus","circleCanvasRadius","toDataURL","_w","_h","_width","_height","_scaleX","_scaleY","createTexture","texture","vcBuffer","tcBuffer","ARRAY_BUFFER","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","generateMipmap","textureLoaded","textureWidth","textureHeight","tmat","imat","oldScale","drawImg2Canvas","updateMatrix","uniform3f","uniformMatrix3fv","top","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","moveOriginMatrix","translationMatrix","angel","rotationMatrix","scaleMatrix","matrix","inverse","WebGLRenderer","antialias","stencil","depth","initVar","setMaxRadius","initShaders","initBuffers","FUNC_ADD","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","enable","BLEND","CustomRenderer","LineZone","x1","y1","dot","xxyy","tha2","oldx","oldy","maxx","minx","maxy","miny","direction","rangeOut","getDistance","getSymmetric","x2","y2","min","getLength","CircleZone","PIx2","randomRadius","distanceTo","RectZone","vectors","setVectors","j","length1","length2","getBound","negate","ImageZone","func","getStyle","moveTo","lineTo","drawRect","Vector","Polar","getSpan","Init","L","V","M","R","F","RD","G","S","WebGlRenderer","Debug"],"sources":["/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/math/MathUtil.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/math/Span.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/utils/WebGLUtil.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/utils/DomUtil.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/utils/ImgUtil.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/utils/Util.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/utils/Puid.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/core/Pool.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/debug/Stats.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/events/EventDispatcher.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/math/Integration.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/core/Proton.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/utils/Rgb.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/math/ease.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/math/Vector2D.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/core/Particle.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/utils/ColorUtil.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/math/Polar2D.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/math/Mat3.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/math/ArraySpan.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/math/Rectangle.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/initialize/Rate.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/initialize/Initialize.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/initialize/Life.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/zone/Zone.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/zone/PointZone.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/initialize/Position.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/initialize/Velocity.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/initialize/Mass.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/initialize/Radius.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/initialize/Body.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/behaviour/Behaviour.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/behaviour/Force.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/behaviour/Attraction.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/behaviour/RandomDrift.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/behaviour/Gravity.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/behaviour/Collision.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/behaviour/CrossZone.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/behaviour/Alpha.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/behaviour/Scale.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/behaviour/Rotate.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/behaviour/Color.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/behaviour/Cyclone.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/behaviour/Repulsion.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/behaviour/GravityWell.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/initialize/InitializeUtil.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/emitter/Emitter.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/emitter/BehaviourEmitter.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/emitter/FollowEmitter.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/render/BaseRenderer.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/render/CanvasRenderer.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/render/DomRenderer.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/render/EaselRenderer.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/render/PixelRenderer.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/render/PixiRenderer.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/utils/MStack.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/render/WebGLRenderer.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/render/CustomRenderer.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/zone/LineZone.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/zone/CircleZone.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/zone/RectZone.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/zone/ImageZone.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/debug/Debug.js","/workspace/smartBrain/smartBrain/node_modules/proton-engine/src/index.js"],"sourcesContent":["const PI = 3.1415926;\nconst INFINITY = Infinity;\n\nconst MathUtil = {\n  PI: PI,\n  PIx2: PI * 2,\n  PI_2: PI / 2,\n  PI_180: PI / 180,\n  N180_PI: 180 / PI,\n  Infinity: -999,\n\n  isInfinity(num) {\n    return num === this.Infinity || num === INFINITY;\n  },\n\n  randomAToB(a, b, isInt = false) {\n    if (!isInt) return a + Math.random() * (b - a);\n    else return Math.floor(Math.random() * (b - a)) + a;\n  },\n\n  randomFloating(center, f, isInt) {\n    return this.randomAToB(center - f, center + f, isInt);\n  },\n\n  randomColor() {\n    return (\n      \"#\" +\n      (\"00000\" + ((Math.random() * 0x1000000) << 0).toString(16)).slice(-6)\n    );\n  },\n\n  randomZone(display) {},\n\n  floor(num, k = 4) {\n    const digits = Math.pow(10, k);\n    return Math.floor(num * digits) / digits;\n  },\n\n  degreeTransform(a) {\n    return (a * PI) / 180;\n  },\n\n  toColor16(num) {\n    return `#${num.toString(16)}`;\n  }\n};\n\nexport default MathUtil;\n","import Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Span {\n  constructor(a, b, center) {\n    if (Util.isArray(a)) {\n      this.isArray = true;\n      this.a = a;\n    } else {\n      this.isArray = false;\n      this.a = Util.initValue(a, 1);\n      this.b = Util.initValue(b, this.a);\n      this.center = Util.initValue(center, false);\n    }\n  }\n\n  getValue(isInt = false) {\n    if (this.isArray) {\n      return Util.getRandFromArray(this.a);\n    } else {\n      if (!this.center) {\n        return MathUtil.randomAToB(this.a, this.b, isInt);\n      } else {\n        return MathUtil.randomFloating(this.a, this.b, isInt);\n      }\n    }\n  }\n\n  /**\n   * Returns a new Span object\n   *\n   * @memberof Proton#Proton.Util\n   * @method setSpanValue\n   *\n   * @todo a, b and c should be 'Mixed' or 'Number'?\n   *\n   * @param {Mixed | Span} a\n   * @param {Mixed}               b\n   * @param {Mixed}               c\n   *\n   * @return {Span}\n   */\n  static setSpanValue(a, b, c) {\n    if (a instanceof Span) {\n      return a;\n    } else {\n      if (b === undefined) {\n        return new Span(a);\n      } else {\n        if (c === undefined) return new Span(a, b);\n        else return new Span(a, b, c);\n      }\n    }\n  }\n\n  /**\n   * Returns the value from a Span, if the param is not a Span it will return the given parameter\n   *\n   * @memberof Proton#Proton.Util\n   * @method getValue\n   *\n   * @param {Mixed | Span} pan\n   *\n   * @return {Mixed} the value of Span OR the parameter if it is not a Span\n   */\n  static getSpanValue(pan) {\n    return pan instanceof Span ? pan.getValue() : pan;\n  }\n}\n","export default {\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method ipot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Boolean}\n   */\n  ipot(length) {\n    return (length & (length - 1)) === 0;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method nhpot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Number}\n   */\n  nhpot(length) {\n    --length;\n    for (let i = 1; i < 32; i <<= 1) {\n      length = length | (length >> i);\n    }\n\n    return length + 1;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeTranslation\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} tx either 0 or 1\n   * @param {Number} ty either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeTranslation(tx, ty) {\n    return [1, 0, 0, 0, 1, 0, tx, ty, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeRotation\n   *\n   * @todo add description\n   * @todo add return description\n   *\n   * @param {Number} angleInRadians\n   *\n   * @return {Object}\n   */\n  makeRotation(angleInRadians) {\n    let c = Math.cos(angleInRadians);\n    let s = Math.sin(angleInRadians);\n\n    return [c, -s, 0, s, c, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeScale\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} sx either 0 or 1\n   * @param {Number} sy either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeScale(sx, sy) {\n    return [sx, 0, 0, 0, sy, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method matrixMultiply\n   *\n   * @todo add description\n   * @todo add a, b description\n   * @todo add return description\n   *\n   * @param {Object} a\n   * @param {Object} b\n   *\n   * @return {Object}\n   */\n  matrixMultiply(a, b) {\n    let a00 = a[0 * 3 + 0];\n    let a01 = a[0 * 3 + 1];\n    let a02 = a[0 * 3 + 2];\n    let a10 = a[1 * 3 + 0];\n    let a11 = a[1 * 3 + 1];\n    let a12 = a[1 * 3 + 2];\n    let a20 = a[2 * 3 + 0];\n    let a21 = a[2 * 3 + 1];\n    let a22 = a[2 * 3 + 2];\n    let b00 = b[0 * 3 + 0];\n    let b01 = b[0 * 3 + 1];\n    let b02 = b[0 * 3 + 2];\n    let b10 = b[1 * 3 + 0];\n    let b11 = b[1 * 3 + 1];\n    let b12 = b[1 * 3 + 2];\n    let b20 = b[2 * 3 + 0];\n    let b21 = b[2 * 3 + 1];\n    let b22 = b[2 * 3 + 2];\n\n    return [\n      a00 * b00 + a01 * b10 + a02 * b20,\n      a00 * b01 + a01 * b11 + a02 * b21,\n      a00 * b02 + a01 * b12 + a02 * b22,\n      a10 * b00 + a11 * b10 + a12 * b20,\n      a10 * b01 + a11 * b11 + a12 * b21,\n      a10 * b02 + a11 * b12 + a12 * b22,\n      a20 * b00 + a21 * b10 + a22 * b20,\n      a20 * b01 + a21 * b11 + a22 * b21,\n      a20 * b02 + a21 * b12 + a22 * b22\n    ];\n  }\n};\n","export default {\n  /**\n   * Creates and returns a new canvas. The opacity is by default set to 0\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method createCanvas\n   *\n   * @param {String} $id the canvas' id\n   * @param {Number} $width the canvas' width\n   * @param {Number} $height the canvas' height\n   * @param {String} [$position=absolute] the canvas' position, default is 'absolute'\n   *\n   * @return {Object}\n   */\n  createCanvas(id, width, height, position = \"absolute\") {\n    const dom = document.createElement(\"canvas\");\n\n    dom.id = id;\n    dom.width = width;\n    dom.height = height;\n    dom.style.opacity = 0;\n    dom.style.position = position;\n    this.transform(dom, -500, -500, 0, 0);\n\n    return dom;\n  },\n\n  createDiv(id, width, height) {\n    const dom = document.createElement(\"div\");\n\n    dom.id = id;\n    dom.style.position = \"absolute\";\n    this.resize(dom, width, height);\n\n    return dom;\n  },\n\n  resize(dom, width, height) {\n    dom.style.width = width + \"px\";\n    dom.style.height = height + \"px\";\n    dom.style.marginLeft = -width / 2 + \"px\";\n    dom.style.marginTop = -height / 2 + \"px\";\n  },\n\n  /**\n   * Adds a transform: translate(), scale(), rotate() to a given div dom for all browsers\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method transform\n   *\n   * @param {HTMLDivElement} div\n   * @param {Number} $x\n   * @param {Number} $y\n   * @param {Number} $scale\n   * @param {Number} $rotate\n   */\n  transform(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate(${x}px, ${y}px) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"transform\", transform);\n  },\n\n  transform3d(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate3d(${x}px, ${y}px, 0) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"backfaceVisibility\", \"hidden\");\n    this.css3(div, \"transform\", transform);\n  },\n\n  css3(div, key, val) {\n    const bkey = key.charAt(0).toUpperCase() + key.substr(1);\n\n    div.style[`Webkit${bkey}`] = val;\n    div.style[`Moz${bkey}`] = val;\n    div.style[`O${bkey}`] = val;\n    div.style[`ms${bkey}`] = val;\n    div.style[`${key}`] = val;\n  }\n};\n","import WebGLUtil from \"./WebGLUtil\";\nimport DomUtil from \"./DomUtil\";\n\nconst imgsCache = {};\nconst canvasCache = {};\nlet canvasId = 0;\n\nexport default {\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    context.drawImage(image, rect.x, rect.y);\n    const imagedata = context.getImageData(\n      rect.x,\n      rect.y,\n      rect.width,\n      rect.height\n    );\n    context.clearRect(rect.x, rect.y, rect.width, rect.height);\n\n    return imagedata;\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method getImgFromCache\n   *\n   * @todo add description\n   * @todo describe func\n   *\n   * @param {Mixed}               img\n   * @param {Proton.Particle}     particle\n   * @param {Boolean}             drawCanvas  set to true if a canvas should be saved into particle.data.canvas\n   * @param {Boolean}             func\n   */\n  getImgFromCache(img, callback, param) {\n    const src = typeof img === \"string\" ? img : img.src;\n\n    if (imgsCache[src]) {\n      callback(imgsCache[src], param);\n    } else {\n      const image = new Image();\n      image.onload = e => {\n        imgsCache[src] = e.target;\n        callback(imgsCache[src], param);\n      };\n\n      image.src = src;\n    }\n  },\n\n  getCanvasFromCache(img, callback, param) {\n    const src = img.src;\n\n    if (!canvasCache[src]) {\n      const width = WebGLUtil.nhpot(img.width);\n      const height = WebGLUtil.nhpot(img.height);\n\n      const canvas = DomUtil.createCanvas(\n        `proton_canvas_cache_${++canvasId}`,\n        width,\n        height\n      );\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(img, 0, 0, img.width, img.height);\n\n      canvasCache[src] = canvas;\n    }\n\n    callback && callback(canvasCache[src], param);\n\n    return canvasCache[src];\n  }\n};\n","import Span from \"../math/Span\";\nimport ImgUtil from \"./ImgUtil\";\n\nexport default {\n  /**\n   * Returns the default if the value is null or undefined\n   *\n   * @memberof Proton#Proton.Util\n   * @method initValue\n   *\n   * @param {Mixed} value a specific value, could be everything but null or undefined\n   * @param {Mixed} defaults the default if the value is null or undefined\n   */\n  initValue(value, defaults) {\n    value = value !== null && value !== undefined ? value : defaults;\n    return value;\n  },\n\n  /**\n   * Checks if the value is a valid array\n   *\n   * @memberof Proton#Proton.Util\n   * @method isArray\n   *\n   * @param {Array} value Any array\n   *\n   * @returns {Boolean}\n   */\n  isArray(value) {\n    return Object.prototype.toString.call(value) === \"[object Array]\";\n  },\n\n  /**\n   * Destroyes the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyArray\n   *\n   * @param {Array} array Any array\n   */\n  emptyArray(arr) {\n    if (arr) arr.length = 0;\n  },\n\n  toArray(arr) {\n    return this.isArray(arr) ? arr : [arr];\n  },\n\n  getRandFromArray(arr) {\n    if (!arr) return null;\n    return arr[Math.floor(arr.length * Math.random())];\n  },\n\n  /**\n   * Destroyes the given object\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyObject\n   *\n   * @param {Object} obj Any object\n   */\n  emptyObject(obj, ignore = null) {\n    for (let key in obj) {\n      if (ignore && ignore.indexOf(key) > -1) continue;\n      delete obj[key];\n    }\n  },\n\n  /**\n   * Makes an instance of a class and binds the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method classApply\n   *\n   * @param {Function} constructor A class to make an instance from\n   * @param {Array} [args] Any array to bind it to the constructor\n   *\n   * @return {Object} The instance of constructor, optionally bind with args\n   */\n  classApply(constructor, args = null) {\n    if (!args) {\n      return new constructor();\n    } else {\n      const FactoryFunc = constructor.bind.apply(\n        constructor,\n        [null].concat(args)\n      );\n      return new FactoryFunc();\n    }\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method setVectorVal\n   *\n   * @todo add description for param `target`\n   * @todo add description for param `conf`\n   * @todo add description for function\n   *\n   * @param {Object} target\n   * @param {Object} conf\n   */\n  setVectorVal(particle, conf = null) {\n    if (!conf) return;\n\n    if (this.hasProp(conf, \"x\")) particle.p.x = conf[\"x\"];\n    if (this.hasProp(conf, \"y\")) particle.p.y = conf[\"y\"];\n\n    if (this.hasProp(conf, \"vx\")) particle.v.x = conf[\"vx\"];\n    if (this.hasProp(conf, \"vy\")) particle.v.y = conf[\"vy\"];\n\n    if (this.hasProp(conf, \"ax\")) particle.a.x = conf[\"ax\"];\n    if (this.hasProp(conf, \"ay\")) particle.a.y = conf[\"ay\"];\n\n    if (this.hasProp(conf, \"p\")) particle.p.copy(conf[\"p\"]);\n    if (this.hasProp(conf, \"v\")) particle.v.copy(conf[\"v\"]);\n    if (this.hasProp(conf, \"a\")) particle.a.copy(conf[\"a\"]);\n\n    if (this.hasProp(conf, \"position\")) particle.p.copy(conf[\"position\"]);\n    if (this.hasProp(conf, \"velocity\")) particle.v.copy(conf[\"velocity\"]);\n    if (this.hasProp(conf, \"accelerate\")) particle.a.copy(conf[\"accelerate\"]);\n  },\n\n  hasProp(target, key) {\n    if (!target) return false;\n    return target[key] !== undefined;\n    // return obj.hasOwnProperty(key);\n  },\n\n  /**\n   * set the prototype in a given prototypeObject\n   *\n   * @memberof Proton#Proton.Util\n   * @method setProp\n   *\n   * @todo add description for param `target`\n   * @todo translate desription from chinese to english\n   *\n   * @param {Object} target\n   * @param {Object} prototypeObject An object of single prototypes\n   *\n   * @return {Object} target\n   */\n  setProp(target, props) {\n    for (let prop in props) {\n      if (target.hasOwnProperty(prop)) {\n        target[prop] = Span.getSpanValue(props[prop]);\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    return ImgUtil.getImageData(context, image, rect);\n  },\n\n  destroyAll(arr, param = null) {\n    let i = arr.length;\n\n    while (i--) {\n      try {\n        arr[i].destroy(param);\n      } catch (e) {}\n\n      delete arr[i];\n    }\n\n    arr.length = 0;\n  },\n\n  assign(target, source) {\n    if (typeof Object.assign !== \"function\") {\n      for (let key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n\n      return target;\n    } else {\n      return Object.assign(target, source);\n    }\n  }\n};\n","const idsMap = {};\n\nconst Puid = {\n  _index: 0,\n  _cache: {},\n\n  id(type) {\n    if (idsMap[type] === undefined || idsMap[type] === null) idsMap[type] = 0;\n    return `${type}_${idsMap[type]++}`;\n  },\n\n  getId(target) {\n    let uid = this.getIdFromCache(target);\n    if (uid) return uid;\n\n    uid = `PUID_${this._index++}`;\n    this._cache[uid] = target;\n\n    return uid;\n  },\n\n  getIdFromCache(target) {\n    let obj, id;\n\n    for (id in this._cache) {\n      obj = this._cache[id];\n\n      if (obj === target) return id;\n      if (this.isBody(obj, target) && obj.src === target.src) return id;\n    }\n\n    return null;\n  },\n\n  isBody(obj, target) {\n    return (\n      typeof obj === \"object\" &&\n      typeof target === \"object\" &&\n      obj.isInner &&\n      target.isInner\n    );\n  },\n\n  getTarget(uid) {\n    return this._cache[uid];\n  }\n};\n\nexport default Puid;\n","/**\n * Pool is the cache pool of the proton engine, it is very important.\n *\n * get(target, params, uid)\n *  Class\n *    uid = Puid.getId -> Puid save target cache\n *    target.__puid = uid\n *\n *  body\n *    uid = Puid.getId -> Puid save target cache\n *\n *\n * expire(target)\n *  cache[target.__puid] push target\n *\n */\nimport Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\n\nexport default class Pool {\n  /**\n   * @memberof! Proton#\n   * @constructor\n   * @alias Proton.Pool\n   *\n   * @todo add description\n   * @todo add description of properties\n   *\n   * @property {Number} total\n   * @property {Object} cache\n   */\n  constructor(num) {\n    this.total = 0;\n    this.cache = {};\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method get\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  get(target, params, uid) {\n    let p;\n    uid = uid || target.__puid || Puid.getId(target);\n\n    if (this.cache[uid] && this.cache[uid].length > 0) {\n      p = this.cache[uid].pop();\n    } else {\n      p = this.createOrClone(target, params);\n    }\n\n    p.__puid = target.__puid || uid;\n    return p;\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method set\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object} target\n   *\n   * @return {Object}\n   */\n  expire(target) {\n    return this.getCache(target.__puid).push(target);\n  }\n\n  /**\n   * Creates a new class instance\n   *\n   * @todo add more documentation\n   *\n   * @method create\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target any Object or Function\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  createOrClone(target, params) {\n    this.total++;\n\n    if (this.create) {\n      return this.create(target, params);\n    } else if (typeof target === \"function\") {\n      return Util.classApply(target, params);\n    } else {\n      return target.clone();\n    }\n  }\n\n  /**\n   * @todo add description - what is in the cache?\n   *\n   * @method getCount\n   * @memberof Proton#Proton.Pool\n   *\n   * @return {Number}\n   */\n  getCount() {\n    let count = 0;\n    for (let id in this.cache) count += this.cache[id].length;\n    return count++;\n  }\n\n  /**\n   * Destroyes all items from Pool.cache\n   *\n   * @method destroy\n   * @memberof Proton#Proton.Pool\n   */\n  destroy() {\n    for (let id in this.cache) {\n      this.cache[id].length = 0;\n      delete this.cache[id];\n    }\n  }\n\n  /**\n   * Returns Pool.cache\n   *\n   * @method getCache\n   * @memberof Proton#Proton.Pool\n   * @private\n   *\n   * @param {Number} uid the unique id\n   *\n   * @return {Object}\n   */\n  getCache(uid = \"default\") {\n    if (!this.cache[uid]) this.cache[uid] = [];\n    return this.cache[uid];\n  }\n}\n","export default class Stats {\n  constructor(proton) {\n    this.proton = proton;\n    this.container = null;\n    this.type = 1;\n\n    this.emitterIndex = 0;\n    this.rendererIndex = 0;\n  }\n\n  update(style, body) {\n    this.add(style, body);\n\n    const emitter = this.getEmitter();\n    const renderer = this.getRenderer();\n    let str = \"\";\n\n    switch (this.type) {\n      case 2:\n        str += \"emitter:\" + this.proton.emitters.length + \"<br>\";\n        if (emitter) str += \"em speed:\" + emitter.emitSpeed + \"<br>\";\n        if (emitter) str += \"pos:\" + this.getEmitterPos(emitter);\n        break;\n\n      case 3:\n        if (emitter)\n          str += \"initializes:\" + emitter.initializes.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.initializes) +\n            \"</span><br>\";\n        if (emitter) str += \"behaviours:\" + emitter.behaviours.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.behaviours) +\n            \"</span><br>\";\n        break;\n\n      case 4:\n        if (renderer) str += renderer.name + \"<br>\";\n        if (renderer) str += \"body:\" + this.getCreatedNumber(renderer) + \"<br>\";\n        break;\n\n      default:\n        str += \"particles:\" + this.proton.getCount() + \"<br>\";\n        str += \"pool:\" + this.proton.pool.getCount() + \"<br>\";\n        str += \"total:\" + this.proton.pool.total;\n    }\n\n    this.container.innerHTML = str;\n  }\n\n  add(style, body) {\n    if (!this.container) {\n      this.type = 1;\n\n      this.container = document.createElement(\"div\");\n      this.container.style.cssText = [\n        \"position:absolute;bottom:0px;left:0;cursor:pointer;\",\n        \"opacity:0.9;z-index:10000;padding:10px;font-size:12px;font-family:Helvetica,Arial,sans-serif;\",\n        \"width:120px;height:50px;background-color:#002;color:#0ff;\"\n      ].join(\"\");\n\n      this.container.addEventListener(\n        \"click\",\n        e => {\n          this.type++;\n          if (this.type > 4) this.type = 1;\n        },\n        false\n      );\n\n      let bg, color;\n      switch (style) {\n        case 2:\n          bg = \"#201\";\n          color = \"#f08\";\n          break;\n\n        case 3:\n          bg = \"#020\";\n          color = \"#0f0\";\n          break;\n\n        default:\n          bg = \"#002\";\n          color = \"#0ff\";\n      }\n\n      this.container.style[\"background-color\"] = bg;\n      this.container.style[\"color\"] = color;\n    }\n\n    if (!this.container.parentNode) {\n      body = body || this.body || document.body;\n      body.appendChild(this.container);\n    }\n  }\n\n  getEmitter() {\n    return this.proton.emitters[this.emitterIndex];\n  }\n\n  getRenderer() {\n    return this.proton.renderers[this.rendererIndex];\n  }\n\n  concatArr(arr) {\n    let result = \"\";\n    if (!arr || !arr.length) return result;\n\n    for (let i = 0; i < arr.length; i++) {\n      result += (arr[i].name || \"\").substr(0, 1) + \".\";\n    }\n\n    return result;\n  }\n\n  getCreatedNumber(renderer) {\n    return renderer.pool.total || (renderer.cpool && renderer.cpool.total) || 0;\n  }\n\n  getEmitterPos(e) {\n    return Math.round(e.p.x) + \",\" + Math.round(e.p.y);\n  }\n}\n","/*\n * EventDispatcher\n * This code reference since http://createjs.com/.\n *\n **/\n\nexport default class EventDispatcher {\n  constructor() {\n    this._listeners = null;\n  }\n\n  static bind(target) {\n    target.prototype.dispatchEvent = EventDispatcher.prototype.dispatchEvent;\n\n    target.prototype.hasEventListener =\n      EventDispatcher.prototype.hasEventListener;\n\n    target.prototype.addEventListener =\n      EventDispatcher.prototype.addEventListener;\n\n    target.prototype.removeEventListener =\n      EventDispatcher.prototype.removeEventListener;\n\n    target.prototype.removeAllEventListeners =\n      EventDispatcher.prototype.removeAllEventListeners;\n  }\n\n  addEventListener(type, listener) {\n    if (!this._listeners) {\n      this._listeners = {};\n    } else {\n      this.removeEventListener(type, listener);\n    }\n\n    if (!this._listeners[type]) this._listeners[type] = [];\n    this._listeners[type].push(listener);\n\n    return listener;\n  }\n\n  removeEventListener(type, listener) {\n    if (!this._listeners) return;\n    if (!this._listeners[type]) return;\n\n    const arr = this._listeners[type];\n    const length = arr.length;\n\n    for (let i = 0; i < length; i++) {\n      if (arr[i] === listener) {\n        if (length === 1) {\n          delete this._listeners[type];\n        }\n\n        // allows for faster checks.\n        else {\n          arr.splice(i, 1);\n        }\n\n        break;\n      }\n    }\n  }\n\n  removeAllEventListeners(type) {\n    if (!type) this._listeners = null;\n    else if (this._listeners) delete this._listeners[type];\n  }\n\n  dispatchEvent(type, args) {\n    let result = false;\n    const listeners = this._listeners;\n\n    if (type && listeners) {\n      let arr = listeners[type];\n      if (!arr) return result;\n\n      // arr = arr.slice();\n      // to avoid issues with items being removed or added during the dispatch\n\n      let handler;\n      let i = arr.length;\n      while (i--) {\n        handler = arr[i];\n        result = result || handler(args);\n      }\n    }\n\n    return !!result;\n  }\n\n  hasEventListener(type) {\n    const listeners = this._listeners;\n    return !!(listeners && listeners[type]);\n  }\n}\n","export default class Integration {\n  constructor(type) {\n    this.type = type;\n  }\n\n  calculate(particles, time, damping) {\n    this.eulerIntegrate(particles, time, damping);\n  }\n\n  // Euler Integrate\n  // https://rosettacode.org/wiki/Euler_method\n  eulerIntegrate(particle, time, damping) {\n    if (!particle.sleep) {\n      particle.old.p.copy(particle.p);\n      particle.old.v.copy(particle.v);\n\n      particle.a.multiplyScalar(1 / particle.mass);\n      particle.v.add(particle.a.multiplyScalar(time));\n      particle.p.add(particle.old.v.multiplyScalar(time));\n\n      if (damping) particle.v.multiplyScalar(damping);\n\n      particle.a.clear();\n    }\n  }\n}\n","import Pool from \"./Pool\";\nimport Util from \"../utils/Util\";\nimport Stats from \"../debug/Stats\";\nimport EventDispatcher from \"../events/EventDispatcher\";\nimport MathUtil from \"../math/MathUtil\";\nimport Integration from \"../math/Integration\";\n\nexport default class Proton {\n  static USE_CLOCK = false;\n\n  // measure 1:100\n  static MEASURE = 100;\n  static EULER = \"euler\";\n  static RK2 = \"runge-kutta2\";\n\n  // event name\n  static PARTICLE_CREATED = \"PARTICLE_CREATED\";\n  static PARTICLE_UPDATE = \"PARTICLE_UPDATE\";\n  static PARTICLE_SLEEP = \"PARTICLE_SLEEP\";\n  static PARTICLE_DEAD = \"PARTICLE_DEAD\";\n\n  static EMITTER_ADDED = \"EMITTER_ADDED\";\n  static EMITTER_REMOVED = \"EMITTER_REMOVED\";\n\n  static PROTON_UPDATE = \"PROTON_UPDATE\";\n  static PROTON_UPDATE_AFTER = \"PROTON_UPDATE_AFTER\";\n  static DEFAULT_INTERVAL = 0.0167;\n\n  static amendChangeTabsBug = true;\n\n  /**\n   * The constructor to add emitters\n   *\n   * @constructor Proton\n   *\n   * @todo proParticleCount is not in use\n   * @todo add more documentation of the single properties and parameters\n   *\n   * @param {Number} [proParticleCount] not in use?\n   * @param {Number} [integrationType=Proton.EULER]\n   *\n   * @property {String} [integrationType=Proton.EULER]\n   * @property {Array} emitters   All added emitter\n   * @property {Array} renderers  All added renderer\n   * @property {Number} time      The active time\n   * @property {Number} oldtime   The old time\n   */\n  constructor(integrationType) {\n    this.emitters = [];\n    this.renderers = [];\n\n    this.time = 0;\n    this.now = 0;\n    this.then = 0;\n    this.elapsed = 0;\n\n    this.stats = new Stats(this);\n    this.pool = new Pool(80);\n\n    this.integrationType = Util.initValue(integrationType, Proton.EULER);\n    this.integrator = new Integration(this.integrationType);\n\n    this._fps = \"auto\";\n    this._interval = Proton.DEFAULT_INTERVAL;\n  }\n\n  set fps(fps) {\n    this._fps = fps;\n    this._interval =\n      fps === \"auto\" ? Proton.DEFAULT_INTERVAL : MathUtil.floor(1 / fps, 7);\n  }\n\n  get fps() {\n    return this._fps;\n  }\n\n  /**\n   * add a type of Renderer\n   *\n   * @method addRenderer\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Renderer} render\n   */\n  addRenderer(render) {\n    render.init(this);\n    this.renderers.push(render);\n  }\n\n  /**\n   * @name add a type of Renderer\n   *\n   * @method addRenderer\n   * @param {Renderer} render\n   */\n  removeRenderer(render) {\n    const index = this.renderers.indexOf(render);\n    this.renderers.splice(index, 1);\n    render.remove(this);\n  }\n\n  /**\n   * add the Emitter\n   *\n   * @method addEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Emitter} emitter\n   */\n  addEmitter(emitter) {\n    this.emitters.push(emitter);\n    emitter.parent = this;\n\n    this.dispatchEvent(Proton.EMITTER_ADDED, emitter);\n  }\n\n  /**\n   * Removes an Emitter\n   *\n   * @method removeEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Proton.Emitter} emitter\n   */\n  removeEmitter(emitter) {\n    const index = this.emitters.indexOf(emitter);\n    this.emitters.splice(index, 1);\n    emitter.parent = null;\n\n    this.dispatchEvent(Proton.EMITTER_REMOVED, emitter);\n  }\n\n  /**\n   * Updates all added emitters\n   *\n   * @method update\n   * @memberof Proton\n   * @instance\n   */\n  update() {\n    // 'auto' is the default browser refresh rate, the vast majority is 60fps\n    if (this._fps === \"auto\") {\n      this.dispatchEvent(Proton.PROTON_UPDATE);\n\n      if (Proton.USE_CLOCK) {\n        if (!this.then) this.then = new Date().getTime();\n        this.now = new Date().getTime();\n        this.elapsed = (this.now - this.then) * 0.001;\n        // Fix bugs such as chrome browser switching tabs causing excessive time difference\n        this.amendChangeTabsBug();\n\n        if (this.elapsed > 0) this.emittersUpdate(this.elapsed);\n        this.then = this.now;\n      } else {\n        this.emittersUpdate(Proton.DEFAULT_INTERVAL);\n      }\n\n      this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n    }\n\n    // If the fps frame rate is set\n    else {\n      if (!this.then) this.then = new Date().getTime();\n      this.now = new Date().getTime();\n      this.elapsed = (this.now - this.then) * 0.001;\n\n      if (this.elapsed > this._interval) {\n        this.dispatchEvent(Proton.PROTON_UPDATE);\n        this.emittersUpdate(this._interval);\n        // https://stackoverflow.com/questions/19764018/controlling-fps-with-requestanimationframe\n        this.then = this.now - (this.elapsed % this._interval) * 1000;\n        this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n      }\n    }\n  }\n\n  emittersUpdate(elapsed) {\n    let i = this.emitters.length;\n    while (i--) this.emitters[i].update(elapsed);\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method amendChangeTabsBug\n   * @memberof Proton\n   * @instance\n   */\n  amendChangeTabsBug() {\n    if (!Proton.amendChangeTabsBug) return;\n    if (this.elapsed > 0.5) {\n      this.then = new Date().getTime();\n      this.elapsed = 0;\n    }\n  }\n\n  /**\n   * Counts all particles from all emitters\n   *\n   * @method getCount\n   * @memberof Proton\n   * @instance\n   */\n  getCount() {\n    let total = 0;\n    let i = this.emitters.length;\n\n    while (i--) total += this.emitters[i].particles.length;\n    return total;\n  }\n\n  getAllParticles() {\n    let particles = [];\n    let i = this.emitters.length;\n\n    while (i--) particles = particles.concat(this.emitters[i].particles);\n    return particles;\n  }\n\n  destroyAllEmitters() {\n    Util.destroyAll(this.emitters);\n  }\n\n  /**\n   * Destroys everything related to this Proton instance. This includes all emitters, and all properties\n   *\n   * @method destroy\n   * @memberof Proton\n   * @instance\n   */\n  destroy(remove = false) {\n    const destroyOther = () => {\n      this.time = 0;\n      this.then = 0;\n      this.pool.destroy();\n\n      Util.destroyAll(this.emitters);\n      Util.destroyAll(this.renderers, this.getAllParticles());\n    };\n\n    if (remove) {\n      setTimeout(destroyOther, 200);\n    } else {\n      destroyOther();\n    }\n  }\n}\n\nEventDispatcher.bind(Proton);\n","export default class Rgb {\n  constructor(r = 255, g = 255, b = 255) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  reset() {\n    this.r = 255;\n    this.g = 255;\n    this.b = 255;\n  }\n}\n","import MathUtil from \"./MathUtil\";\n\nexport default {\n  easeLinear(value) {\n    return value;\n  },\n\n  easeInQuad(value) {\n    return Math.pow(value, 2);\n  },\n\n  easeOutQuad(value) {\n    return -(Math.pow(value - 1, 2) - 1);\n  },\n\n  easeInOutQuad(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 2);\n\n    return -0.5 * ((value -= 2) * value - 2);\n  },\n\n  easeInCubic(value) {\n    return Math.pow(value, 3);\n  },\n\n  easeOutCubic(value) {\n    return Math.pow(value - 1, 3) + 1;\n  },\n\n  easeInOutCubic(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 3);\n\n    return 0.5 * (Math.pow(value - 2, 3) + 2);\n  },\n\n  easeInQuart(value) {\n    return Math.pow(value, 4);\n  },\n\n  easeOutQuart(value) {\n    return -(Math.pow(value - 1, 4) - 1);\n  },\n\n  easeInOutQuart(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 4);\n\n    return -0.5 * ((value -= 2) * Math.pow(value, 3) - 2);\n  },\n\n  easeInSine(value) {\n    return -Math.cos(value * MathUtil.PI_2) + 1;\n  },\n\n  easeOutSine(value) {\n    return Math.sin(value * MathUtil.PI_2);\n  },\n\n  easeInOutSine(value) {\n    return -0.5 * (Math.cos(Math.PI * value) - 1);\n  },\n\n  easeInExpo(value) {\n    return value === 0 ? 0 : Math.pow(2, 10 * (value - 1));\n  },\n\n  easeOutExpo(value) {\n    return value === 1 ? 1 : -Math.pow(2, -10 * value) + 1;\n  },\n\n  easeInOutExpo(value) {\n    if (value === 0) return 0;\n\n    if (value === 1) return 1;\n\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(2, 10 * (value - 1));\n\n    return 0.5 * (-Math.pow(2, -10 * --value) + 2);\n  },\n\n  easeInCirc(value) {\n    return -(Math.sqrt(1 - value * value) - 1);\n  },\n\n  easeOutCirc(value) {\n    return Math.sqrt(1 - Math.pow(value - 1, 2));\n  },\n\n  easeInOutCirc(value) {\n    if ((value /= 0.5) < 1) return -0.5 * (Math.sqrt(1 - value * value) - 1);\n    return 0.5 * (Math.sqrt(1 - (value -= 2) * value) + 1);\n  },\n\n  easeInBack(value) {\n    let s = 1.70158;\n    return value * value * ((s + 1) * value - s);\n  },\n\n  easeOutBack(value) {\n    let s = 1.70158;\n    return (value = value - 1) * value * ((s + 1) * value + s) + 1;\n  },\n\n  easeInOutBack(value) {\n    let s = 1.70158;\n    if ((value /= 0.5) < 1)\n      return 0.5 * (value * value * (((s *= 1.525) + 1) * value - s));\n    return 0.5 * ((value -= 2) * value * (((s *= 1.525) + 1) * value + s) + 2);\n  },\n\n  getEasing(ease) {\n    if (typeof ease === \"function\") return ease;\n    else return this[ease] || this.easeLinear;\n  }\n};\n","import MathUtil from \"../math/MathUtil\";\n\nexport default class Vector2D {\n  constructor(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  getGradient() {\n    if (this.x !== 0) return Math.atan2(this.y, this.x);\n    else if (this.y > 0) return MathUtil.PI_2;\n    else if (this.y < 0) return -MathUtil.PI_2;\n  }\n\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n\n    return this;\n  }\n\n  add(v, w) {\n    if (w !== undefined) {\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n\n    return this;\n  }\n\n  addXY(a, b) {\n    this.x += a;\n    this.y += b;\n\n    return this;\n  }\n\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n\n    return this;\n  }\n\n  sub(v, w) {\n    if (w !== undefined) {\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n\n    return this;\n  }\n\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n\n    return this;\n  }\n\n  divideScalar(s) {\n    if (s !== 0) {\n      this.x /= s;\n      this.y /= s;\n    } else {\n      this.set(0, 0);\n    }\n\n    return this;\n  }\n\n  multiplyScalar(s) {\n    this.x *= s;\n    this.y *= s;\n\n    return this;\n  }\n\n  negate() {\n    return this.multiplyScalar(-1);\n  }\n\n  dot(v) {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  lengthSq() {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize() {\n    return this.divideScalar(this.length());\n  }\n\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  rotate(tha) {\n    const x = this.x;\n    const y = this.y;\n\n    this.x = x * Math.cos(tha) + y * Math.sin(tha);\n    this.y = -x * Math.sin(tha) + y * Math.cos(tha);\n\n    return this;\n  }\n\n  distanceToSquared(v) {\n    const dx = this.x - v.x;\n    const dy = this.y - v.y;\n\n    return dx * dx + dy * dy;\n  }\n\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n\n    return this;\n  }\n\n  equals(v) {\n    return v.x === this.x && v.y === this.y;\n  }\n\n  clear() {\n    this.x = 0.0;\n    this.y = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Vector2D(this.x, this.y);\n  }\n}\n","/** @typedef {import('../behaviour/Behaviour')} Behaviour */\n/** @typedef {import('../math/Vector2D')} Vector2D */\n/** @typedef {import('../utils/Rgb')} Rgb */\nimport Rgb from \"../utils/Rgb\";\nimport Puid from \"../utils/Puid\";\nimport Util from \"../utils/Util\";\nimport ease from \"../math/ease\";\nimport Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Particle {\n  /** @type string */\n  id = ''\n\n  /** @type {{p:Vector2D,v:Vector2D,a:Vector2D}} */\n  old = {}\n\n  /** @type {object} */\n  data = {}\n\n  /** @type {Behaviour[]} */\n  behaviours = []\n\n  /** @type {Vector2D} */\n  p = []\n\n  /** @type {Vector2D} */\n  v = []\n\n  /** @type {Vector2D} */\n  a = []\n\n  /** @type {Rgb} */\n  rgb = {}\n\n  /**\n   * the Particle class\n   *\n   * @class Proton.Particle\n   * @constructor\n   * @param {Object} pObj the parameters object;\n   * for example {life:3,dead:false}\n   */\n  constructor(conf) {\n    /**\n     * The particle's id;\n     * @property id\n     * @type {string}\n     */\n    this.name = \"Particle\";\n    this.id = Puid.id(this.name);\n    this.old = {};\n    this.data = {};\n    this.behaviours = [];\n\n    this.p = new Vector2D();\n    this.v = new Vector2D();\n    this.a = new Vector2D();\n    this.old.p = new Vector2D();\n    this.old.v = new Vector2D();\n    this.old.a = new Vector2D();\n\n    this.rgb = new Rgb();\n    this.reset();\n    conf && Util.setProp(this, conf);\n  }\n\n  getDirection() {\n    return Math.atan2(this.v.x, -this.v.y) * MathUtil.N180_PI;\n  }\n\n  reset() {\n    this.life = Infinity;\n    this.age = 0;\n\n    this.dead = false;\n    this.sleep = false;\n    this.body = null;\n    this.sprite = null;\n    this.parent = null;\n\n    this.energy = 1; // Energy Loss\n    this.mass = 1;\n    this.radius = 10;\n    this.alpha = 1;\n    this.scale = 1;\n    this.rotation = 0;\n    this.color = null;\n\n    this.p.set(0, 0);\n    this.v.set(0, 0);\n    this.a.set(0, 0);\n    this.old.p.set(0, 0);\n    this.old.v.set(0, 0);\n    this.old.a.set(0, 0);\n    this.easing = ease.easeLinear;\n\n    this.rgb.reset();\n    Util.emptyObject(this.data);\n    this.removeAllBehaviours();\n\n    return this;\n  }\n\n  update(time, index) {\n    if (!this.sleep) {\n      this.age += time;\n      this.applyBehaviours(time, index);\n    }\n\n    if (this.age < this.life) {\n      const scale = this.easing(this.age / this.life);\n      this.energy = Math.max(1 - scale, 0);\n    } else {\n      this.destroy();\n    }\n  }\n\n  applyBehaviours(time, index) {\n    const length = this.behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.behaviours[i] &&\n        this.behaviours[i].applyBehaviour(this, time, index);\n    }\n  }\n\n  /**\n   * @param {Behaviour} behaviour\n   */\n  addBehaviour(behaviour) {\n    this.behaviours.push(behaviour);\n\n    if (behaviour.hasOwnProperty(\"parents\")) behaviour.parents.push(this);\n    behaviour.initialize(this);\n  }\n\n  /**\n   * @param {Behaviour[]} behaviours\n   */\n  addBehaviours(behaviours) {\n    const length = behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.addBehaviour(behaviours[i]);\n    }\n  }\n\n  removeBehaviour(behaviour) {\n    const index = this.behaviours.indexOf(behaviour);\n\n    if (index > -1) {\n      const behaviour = this.behaviours.splice(index, 1);\n      behaviour.parents = null;\n    }\n  }\n\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  /**\n   * Destory this particle\n   * @method destroy\n   */\n  destroy() {\n    this.removeAllBehaviours();\n    this.energy = 0;\n    this.dead = true;\n    this.parent = null;\n  }\n}\n","export default {\n  /**\n   * @typedef  {Object} rgbObject\n   * @property {Number} r red value\n   * @property {Number} g green value\n   * @property {Number} b blue value\n   */\n  /**\n   * converts a hex value to a rgb object\n   *\n   * @memberof Proton#Proton.Util\n   * @method hexToRgb\n   *\n   * @param {String} h any hex value, e.g. #000000 or 000000 for black\n   *\n   * @return {rgbObject}\n   */\n  hexToRgb(h) {\n    const hex16 = h.charAt(0) === \"#\" ? h.substring(1, 7) : h;\n    const r = parseInt(hex16.substring(0, 2), 16);\n    const g = parseInt(hex16.substring(2, 4), 16);\n    const b = parseInt(hex16.substring(4, 6), 16);\n\n    return { r, g, b };\n  },\n\n  /**\n   * converts a rgb value to a rgb string\n   *\n   * @memberof Proton#Proton.Util\n   * @method rgbToHex\n   *\n   * @param {Object | Proton.hexToRgb} rgb a rgb object like in {@link Proton#Proton.}\n   *\n   * @return {String} rgb()\n   */\n  rgbToHex(rbg) {\n    return `rgb(${rbg.r}, ${rbg.g}, ${rbg.b})`;\n  },\n\n  getHex16FromParticle(p) {\n    return Number(p.rgb.r) * 65536 + Number(p.rgb.g) * 256 + Number(p.rgb.b);\n  }\n};\n","import Vector2D from \"./Vector2D\";\n\nexport default class Polar2D {\n  constructor(r, tha) {\n    this.r = Math.abs(r) || 0;\n    this.tha = tha || 0;\n  }\n\n  set(r, tha) {\n    this.r = r;\n    this.tha = tha;\n    return this;\n  }\n\n  setR(r) {\n    this.r = r;\n    return this;\n  }\n\n  setTha(tha) {\n    this.tha = tha;\n    return this;\n  }\n\n  copy(p) {\n    this.r = p.r;\n    this.tha = p.tha;\n    return this;\n  }\n\n  toVector() {\n    return new Vector2D(this.getX(), this.getY());\n  }\n\n  getX() {\n    return this.r * Math.sin(this.tha);\n  }\n\n  getY() {\n    return -this.r * Math.cos(this.tha);\n  }\n\n  normalize() {\n    this.r = 1;\n    return this;\n  }\n\n  equals(v) {\n    return v.r === this.r && v.tha === this.tha;\n  }\n\n  clear() {\n    this.r = 0.0;\n    this.tha = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Polar2D(this.r, this.tha);\n  }\n}\n","const Mat3 = {\n  create(mat3) {\n    const mat = new Float32Array(9);\n    if (mat3) this.set(mat3, mat);\n\n    return mat;\n  },\n\n  set(mat1, mat2) {\n    for (let i = 0; i < 9; i++) mat2[i] = mat1[i];\n\n    return mat2;\n  },\n\n  multiply(mat, mat2, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a02 = mat[2],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b00 = mat2[0],\n      b01 = mat2[1],\n      b02 = mat2[2],\n      b10 = mat2[3],\n      b11 = mat2[4],\n      b20 = mat2[6],\n      b21 = mat2[7];\n\n    mat3[0] = b00 * a00 + b01 * a10;\n    mat3[1] = b00 * a01 + b01 * a11;\n    mat3[2] = a02 * b02;\n    mat3[3] = b10 * a00 + b11 * a10;\n    mat3[4] = b10 * a01 + b11 * a11;\n    mat3[6] = b20 * a00 + b21 * a10 + a20;\n    mat3[7] = b20 * a01 + b21 * a11 + a21;\n\n    return mat3;\n  },\n\n  inverse(mat, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b01 = a11,\n      b11 = -a10,\n      b21 = a21 * a10 - a11 * a20,\n      d = a00 * b01 + a01 * b11,\n      id;\n\n    id = 1 / d;\n    mat3[0] = b01 * id;\n    mat3[1] = -a01 * id;\n    mat3[3] = b11 * id;\n    mat3[4] = a00 * id;\n    mat3[6] = b21 * id;\n    mat3[7] = (-a21 * a00 + a01 * a20) * id;\n\n    return mat3;\n  },\n\n  multiplyVec2(m, vec, mat3) {\n    let x = vec[0],\n      y = vec[1];\n\n    mat3[0] = x * m[0] + y * m[3] + m[6];\n    mat3[1] = x * m[1] + y * m[4] + m[7];\n\n    return mat3;\n  }\n};\n\nexport default Mat3;\n","import Span from \"./Span\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"./MathUtil\";\n\nexport default class ArraySpan extends Span {\n  constructor(color) {\n    super();\n    this._arr = Util.toArray(color);\n  }\n\n  getValue() {\n    const val = Util.getRandFromArray(this._arr);\n    return val === \"random\" || val === \"Random\" ? MathUtil.randomColor() : val;\n  }\n\n  /**\n   * Make sure that the color is an instance of Proton.ArraySpan, if not it makes a new instance\n   *\n   * @method setSpanValue\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  static createArraySpan(arr) {\n    if (!arr) return null;\n\n    if (arr instanceof ArraySpan) return arr;\n    else return new ArraySpan(arr);\n  }\n}\n","export default class Rectangle {\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n\n    this.width = w;\n    this.height = h;\n\n    this.bottom = this.y + this.height;\n    this.right = this.x + this.width;\n  }\n\n  contains(x, y) {\n    if (x <= this.right && x >= this.x && y <= this.bottom && y >= this.y)\n      return true;\n    else return false;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\n\nexport default class Rate {\n  /**\n   * The number of particles per second emission (a [particle]/b [s]);\n   * @namespace\n   * @memberof! Proton#\n   * @constructor\n   * @alias Rate\n   *\n   * @param {Array | Number | Span} numpan the number of each emission;\n   * @param {Array | Number | Span} timepan the time of each emission;\n   * for example: new Rate(new Span(10, 20), new Span(.1, .25));\n   */\n  constructor(numpan, timepan) {\n    this.numPan = Span.setSpanValue(Util.initValue(numpan, 1));\n    this.timePan = Span.setSpanValue(Util.initValue(timepan, 1));\n\n    this.startTime = 0;\n    this.nextTime = 0;\n    this.init();\n  }\n\n  init() {\n    this.startTime = 0;\n    this.nextTime = this.timePan.getValue();\n  }\n\n  getValue(time) {\n    this.startTime += time;\n\n    if (this.startTime >= this.nextTime) {\n      this.startTime = 0;\n      this.nextTime = this.timePan.getValue();\n\n      if (this.numPan.b === 1) {\n        if (this.numPan.getValue(false) > 0.5) return 1;\n        else return 0;\n      } else {\n        return this.numPan.getValue(true);\n      }\n    }\n\n    return 0;\n  }\n}\n","export default class Initialize {\n  reset() {}\n\n  init(emitter, particle) {\n    if (particle) {\n      this.initialize(particle);\n    } else {\n      this.initialize(emitter);\n    }\n  }\n\n  // sub class init\n  initialize(target) {}\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Life extends Initialize {\n  constructor(a, b, c) {\n    super();\n\n    this.lifePan = Span.setSpanValue(a, b, c);\n    this.name = \"Life\";\n  }\n\n  initialize(target) {\n    if (this.lifePan.a === Infinity) target.life = Infinity;\n    else target.life = this.lifePan.getValue();\n  }\n}\n","import Vector2D from \"../math/Vector2D\";\n\nexport default class Zone {\n  constructor() {\n    this.vector = new Vector2D(0, 0);\n    this.random = 0;\n    this.crossType = \"dead\";\n    this.alert = true;\n  }\n\n  getPosition() {}\n\n  crossing(particle) {}\n}\n","import Zone from \"./Zone\";\n\nexport default class PointZone extends Zone {\n  constructor(x, y) {\n    super();\n\n    this.x = x;\n    this.y = y;\n  }\n\n  getPosition() {\n    this.vector.x = this.x;\n    this.vector.y = this.y;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    if (this.alert) {\n      console.error(\"Sorry, PointZone does not support crossing method!\");\n      this.alert = false;\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport PointZone from \"../zone/PointZone\";\nimport Initialize from \"./Initialize\";\n\nexport default class Position extends Initialize {\n  constructor(zone) {\n    super();\n    this.zone = Util.initValue(zone, new PointZone());\n    this.name = \"Position\";\n  }\n\n  reset(zone) {\n    this.zone = Util.initValue(zone, new PointZone());\n  }\n\n  initialize(target) {\n    this.zone.getPosition();\n\n    target.p.x = this.zone.vector.x;\n    target.p.y = this.zone.vector.y;\n  }\n}\n","import Proton from \"../core/Proton\";\nimport Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport Polar2D from \"../math/Polar2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Velocity extends Initialize {\n  constructor(rpan, thapan, type) {\n    super();\n\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n\n    this.name = \"Velocity\";\n  }\n\n  reset(rpan, thapan, type) {\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n  }\n\n  normalizeVelocity(vr) {\n    return vr * Proton.MEASURE;\n  }\n\n  initialize(target) {\n    if (this.type === \"p\" || this.type === \"P\" || this.type === \"polar\") {\n      const polar2d = new Polar2D(\n        this.normalizeVelocity(this.rPan.getValue()),\n        this.thaPan.getValue() * MathUtil.PI_180\n      );\n\n      target.v.x = polar2d.getX();\n      target.v.y = polar2d.getY();\n    } else {\n      target.v.x = this.normalizeVelocity(this.rPan.getValue());\n      target.v.y = this.normalizeVelocity(this.thaPan.getValue());\n    }\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Mass extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.massPan = Span.setSpanValue(a, b, c);\n    this.name = \"Mass\";\n  }\n\n  initialize(target) {\n    target.mass = this.massPan.getValue();\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Radius extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.radius = Span.setSpanValue(a, b, c);\n\n    this.name = \"Radius\";\n  }\n\n  reset(a, b, c) {\n    this.radius = Span.setSpanValue(a, b, c);\n  }\n\n  initialize(particle) {\n    particle.radius = this.radius.getValue();\n    particle.data.oldRadius = particle.radius;\n  }\n}\n","import Util from \"../utils/Util\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Initialize from \"./Initialize\";\n\nexport default class Body extends Initialize {\n  constructor(image, w, h) {\n    super();\n\n    this.image = this.setSpanValue(image);\n    this.w = Util.initValue(w, 20);\n    this.h = Util.initValue(h, this.w);\n    this.name = \"Body\";\n  }\n\n  initialize(particle) {\n    const imageTarget = this.image.getValue();\n\n    if (typeof imageTarget === \"string\") {\n      particle.body = {\n        width: this.w,\n        height: this.h,\n        src: imageTarget,\n        isInner: true,\n        inner: true\n      };\n    } else {\n      particle.body = imageTarget;\n    }\n  }\n\n  setSpanValue(image) {\n    return image instanceof ArraySpan ? image : new ArraySpan(image);\n  }\n}\n","import Proton from '../core/Proton';\nimport Util from '../utils/Util';\nimport ease from '../math/ease';\n\nexport default class Behaviour {\n    static id = 0;\n\n    /**\n     * The Behaviour class is the base for the other Behaviour\n     *\n     * @memberof! -\n     * @interface\n     * @alias Proton.Behaviour\n     *\n     * @param {Number} life \tthe behaviours life\n     * @param {String} easing \tThe behaviour's decaying trend, for example ease.easeOutQuart\n     *\n     * @property {String}  id \t\tThe behaviours id\n     * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n     * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n     * @property {Number}  age=0 \tHow long the particle should be 'alife'\n     * @property {Number}  energy=1\n     * @property {Boolean} dead=false The particle is dead at first\n     * @property {Array}   parents \tThe behaviour's parents array\n     * @property {String}  name \tThe behaviour name\n     */\n    constructor(life, easing) {\n\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n\n        this.age = 0;\n        this.energy = 1;\n        this.dead = false;\n        this.parents = [];\n\n        this.id = `Behaviour_${Behaviour.id++}`;\n        this.name = 'Behaviour';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} [life=Infinity] \t\tthis behaviour's life\n     * @param {String} [easing=easeLinear] \tthis behaviour's easing\n     */\n    reset(life, easing) {\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n    }\n\n    /**\n     * Normalize a force by 1:100;\n     *\n     * @method normalizeForce\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Vector2D} force\n     */\n    normalizeForce(force) {\n        return force.multiplyScalar(Proton.MEASURE);\n    }\n\n    /**\n     * Normalize a value by 1:100;\n     *\n     * @method normalizeValue\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} value\n     */\n    normalizeValue(value) {\n        return value * Proton.MEASURE;\n    }\n\n    /**\n     * Initialize the behaviour's parameters for all particles\n     *\n     * @method initialize\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     */\n    initialize(particle) {}\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} \t\t\ttime the integrate time 1/ms\n     * @param {Int} \t\t\tindex the particle index\n     */\n    calculate(particle, time, index) {\n        this.age += time;\n\n        if (this.age >= this.life || this.dead) {\n            this.energy = 0;\n            this.dead = true;\n            this.destroy();\n        } else {\n            const scale = this.easing(particle.age / particle.life);\n            this.energy = Math.max(1 - scale, 0);\n        }\n    }\n\n    /**\n     * Destory this behaviour\n     *\n     * @method destroy\n     * @memberof Proton.Behaviour\n     * @instance\n     */\n    destroy() {\n        let i = this.parents.length;\n        while (i--) {\n            this.parents[i].removeBehaviour(this);\n        }\n\n        this.parents.length = 0;\n    }\n}\n","import Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Force extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Force\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(fx, fy, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\t\tthis.name = 'Force';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(fx, fy, life, easing) {\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.a.add(this.force);\n\t}\n}","import Util from \"../utils/Util\";\nimport Vector2D from \"../math/Vector2D\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Attraction extends Behaviour {\n  /**\n   * This behaviour let the particles follow one specific Proton.Vector2D\n   *\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Attraction\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {Proton.Vector2D} targetPosition\n   * @property {Number} radius\n   * @property {Number} force\n   * @property {Number} radiusSq\n   * @property {Proton.Vector2D} attractionForce\n   * @property {Number} lengthSq\n   * @property {String} name The Behaviour name\n   */\n  constructor(targetPosition, force, radius, life, easing) {\n    super(life, easing);\n\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    this.name = \"Attraction\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Attraction\n   * @instance\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(targetPosition, force, radius, life, easing) {\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @memberof Proton#Proton.Attraction\n   * @method applyBehaviour\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    this.attractionForce.copy(this.targetPosition);\n    this.attractionForce.sub(particle.p);\n    this.lengthSq = this.attractionForce.lengthSq();\n\n    if (this.lengthSq > 0.00004 && this.lengthSq < this.radiusSq) {\n      this.attractionForce.normalize();\n      this.attractionForce.multiplyScalar(1 - this.lengthSq / this.radiusSq);\n      this.attractionForce.multiplyScalar(this.force);\n\n      particle.a.add(this.attractionForce);\n    }\n  }\n}\n","import Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class RandomDrift extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Behaviour\n   * @constructor\n   * @alias RandomDrift\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {Number} time The time of the drift\n   * @property {String} name The Behaviour name\n   */\n  constructor(driftX, driftY, delay, life, easing) {\n    super(life, easing);\n\n    this.reset(driftX, driftY, delay);\n    this.time = 0;\n    this.name = \"RandomDrift\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(driftX, driftY, delay, life, easing) {\n    this.panFoce = new Vector2D(driftX, driftY);\n    this.panFoce = this.normalizeForce(this.panFoce);\n    this.delay = delay;\n\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    particle.data.time = 0;\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n    particle.data.time += time;\n\n    if (particle.data.time >= this.delay) {\n      particle.a.addXY(\n        MathUtil.randomAToB(-this.panFoce.x, this.panFoce.x),\n        MathUtil.randomAToB(-this.panFoce.y, this.panFoce.y)\n      );\n\n      particle.data.time = 0;\n    }\n  }\n}\n","import Force from './Force';\n\nexport default class Gravity extends Force {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Force\n\t * @constructor\n\t * @alias Proton.Gravity\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(g, life, easing) {\n\t\tsuper(0, g, life, easing);\n\t\tthis.name = 'Gravity';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Gravity\n\t * @instance\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(g, life, easing) {\n\t\tsuper.reset(0, g, life, easing);\n\t}\n}","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Collision extends Behaviour {\n\n\t/**\n\t * The callback after collision\n\t *\n\t * @callback Callback\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Proton.Paritcle} otherParticle\n\t */\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Collision\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(emitter, mass, callback, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(emitter, mass, callback);\n\t\tthis.name = 'Collision';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method reset\n\t * @instance\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} \t\t\t[life=Infinity] \tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(emitter, mass, callback, life, easing) {\n\t\tthis.emitter = Util.initValue(emitter, null);\n\t\tthis.mass = Util.initValue(mass, true);\n\t\tthis.callback = Util.initValue(callback, null);\n\n\t\tthis.collisionPool = [];\n\t\tthis.delta = new Vector2D();\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method applyBehaviour\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tconst newPool = this.emitter ? this.emitter.particles.slice(index) : this.pool.slice(index);\n\t\tconst length = newPool.length;\n\n\t\tlet otherParticle;\n\t\tlet lengthSq;\n\t\tlet overlap;\n\t\tlet totalMass;\n\t\tlet averageMass1, averageMass2;\n\t\tlet i;\n\n\t\tfor (i = 0; i < length; i++) {\n\t\t\totherParticle = newPool[i];\n\n\t\t\tif (otherParticle !== particle) {\n\t\t\t\tthis.delta.copy(otherParticle.p);\n\t\t\t\tthis.delta.sub(particle.p);\n\n\t\t\t\tlengthSq = this.delta.lengthSq();\n\t\t\t\tconst distance = particle.radius + otherParticle.radius;\n\n\t\t\t\tif (lengthSq <= distance * distance) {\n\t\t\t\t\toverlap = distance - Math.sqrt(lengthSq);\n\t\t\t\t\toverlap += 0.5;\n\n\t\t\t\t\ttotalMass = particle.mass + otherParticle.mass;\n\t\t\t\t\taverageMass1 = this.mass ? otherParticle.mass / totalMass : 0.5;\n\t\t\t\t\taverageMass2 = this.mass ? particle.mass / totalMass : 0.5;\n\n\t\t\t\t\tparticle.p.add(this.delta.clone().normalize().multiplyScalar(overlap * -averageMass1));\n\t\t\t\t\totherParticle.p.add(this.delta.normalize().multiplyScalar(overlap * averageMass2));\n\n\t\t\t\t\tthis.callback && this.callback(particle, otherParticle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}","import Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class CrossZone extends Behaviour {\n\n    /**\n     * Defines what happens if the particles come to the end of the specified zone\n     *\n     * @memberof! Proton#\n     * @augments Proton.Behaviour\n     * @constructor\n     * @alias Proton.CrossZone\n     *\n     * @param {Proton.Zone} zone \t\t\t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \t\t\twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \t\t\tthis behaviour's life\n     * @param {String} \t\t[easing=ease.easeLinear] \tthis behaviour's easing\n     *\n     * @property {String} name The Behaviour name\n     */\n    constructor(zone, crossType, life, easing) {\n        super(life, easing);\n\n        this.reset(zone, crossType);\n        this.name = 'CrossZone';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Zone} zone \t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \tthis behaviour's life\n     * @param {String} \t\t[easing=easeLinear]\tthis behaviour's easing\n     */\n    reset(zone, crossType, life, easing) {\n        this.zone = zone;\n        this.zone.crossType = Util.initValue(crossType, 'dead');\n\n        life && super.reset(life, easing);\n    }\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} the integrate time 1/ms\n     * @param {Int} the particle index\n     */\n    applyBehaviour(particle, time, index) {\n        this.calculate(particle, time, index);\n        this.zone.crossing(particle);\n    };\n}","import Util from \"../utils/Util\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Alpha extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Alpha\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Alpha\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.same = b === null || b === undefined ? true : false;\n    this.a = Span.setSpanValue(Util.initValue(a, 1));\n    this.b = Span.setSpanValue(b);\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Sets the new alpha value of the particle\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle A single Proton generated particle\n   */\n  initialize(particle) {\n    particle.data.alphaA = this.a.getValue();\n\n    if (this.same) particle.data.alphaB = particle.data.alphaA;\n    else particle.data.alphaB = this.b.getValue();\n  }\n\n  /**\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    particle.alpha =\n      particle.data.alphaB +\n      (particle.data.alphaA - particle.data.alphaB) * this.energy;\n\n    if (particle.alpha < 0.001) particle.alpha = 0;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Scale extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Scale\n\t *\n\t * @todo add description for 'a' and 'b'\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(a, b, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(a, b);\n\t\tthis.name = 'Scale';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 1));\n\t\tthis.b = Span.setSpanValue(b);\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.data.scaleA = this.a.getValue();\n\t\tparticle.data.oldRadius = particle.radius;\n\t\tparticle.data.scaleB = this.same ? particle.data.scaleA : this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.scale = particle.data.scaleB + (particle.data.scaleA - particle.data.scaleB) * this.energy;\n\n\t\tif (particle.scale < 0.0001) particle.scale = 0;\n\t\tparticle.radius = particle.data.oldRadius * particle.scale;\n\t}\n}","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Rotate extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Rotate\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} [influence=Velocity] The rotation's influence\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(influence, b, style, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(influence, b, style);\n\t\tthis.name = 'Rotate';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} a\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, style, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 'Velocity'));\n\t\tthis.b = Span.setSpanValue(Util.initValue(b, 0));\n\t\tthis.style = Util.initValue(style, 'to');\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.rotation = this.a.getValue();\n\t\tparticle.data.rotationA = this.a.getValue();\n\n\t\tif (!this.same) particle.data.rotationB = this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\n\t\tif (!this.same) {\n\t\t\tif (this.style === 'to' || this.style === 'TO' || this.style === '_') {\n\t\t\t\tparticle.rotation += particle.data.rotationB + (particle.data.rotationA - particle.data.rotationB) * this.energy\n\t\t\t} else {\n\t\t\t\tparticle.rotation += particle.data.rotationB;\n\t\t\t}\n\t\t} else if (this.a.a === 'V' || this.a.a === 'Velocity' || this.a.a === 'v') {\n\t\t\t// beta...\n\t\t\tparticle.rotation = particle.getDirection();\n\t\t}\n\t}\n\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Color extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Color\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Color\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.a = ArraySpan.createArraySpan(a);\n    this.b = ArraySpan.createArraySpan(b);\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Initialize the behaviour's parameters for all particles\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   */\n  initialize(particle) {\n    particle.color = this.a.getValue();\n    particle.data.colorA = ColorUtil.hexToRgb(particle.color);\n\n    if (this.b) particle.data.colorB = ColorUtil.hexToRgb(this.b.getValue());\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    if (this.b) {\n      this.calculate(particle, time, index);\n\n      particle.rgb.r =\n        particle.data.colorB.r +\n        (particle.data.colorA.r - particle.data.colorB.r) * this.energy;\n      particle.rgb.g =\n        particle.data.colorB.g +\n        (particle.data.colorA.g - particle.data.colorB.g) * this.energy;\n      particle.rgb.b =\n        particle.data.colorB.b +\n        (particle.data.colorA.b - particle.data.colorB.b) * this.energy;\n\n      particle.rgb.r = Math.floor(particle.rgb.r);\n      particle.rgb.g = Math.floor(particle.rgb.g);\n      particle.rgb.b = Math.floor(particle.rgb.b);\n    } else {\n      particle.rgb.r = particle.data.colorA.r;\n      particle.rgb.g = particle.data.colorA.g;\n      particle.rgb.b = particle.data.colorA.b;\n    }\n  }\n}\n","import MathUtil from \"../math/MathUtil\";\nimport Vector2D from \"../math/Vector2D\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nconst CHANGING = \"changing\";\n\nexport default class Cyclone extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Cyclone\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(angle, force, life, easing) {\n    super(life, easing);\n    this.setAngleAndForce(angle, force);\n    this.name = \"Cyclone\";\n  }\n\n  setAngleAndForce(angle, force) {\n    this.force = CHANGING;\n    this.angle = MathUtil.PI / 2;\n\n    if (angle === \"right\") {\n      this.angle = MathUtil.PI / 2;\n    } else if (angle === \"left\") {\n      this.angle = -MathUtil.PI / 2;\n    } else if (angle === \"random\") {\n      this.angle = \"random\";\n    } else if (angle instanceof Span) {\n      this.angle = \"span\";\n      this.span = angle;\n    } else if (angle) {\n      this.angle = angle;\n    }\n\n    if (\n      String(force).toLowerCase() === \"changing\" ||\n      String(force).toLowerCase() === \"chang\" ||\n      String(force).toLowerCase() === \"auto\"\n    ) {\n      this.force = CHANGING;\n    } else if (force) {\n      this.force = force;\n    }\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(angle, force, life, easing) {\n    this.angle = MathUtil.PI / 2;\n    this.setAngleAndForce(angle, force);\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    if (this.angle === \"random\") {\n      particle.data.cangle = MathUtil.randomAToB(-MathUtil.PI, MathUtil.PI);\n    } else if (this.angle === \"span\") {\n      particle.data.cangle = this.span.getValue();\n    }\n\n    particle.data.cyclone = new Vector2D(0, 0);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    let length;\n    let gradient = particle.v.getGradient();\n    if (this.angle === \"random\" || this.angle === \"span\") {\n      gradient += particle.data.cangle;\n    } else {\n      gradient += this.angle;\n    }\n\n    if (this.force === CHANGING) {\n      length = particle.v.length() / 100;\n    } else {\n      length = this.force;\n    }\n\n    particle.data.cyclone.x = length * Math.cos(gradient);\n    particle.data.cyclone.y = length * Math.sin(gradient);\n    particle.data.cyclone = this.normalizeForce(particle.data.cyclone);\n    particle.a.add(particle.data.cyclone);\n  }\n}\n","import Attraction from './Attraction';\n\nexport default class Repulsion extends Attraction {\n\n\t/**\n\t * The oppisite of Proton.Attraction - turns the force\n\t *\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Attraction\n\t * @constructor\n\t * @alias Proton.Repulsion\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {Number} force\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(targetPosition, force, radius, life, easing) {\n\t\tsuper(targetPosition, force, radius, life, easing);\n\n\t\tthis.force *= -1;\n\t\tthis.name = 'Repulsion';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Repulsion\n\t * @instance\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(targetPosition, force, radius, life, easing) {\n\t\tsuper.reset(targetPosition, force, radius, life, easing);\n\t\tthis.force *= -1;\n\t}\n}\n","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class GravityWell extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Behaviour\n\t * @constructor\n\t * @alias GravityWell\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(centerPoint, force, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tthis.name = 'GravityWell';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t */\n\treset(centerPoint, force, life, easing) {\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tlife && super.reset(life, easing);\n\t};\n\n\t/**\n\t * @inheritdoc\n\t */\n\tinitialize(particle) {\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.distanceVec.set(this.centerPoint.x - particle.p.x, this.centerPoint.y - particle.p.y);\n\t\tconst distanceSq = this.distanceVec.lengthSq();\n\n\t\tif (distanceSq !== 0) {\n\t\t\tconst distance = this.distanceVec.length();\n\t\t\tconst factor = (this.force * time) / (distanceSq * distance);\n\n\t\t\tparticle.v.x += factor * this.distanceVec.x;\n\t\t\tparticle.v.y += factor * this.distanceVec.y;\n\t\t}\n\t}\n}","import Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default {\n  initialize(emitter, particle, initializes) {\n    const length = initializes.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      if (initializes[i] instanceof Initialize) {\n        initializes[i].init(emitter, particle);\n      } else {\n        this.init(emitter, particle, initializes[i]);\n      }\n    }\n\n    this.bindEmitter(emitter, particle);\n  },\n\n  // init\n  init(emitter, particle, initialize) {\n    Util.setProp(particle, initialize);\n    Util.setVectorVal(particle, initialize);\n  },\n\n  bindEmitter(emitter, particle) {\n    if (emitter.bindEmitter) {\n      particle.p.add(emitter.p);\n      particle.v.add(emitter.v);\n      particle.a.add(emitter.a);\n\n      particle.v.rotate(MathUtil.degreeTransform(emitter.rotation));\n    }\n  }\n};\n","import Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\nimport Particle from \"../core/Particle\";\nimport EventDispatcher from \"../events/EventDispatcher\";\n\nimport Rate from \"../initialize/Rate\";\nimport InitializeUtil from \"../initialize/InitializeUtil\";\n\nexport default class Emitter extends Particle {\n  /**\n   * You can use this emit particles.\n   *\n   * It will dispatch follow events:\n   * PARTICLE_CREATED\n   * PARTICLE_UPDATA\n   * PARTICLE_DEAD\n   *\n   * @class Emitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   * for example {damping:0.01,bindEmitter:false}\n   */\n  constructor(conf = {}) {\n    super(conf);\n\n    this.particles = [];\n    this.behaviours = [];\n    this.initializes = [];\n\n    this.emitTime = 0;\n    this.emitSpeed = 0;\n    this.totalTime = -1;\n\n    /**\n     * The friction coefficient for all particle emit by This;\n     * @property damping\n     * @type {Number}\n     * @default 0.006\n     */\n    this.damping = 0.006;\n\n    /**\n     * If bindEmitter the particles can bind this emitter's property;\n     * @property bindEmitter\n     * @type {Boolean}\n     * @default true\n     */\n    this.bindEmitter = true;\n\n    /**\n     * The number of particles per second emit (a [particle]/b [s]);\n     * @property rate\n     * @type {Rate}\n     * @default Rate(1, .1)\n     */\n    this.rate = new Rate(1, 0.1);\n\n    this.name = \"Emitter\";\n    this.id = Puid.id(this.name);\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   * @param {Number} emitTime begin emit time;\n   * @param {String} life the life of this emitter\n   */\n  emit(totalTime, life) {\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = Util.initValue(totalTime, Infinity);\n\n    if (life === true || life === \"life\" || life === \"destroy\") {\n      this.life = totalTime === \"once\" ? 1 : this.totalTime;\n    } else if (!isNaN(life)) {\n      this.life = life;\n    }\n\n    this.rate.init();\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this.totalTime = -1;\n    this.emitTime = 0;\n    this.stoped = true;\n  }\n\n  preEmit(time) {\n    let oldStoped = this.stoped;\n    let oldEmitTime = this.emitTime;\n    let oldTotalTime = this.totalTime;\n\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = time;\n    this.rate.init();\n\n    const step = 0.0167;\n    while (time > step) {\n      time -= step;\n      this.update(step);\n    }\n\n    this.stoped = oldStoped;\n    this.emitTime = oldEmitTime + Math.max(time, 0);\n    this.totalTime = oldTotalTime;\n  }\n\n  /**\n   * remove current all particles\n   * @method removeAllParticles\n   */\n  removeAllParticles() {\n    let i = this.particles.length;\n    while (i--) this.particles[i].dead = true;\n  }\n\n  /**\n   * add initialize to this emitter\n   * @method addSelfInitialize\n   */\n  addSelfInitialize(initialize) {\n    if (initialize[\"init\"]) {\n      initialize.init(this);\n    } else {\n      this.initAll();\n    }\n  }\n\n  /**\n   * add the Initialize to particles;\n   *\n   * you can use initializes array:for example emitter.addInitialize(initialize1,initialize2,initialize3);\n   * @method addInitialize\n   * @param {Initialize} initialize like this new Radius(1, 12)\n   */\n  addInitialize(...rest) {\n    let i = rest.length;\n    while (i--) this.initializes.push(rest[i]);\n  }\n\n  /**\n   * remove the Initialize\n   * @method removeInitialize\n   * @param {Initialize} initialize a initialize\n   */\n  removeInitialize(initializer) {\n    const index = this.initializes.indexOf(initializer);\n    if (index > -1) this.initializes.splice(index, 1);\n  }\n\n  /**\n   * remove all Initializes\n   * @method removeInitializers\n   */\n  removeAllInitializers() {\n    Util.emptyArray(this.initializes);\n  }\n\n  /**\n   * add the Behaviour to particles;\n   *\n   * you can use Behaviours array:emitter.addBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addBehaviour\n   * @param {Behaviour} behaviour like this new Color('random')\n   */\n  addBehaviour(...rest) {\n    let i = arguments.length;\n    while (i--) {\n      let behaviour = rest[i];\n      this.behaviours.push(behaviour);\n      if (behaviour.parents) behaviour.parents.push(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour\n   * @method removeBehaviour\n   * @param {Behaviour} behaviour a behaviour\n   */\n  removeBehaviour(behaviour) {\n    let index = this.behaviours.indexOf(behaviour);\n    this.behaviours.splice(index, 1);\n\n    if (behaviour.parents) {\n      index = behaviour.parents.indexOf(behaviour);\n      behaviour.parents.splice(index, 1);\n    }\n\n    return index;\n  }\n\n  /**\n   * remove all behaviours\n   * @method removeAllBehaviours\n   */\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  // emitter update\n  update(time) {\n    this.age += time;\n    if (this.age >= this.life || this.dead) this.destroy();\n\n    this.emitting(time);\n    this.integrate(time);\n  }\n\n  integrate(time) {\n    if (!this.parent) return;\n\n    const damping = 1 - this.damping;\n    this.parent.integrator.calculate(this, time, damping);\n\n    const length = this.particles.length;\n    let i, particle;\n\n    for (i = length - 1; i >= 0; i--) {\n      particle = this.particles[i];\n\n      // particle update\n      particle.update(time, i);\n      this.parent.integrator.calculate(particle, time, damping);\n      this.dispatch(\"PARTICLE_UPDATE\", particle);\n\n      // check dead\n      if (particle.dead) {\n        this.dispatch(\"PARTICLE_DEAD\", particle);\n\n        this.parent.pool.expire(particle);\n        this.particles.splice(i, 1);\n      }\n    }\n  }\n\n  dispatch(event, target) {\n    this.parent && this.parent.dispatchEvent(event, target);\n    this.bindEvent && this.dispatchEvent(event, target);\n  }\n\n  emitting(time) {\n    if (this.totalTime === \"once\") {\n      let i;\n      const length = this.rate.getValue(99999);\n\n      if (length > 0) this.emitSpeed = length;\n      for (i = 0; i < length; i++) this.createParticle();\n      this.totalTime = \"none\";\n    } else {\n      this.emitTime += time;\n\n      if (this.emitTime < this.totalTime) {\n        const length = this.rate.getValue(time);\n        let i;\n\n        if (length > 0) this.emitSpeed = length;\n        for (i = 0; i < length; i++) this.createParticle();\n      }\n    }\n  }\n\n  /**\n   * create single particle;\n   *\n   * can use emit({x:10},new Gravity(10),{'particleUpdate',fun}) or emit([{x:10},new Initialize],new Gravity(10),{'particleUpdate',fun})\n   * @method removeAllParticles\n   */\n  createParticle(initialize, behaviour) {\n    const particle = this.parent.pool.get(Particle);\n    this.setupParticle(particle, initialize, behaviour);\n    this.dispatch(\"PARTICLE_CREATED\", particle);\n\n    return particle;\n  }\n\n  setupParticle(particle, initialize, behaviour) {\n    let initializes = this.initializes;\n    let behaviours = this.behaviours;\n\n    if (initialize) initializes = Util.toArray(initialize);\n    if (behaviour) behaviours = Util.toArray(behaviour);\n\n    particle.reset();\n    InitializeUtil.initialize(this, particle, initializes);\n    particle.addBehaviours(behaviours);\n    particle.parent = this;\n\n    this.particles.push(particle);\n  }\n\n  remove() {\n    this.stop();\n    Util.destroyAll(this.particles);\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    this.dead = true;\n    this.remove();\n    this.removeAllInitializers();\n    this.removeAllBehaviours();\n    this.parent && this.parent.removeEmitter(this);\n  }\n}\n\nEventDispatcher.bind(Emitter);\n","import Emitter from \"./Emitter\";\n\nexport default class BehaviourEmitter extends Emitter {\n  /**\n   * The BehaviourEmitter class inherits from Proton.Emitter\n   *\n   * use the BehaviourEmitter you can add behaviours to self;\n   * @class Proton.BehaviourEmitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   */\n  constructor(conf) {\n    super(conf);\n\n    this.selfBehaviours = [];\n  }\n\n  /**\n   * add the Behaviour to emitter;\n   *\n   * you can use Behaviours array:emitter.addSelfBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addSelfBehaviour\n   * @param {Proton.Behaviour} behaviour like this new Proton.Color('random')\n   */\n  addSelfBehaviour(...rest) {\n    let i,\n      length = rest.length;\n\n    for (i = 0; i < length; i++) {\n      let behaviour = rest[i];\n      this.selfBehaviours.push(behaviour);\n      behaviour.initialize(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour for self\n   * @method removeSelfBehaviour\n   * @param {Proton.Behaviour} behaviour a behaviour\n   */\n  removeSelfBehaviour(behaviour) {\n    const index = this.selfBehaviours.indexOf(behaviour);\n    if (index > -1) this.selfBehaviours.splice(index, 1);\n  }\n\n  update(time) {\n    super.update(time);\n\n    if (!this.sleep) {\n      const length = this.selfBehaviours.length;\n      let i;\n\n      for (i = 0; i < length; i++) {\n        this.selfBehaviours[i].applyBehaviour(this, time, i);\n      }\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport Emitter from \"./Emitter\";\n\nexport default class FollowEmitter extends Emitter {\n  /**\n   * The FollowEmitter class inherits from Proton.Emitter\n   *\n   * use the FollowEmitter will emit particle when mousemoving\n   *\n   * @class Proton.FollowEmitter\n   * @constructor\n   * @param {Element} mouseTarget mouseevent's target;\n   * @param {Number} ease the easing of following speed;\n   * @default 0.7\n   * @param {Object} conf the parameters object;\n   */\n  constructor(mouseTarget, ease, conf) {\n    super(conf);\n\n    this.mouseTarget = Util.initValue(mouseTarget, window);\n    this.ease = Util.initValue(ease, 0.7);\n\n    this._allowEmitting = false;\n    this.initEventHandler();\n  }\n\n  initEventHandler() {\n    this.mousemoveHandler = e => this.mousemove.call(this, e);\n    this.mousedownHandler = e => this.mousedown.call(this, e);\n    this.mouseupHandler = e => this.mouseup.call(this, e);\n\n    this.mouseTarget.addEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   */\n  emit() {\n    this._allowEmitting = true;\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this._allowEmitting = false;\n  }\n\n  mousemove(e) {\n    if (e.layerX || e.layerX === 0) {\n      this.p.x += (e.layerX - this.p.x) * this.ease;\n      this.p.y += (e.layerY - this.p.y) * this.ease;\n    } else if (e.offsetX || e.offsetX === 0) {\n      this.p.x += (e.offsetX - this.p.x) * this.ease;\n      this.p.y += (e.offsetY - this.p.y) * this.ease;\n    }\n\n    if (this._allowEmitting) super.emit(\"once\");\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    super.destroy();\n    this.mouseTarget.removeEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n}\n","import Pool from \"../core/Pool\";\n\nexport default class BaseRenderer {\n    constructor(element, stroke) {\n        this.pool = new Pool();\n        this.element = element;\n        this.stroke = stroke;\n        this.circleConf = { isCircle: true };\n\n        this.initHandler();\n        this.name = \"BaseRenderer\";\n    }\n\n    setStroke(color = \"#000000\", thinkness = 1) {\n        this.stroke = { color, thinkness };\n    }\n\n    initHandler() {\n        this._protonUpdateHandler = () => {\n            this.onProtonUpdate.call(this);\n        };\n\n        this._protonUpdateAfterHandler = () => {\n            this.onProtonUpdateAfter.call(this);\n        };\n\n        this._emitterAddedHandler = emitter => {\n            this.onEmitterAdded.call(this, emitter);\n        };\n\n        this._emitterRemovedHandler = emitter => {\n            this.onEmitterRemoved.call(this, emitter);\n        };\n\n        this._particleCreatedHandler = particle => {\n            this.onParticleCreated.call(this, particle);\n        };\n\n        this._particleUpdateHandler = particle => {\n            this.onParticleUpdate.call(this, particle);\n        };\n\n        this._particleDeadHandler = particle => {\n            this.onParticleDead.call(this, particle);\n        };\n    }\n\n    init(proton) {\n        this.parent = proton;\n\n        proton.addEventListener(\"PROTON_UPDATE\", this._protonUpdateHandler);\n        proton.addEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        proton.addEventListener(\"EMITTER_ADDED\", this._emitterAddedHandler);\n        proton.addEventListener(\"EMITTER_REMOVED\", this._emitterRemovedHandler);\n\n        proton.addEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        proton.addEventListener(\"PARTICLE_UPDATE\", this._particleUpdateHandler);\n        proton.addEventListener(\"PARTICLE_DEAD\", this._particleDeadHandler);\n    }\n\n    resize(width, height) {}\n\n    destroy() {\n        this.remove();\n    }\n\n    remove(proton) {\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE\",\n            this._protonUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        this.parent.removeEventListener(\n            \"EMITTER_ADDED\",\n            this._emitterAddedHandler\n        );\n        this.parent.removeEventListener(\n            \"EMITTER_REMOVED\",\n            this._emitterRemovedHandler\n        );\n\n        this.parent.removeEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_UPDATE\",\n            this._particleUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_DEAD\",\n            this._particleDeadHandler\n        );\n\n        this.parent = null;\n    }\n\n    onProtonUpdate() {}\n    onProtonUpdateAfter() {}\n\n    onEmitterAdded(emitter) {}\n    onEmitterRemoved(emitter) {}\n\n    onParticleCreated(particle) {}\n    onParticleUpdate(particle) {}\n    onParticleDead(particle) {}\n}\n","import ImgUtil from \"../utils/ImgUtil\";\nimport ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class CanvasRenderer extends BaseRenderer {\n    constructor(element) {\n        super(element);\n\n        this.stroke = null;\n        this.context = this.element.getContext(\"2d\");\n        this.bufferCache = {};\n        this.name = \"CanvasRenderer\";\n    }\n\n    resize(width, height) {\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    onProtonUpdate() {\n        this.context.clearRect(0, 0, this.element.width, this.element.height);\n    }\n\n    onParticleCreated(particle) {\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            particle.color = particle.color || \"#ff0000\";\n        }\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.body) {\n            if (particle.body instanceof Image) this.drawImage(particle);\n        } else {\n            this.drawCircle(particle);\n        }\n    }\n\n    onParticleDead(particle) {\n        particle.body = null;\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        particle.body = img;\n    }\n\n    // private drawCircle\n    drawImage(particle) {\n        const w = (particle.body.width * particle.scale) | 0;\n        const h = (particle.body.height * particle.scale) | 0;\n        const x = particle.p.x - w / 2;\n        const y = particle.p.y - h / 2;\n\n        if (!!particle.color) {\n            if (!particle.data[\"buffer\"])\n                particle.data.buffer = this.createBuffer(particle.body);\n\n            const bufContext = particle.data.buffer.getContext(\"2d\");\n            bufContext.clearRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalAlpha = particle.alpha;\n            bufContext.drawImage(particle.body, 0, 0);\n\n            bufContext.globalCompositeOperation = \"source-atop\";\n            bufContext.fillStyle = ColorUtil.rgbToHex(particle.rgb);\n            bufContext.fillRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalCompositeOperation = \"source-over\";\n            bufContext.globalAlpha = 1;\n\n            this.context.drawImage(\n                particle.data.buffer,\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height,\n                x,\n                y,\n                w,\n                h\n            );\n        } else {\n            this.context.save();\n\n            this.context.globalAlpha = particle.alpha;\n            this.context.translate(particle.p.x, particle.p.y);\n            this.context.rotate(MathUtil.degreeTransform(particle.rotation));\n            this.context.translate(-particle.p.x, -particle.p.y);\n            this.context.drawImage(\n                particle.body,\n                0,\n                0,\n                particle.body.width,\n                particle.body.height,\n                x,\n                y,\n                w,\n                h\n            );\n\n            this.context.globalAlpha = 1;\n            this.context.restore();\n        }\n    }\n\n    // private drawCircle --\n    drawCircle(particle) {\n        if (particle.rgb) {\n            this.context.fillStyle = `rgba(${particle.rgb.r},${particle.rgb.g},${particle.rgb.b},${particle.alpha})`;\n        } else {\n            this.context.fillStyle = particle.color;\n        }\n\n        // draw circle\n        this.context.beginPath();\n        this.context.arc(\n            particle.p.x,\n            particle.p.y,\n            particle.radius,\n            0,\n            Math.PI * 2,\n            true\n        );\n\n        if (this.stroke) {\n            this.context.strokeStyle = this.stroke.color;\n            this.context.lineWidth = this.stroke.thinkness;\n            this.context.stroke();\n        }\n\n        this.context.closePath();\n        this.context.fill();\n    }\n\n    // private createBuffer\n    createBuffer(image) {\n        if (image instanceof Image) {\n            const size = image.width + \"_\" + image.height;\n            let canvas = this.bufferCache[size];\n\n            if (!canvas) {\n                canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                this.bufferCache[size] = canvas;\n            }\n\n            return canvas;\n        }\n    }\n}\n","import DomUtil from \"../utils/DomUtil\";\nimport ImgUtil from \"../utils/ImgUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class DomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.stroke = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.addImg2Body = this.addImg2Body.bind(this);\n\n    this.transform3d = false;\n    this.name = \"DomRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n      this.element.appendChild(particle.body);\n    }\n  }\n\n  onParticleUpdate(particle) {\n    if (this.bodyReady(particle)) {\n      if (this.transform3d)\n        DomUtil.transform3d(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n      else\n        DomUtil.transform(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n\n      particle.body.style.opacity = particle.alpha;\n      if (particle.body.isCircle) {\n        particle.body.style.backgroundColor = particle.color || \"#ff0000\";\n      }\n    }\n  }\n\n  onParticleDead(particle) {\n    if (this.bodyReady(particle)) {\n      this.element.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n  }\n\n  bodyReady(particle) {\n    return (\n      typeof particle.body === \"object\" &&\n      particle.body &&\n      !particle.body.isInner\n    );\n  }\n\n  // private\n  addImg2Body(img, particle) {\n    if (particle.dead) return;\n    particle.body = this.pool.get(img, particle);\n    DomUtil.resize(particle.body, img.width, img.height);\n\n    this.element.appendChild(particle.body);\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body, particle);\n  }\n\n  // private --\n  createCircle(particle) {\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      2 * particle.radius,\n      2 * particle.radius\n    );\n    dom.style.borderRadius = `${particle.radius}px`;\n\n    if (this.stroke) {\n      dom.style.borderColor = this.stroke.color;\n      dom.style.borderWidth = `${this.stroke.thinkness}px`;\n    }\n    dom.isCircle = true;\n\n    return dom;\n  }\n\n  createSprite(body, particle) {\n    const url = typeof body === \"string\" ? body : body.src;\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      body.width,\n      body.height\n    );\n    dom.style.backgroundImage = `url(${url})`;\n\n    return dom;\n  }\n}\n","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class EaselRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.name = \"EaselRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      this.createSprite(particle);\n    } else {\n      this.createCircle(particle);\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  onParticleUpdate(particle) {\n    if (particle.body) {\n      particle.body.x = particle.p.x;\n      particle.body.y = particle.p.y;\n\n      particle.body.alpha = particle.alpha;\n      particle.body.scaleX = particle.body.scaleY = particle.scale;\n      particle.body.rotation = particle.rotation;\n    }\n  }\n\n  onParticleDead(particle) {\n    if (particle.body) {\n      particle.body.parent && particle.body.parent.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n\n    if (particle.graphics) this.pool.expire(particle.graphics);\n  }\n\n  // private\n  createSprite(particle) {\n    particle.body = this.pool.get(particle.body);\n\n    if (particle.body.parent) return;\n    if (particle.body[\"image\"]) {\n      particle.body.regX = particle.body.image.width / 2;\n      particle.body.regY = particle.body.image.height / 2;\n    }\n  }\n\n  createCircle(particle) {\n    const graphics = this.pool.get(createjs.Graphics);\n\n    if (this.stroke) {\n      if (this.stroke instanceof String) graphics.beginStroke(this.stroke);\n      else graphics.beginStroke(\"#000000\");\n    }\n    graphics\n      .beginFill(particle.color || \"#ff0000\")\n      .drawCircle(0, 0, particle.radius);\n\n    const shape = this.pool.get(createjs.Shape, [graphics]);\n\n    particle.body = shape;\n    particle.graphics = graphics;\n  }\n}\n","import Rectangle from \"../math/Rectangle\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class PixelRenderer extends BaseRenderer {\n  constructor(element, rectangle) {\n    super(element);\n\n    this.context = this.element.getContext(\"2d\");\n    this.imageData = null;\n    this.rectangle = null;\n    this.rectangle = rectangle;\n    this.createImageData(rectangle);\n\n    this.name = \"PixelRenderer\";\n  }\n\n  resize(width, height) {\n    this.element.width = width;\n    this.element.height = height;\n  }\n\n  createImageData(rectangle) {\n    this.rectangle = rectangle\n      ? rectangle\n      : new Rectangle(0, 0, this.element.width, this.element.height);\n    this.imageData = this.context.createImageData(\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onProtonUpdate() {\n    this.context.clearRect(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.imageData = this.context.getImageData(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n  }\n\n  onProtonUpdateAfter() {\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onParticleCreated(particle) {}\n\n  onParticleUpdate(particle) {\n    if (this.imageData) {\n      this.setPixel(\n        this.imageData,\n        Math.floor(particle.p.x - this.rectangle.x),\n        Math.floor(particle.p.y - this.rectangle.y),\n        particle\n      );\n    }\n  }\n\n  setPixel(imagedata, x, y, particle) {\n    const rgb = particle.rgb;\n    if (x < 0 || x > this.element.width || y < 0 || y > this.elementwidth)\n      return;\n\n    const i = ((y >> 0) * imagedata.width + (x >> 0)) * 4;\n\n    imagedata.data[i] = rgb.r;\n    imagedata.data[i + 1] = rgb.g;\n    imagedata.data[i + 2] = rgb.b;\n    imagedata.data[i + 3] = particle.alpha * 255;\n  }\n\n  onParticleDead(particle) {}\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nlet PIXIClass;\nexport default class PixiRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.color = false;\n    this.setColor = false;\n    this.blendMode = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.setPIXI(window.PIXI);\n\n    this.name = \"PixiRenderer\";\n  }\n\n  setPIXI(PIXI) {\n    try {\n      PIXIClass = PIXI || { Sprite: {} };\n      this.createFromImage =\n        PIXIClass.Sprite.from || PIXIClass.Sprite.fromImage;\n    } catch (e) {}\n  }\n\n  onProtonUpdate() {}\n\n  /**\n   * @param particle\n   */\n  onParticleCreated(particle) {\n    if (particle.body) {\n      particle.body = this.pool.get(particle.body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n    }\n\n    if (this.blendMode) {\n      particle.body.blendMode = this.blendMode;\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleUpdate(particle) {\n    this.transform(particle, particle.body);\n\n    if (this.setColor === true || this.color === true) {\n      particle.body.tint = ColorUtil.getHex16FromParticle(particle);\n    }\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleDead(particle) {\n    this.element.removeChild(particle.body);\n    this.pool.expire(particle.body);\n    particle.body = null;\n  }\n\n  destroy(particles) {\n    super.destroy();\n    this.pool.destroy();\n\n    let i = particles.length;\n    while (i--) {\n      let particle = particles[i];\n      if (particle.body) {\n        this.element.removeChild(particle.body);\n      }\n    }\n  }\n\n  transform(particle, target) {\n    target.x = particle.p.x;\n    target.y = particle.p.y;\n\n    target.alpha = particle.alpha;\n\n    target.scale.x = particle.scale;\n    target.scale.y = particle.scale;\n\n    // using cached version of MathUtil.PI_180 for slight performance increase.\n    target.rotation = particle.rotation * MathUtil.PI_180; // MathUtil.PI_180;\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body);\n  }\n\n  createSprite(body) {\n    const sprite = body.isInner\n      ? this.createFromImage(body.src)\n      : new PIXIClass.Sprite(body);\n\n    sprite.anchor.x = 0.5;\n    sprite.anchor.y = 0.5;\n\n    return sprite;\n  }\n\n  createCircle(particle) {\n    const graphics = new PIXIClass.Graphics();\n\n    if (this.stroke) {\n      const stroke = this.stroke instanceof String ? this.stroke : 0x000000;\n      graphics.beginStroke(stroke);\n    }\n\n    graphics.beginFill(particle.color || 0x008ced);\n    graphics.drawCircle(0, 0, particle.radius);\n    graphics.endFill();\n\n    return graphics;\n  }\n}\n","import Mat3 from \"../math/Mat3\";\n\nexport default class MStack {\n  constructor() {\n    this.mats = [];\n    this.size = 0;\n\n    for (let i = 0; i < 20; i++)\n      this.mats.push(Mat3.create([0, 0, 0, 0, 0, 0, 0, 0, 0]));\n  }\n\n  set(m, i) {\n    if (i === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[i - 1], m, this.mats[i]);\n\n    this.size = Math.max(this.size, i + 1);\n  }\n\n  push(m) {\n    if (this.size === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[this.size - 1], m, this.mats[this.size]);\n\n    this.size++;\n  }\n\n  pop() {\n    if (this.size > 0) this.size--;\n  }\n\n  top() {\n    return this.mats[this.size - 1];\n  }\n}\n","import Mat3 from '../math/Mat3';\nimport BaseRenderer from './BaseRenderer';\n\nimport Util from '../utils/Util';\nimport ImgUtil from '../utils/ImgUtil';\nimport MStack from '../utils/MStack';\nimport DomUtil from '../utils/DomUtil';\nimport WebGLUtil from '../utils/WebGLUtil';\nimport MathUtil from '../math/MathUtil';\n\nexport default class WebGLRenderer extends BaseRenderer {\n\n    constructor(element) {\n        super(element);\n\n        this.gl = this.element.getContext('experimental-webgl', { antialias: true, stencil: false, depth: false });\n        if (!this.gl) alert('Sorry your browser do not suppest WebGL!');\n\n        this.initVar();\n        this.setMaxRadius();\n        this.initShaders();\n        this.initBuffers();\n\n        this.gl.blendEquation(this.gl.FUNC_ADD);\n        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        this.gl.enable(this.gl.BLEND);\n\n        this.addImg2Body = this.addImg2Body.bind(this);\n\n        this.name = 'WebGLRenderer';\n    }\n\n    init(proton) {\n        super.init(proton);\n        this.resize(this.element.width, this.element.height);\n    }\n\n    resize(width, height) {\n        this.umat[4] = -2;\n        this.umat[7] = 1;\n\n        this.smat[0] = 1 / width;\n        this.smat[4] = 1 / height;\n\n        this.mstack.set(this.umat, 0);\n        this.mstack.set(this.smat, 1);\n\n        this.gl.viewport(0, 0, width, height);\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    setMaxRadius(radius) {\n        this.circleCanvasURL = this.createCircle(radius);\n    }\n\n    getVertexShader() {\n        const vsSource = ['uniform vec2 viewport;', 'attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'uniform mat3 tMat;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'void main() {', 'vec3 v = tMat * vec3(aVertexPosition, 1.0);', 'gl_Position = vec4(v.x, v.y, 0, 1);', 'vTextureCoord = aTextureCoord;', 'alpha = tMat[0][2];', '}'].join('\\n');\n        return vsSource;\n    }\n\n    getFragmentShader() {\n        const fsSource = ['precision mediump float;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'uniform sampler2D uSampler;', 'uniform vec4 color;', 'uniform bool useTexture;', 'uniform vec3 uColor;', 'void main() {', 'vec4 textureColor = texture2D(uSampler, vTextureCoord);', 'gl_FragColor = textureColor * vec4(uColor, 1.0);', 'gl_FragColor.w *= alpha;', '}'].join('\\n');\n        return fsSource;\n    }\n\n    initVar() {\n        this.mstack = new MStack();\n        this.umat = Mat3.create([2, 0, 1, 0, -2, 0, -1, 1, 1]);\n        this.smat = Mat3.create([1 / 100, 0, 1, 0, 1 / 100, 0, 0, 0, 1]);\n        this.texturebuffers = {};\n    }\n\n    blendEquation(A) {\n        this.gl.blendEquation(this.gl[A]);\n    }\n\n    blendFunc(A, B) {\n        this.gl.blendFunc(this.gl[A], this.gl[B]);\n    }\n\n    getShader(gl, str, fs) {\n        const shader = fs ? gl.createShader(gl.FRAGMENT_SHADER) : gl.createShader(gl.VERTEX_SHADER);\n\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            alert(gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n    }\n\n    initShaders() {\n        const fragmentShader = this.getShader(this.gl, this.getFragmentShader(), true);\n        const vertexShader = this.getShader(this.gl, this.getVertexShader(), false);\n\n        this.sprogram = this.gl.createProgram();\n        this.gl.attachShader(this.sprogram, vertexShader);\n        this.gl.attachShader(this.sprogram, fragmentShader);\n        this.gl.linkProgram(this.sprogram);\n\n        if (!this.gl.getProgramParameter(this.sprogram, this.gl.LINK_STATUS))\n            alert('Could not initialise shaders');\n\n        this.gl.useProgram(this.sprogram);\n        this.sprogram.vpa = this.gl.getAttribLocation(this.sprogram, 'aVertexPosition');\n        this.sprogram.tca = this.gl.getAttribLocation(this.sprogram, 'aTextureCoord');\n        this.gl.enableVertexAttribArray(this.sprogram.tca);\n        this.gl.enableVertexAttribArray(this.sprogram.vpa);\n\n        this.sprogram.tMatUniform = this.gl.getUniformLocation(this.sprogram, 'tMat');\n        this.sprogram.samplerUniform = this.gl.getUniformLocation(this.sprogram, 'uSampler');\n        this.sprogram.useTex = this.gl.getUniformLocation(this.sprogram, 'useTexture');\n        this.sprogram.color = this.gl.getUniformLocation(this.sprogram, 'uColor');\n        this.gl.uniform1i(this.sprogram.useTex, 1);\n    };\n\n    initBuffers() {\n        const vs = [0, 3, 1, 0, 2, 3];\n        let idx;\n\n        this.unitIBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vs), this.gl.STATIC_DRAW);\n\n        let i;\n        let ids = [];\n        for (i = 0; i < 100; i++) ids.push(i);\n        idx = new Uint16Array(ids);\n\n        this.unitI33 = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitI33);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n\n        ids = [];\n        for (i = 0; i < 100; i++) ids.push(i, i + 1, i + 2);\n        idx = new Uint16Array(ids);\n\n        this.stripBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.stripBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n    };\n\n    createCircle(raidus) {\n        this.circleCanvasRadius = WebGLUtil.nhpot(Util.initValue(raidus, 32));\n        const canvas = DomUtil.createCanvas('circle_canvas', this.circleCanvasRadius * 2, this.circleCanvasRadius * 2);\n        const context = canvas.getContext('2d');\n\n        context.beginPath();\n        context.arc(this.circleCanvasRadius, this.circleCanvasRadius, this.circleCanvasRadius, 0, Math.PI * 2, true);\n        context.closePath();\n        context.fillStyle = '#FFF';\n        context.fill();\n\n        return canvas.toDataURL();\n    };\n\n    drawImg2Canvas(particle) {\n        const _w = particle.body.width;\n        const _h = particle.body.height;\n\n        const _width = WebGLUtil.nhpot(particle.body.width);\n        const _height = WebGLUtil.nhpot(particle.body.height);\n\n        const _scaleX = particle.body.width / _width;\n        const _scaleY = particle.body.height / _height;\n\n        if (!this.texturebuffers[particle.data.src])\n            this.texturebuffers[particle.data.src] = [this.gl.createTexture(), this.gl.createBuffer(), this.gl.createBuffer()];\n\n        particle.data.texture = this.texturebuffers[particle.data.src][0];\n        particle.data.vcBuffer = this.texturebuffers[particle.data.src][1];\n        particle.data.tcBuffer = this.texturebuffers[particle.data.src][2];\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _scaleX, 0.0, 0.0, _scaleY, _scaleY, _scaleY]), this.gl.STATIC_DRAW);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _w, 0.0, 0.0, _h, _w, _h]), this.gl.STATIC_DRAW);\n\n        const context = particle.data.canvas.getContext('2d');\n        const data = context.getImageData(0, 0, _width, _height);\n\n        this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n\n        particle.data.textureLoaded = true;\n        particle.data.textureWidth = _w;\n        particle.data.textureHeight = _h;\n    }\n\n    onProtonUpdate() {\n        // this.gl.clearColor(0, 0, 0, 1);\n        // this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n\n    onParticleCreated(particle) {\n        particle.data.textureLoaded = false;\n        particle.data.tmat = Mat3.create();\n        particle.data.tmat[8] = 1;\n        particle.data.imat = Mat3.create();\n        particle.data.imat[8] = 1;\n\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            ImgUtil.getImgFromCache(this.circleCanvasURL, this.addImg2Body, particle);\n            particle.data.oldScale = particle.radius / this.circleCanvasRadius;\n        }\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        if (particle.dead) return;\n        particle.body = img;\n        particle.data.src = img.src;\n        particle.data.canvas = ImgUtil.getCanvasFromCache(img);\n        particle.data.oldScale = 1;\n\n        this.drawImg2Canvas(particle);\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.data.textureLoaded) {\n            this.updateMatrix(particle);\n\n            this.gl.uniform3f(this.sprogram.color, particle.rgb.r / 255, particle.rgb.g / 255, particle.rgb.b / 255);\n            this.gl.uniformMatrix3fv(this.sprogram.tMatUniform, false, this.mstack.top());\n\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.vpa, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.tca, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n            this.gl.uniform1i(this.sprogram.samplerUniform, 0);\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n\n            this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0);\n\n            this.mstack.pop();\n        }\n    }\n\n    onParticleDead(particle) { }\n\n    updateMatrix(particle) {\n        const moveOriginMatrix = WebGLUtil.makeTranslation(-particle.data.textureWidth / 2, -particle.data.textureHeight / 2);\n        const translationMatrix = WebGLUtil.makeTranslation(particle.p.x, particle.p.y);\n\n        const angel = particle.rotation * (MathUtil.PI_180);\n        const rotationMatrix = WebGLUtil.makeRotation(angel);\n\n        const scale = particle.scale * particle.data.oldScale;\n        const scaleMatrix = WebGLUtil.makeScale(scale, scale);\n        let matrix = WebGLUtil.matrixMultiply(moveOriginMatrix, scaleMatrix);\n\n        matrix = WebGLUtil.matrixMultiply(matrix, rotationMatrix);\n        matrix = WebGLUtil.matrixMultiply(matrix, translationMatrix);\n\n        Mat3.inverse(matrix, particle.data.imat);\n        matrix[2] = particle.alpha;\n\n        this.mstack.push(matrix);\n    }\n}","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class CustomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.name = \"CustomRenderer\";\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class LineZone extends Zone {\n  constructor(x1, y1, x2, y2, direction) {\n    super();\n\n    if (x2 - x1 >= 0) {\n      this.x1 = x1;\n      this.y1 = y1;\n      this.x2 = x2;\n      this.y2 = y2;\n    } else {\n      this.x1 = x2;\n      this.y1 = y2;\n      this.x2 = x1;\n      this.y2 = y1;\n    }\n\n    this.dx = this.x2 - this.x1;\n    this.dy = this.y2 - this.y1;\n\n    this.minx = Math.min(this.x1, this.x2);\n    this.miny = Math.min(this.y1, this.y2);\n    this.maxx = Math.max(this.x1, this.x2);\n    this.maxy = Math.max(this.y1, this.y2);\n\n    this.dot = this.x2 * this.y1 - this.x1 * this.y2;\n    this.xxyy = this.dx * this.dx + this.dy * this.dy;\n\n    this.gradient = this.getGradient();\n    this.length = this.getLength();\n    this.direction = Util.initValue(direction, \">\");\n  }\n\n  getPosition() {\n    this.random = Math.random();\n\n    this.vector.x =\n      this.x1 + this.random * this.length * Math.cos(this.gradient);\n    this.vector.y =\n      this.y1 + this.random * this.length * Math.sin(this.gradient);\n\n    return this.vector;\n  }\n\n  getDirection(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = B === 0 ? 1 : B;\n\n    if ((A * x + B * y + C) * D > 0) return true;\n    else return false;\n  }\n\n  getDistance(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = A * x + B * y + C;\n\n    return D / Math.sqrt(this.xxyy);\n  }\n\n  getSymmetric(v) {\n    const tha2 = v.getGradient();\n    const tha1 = this.getGradient();\n    const tha = 2 * (tha1 - tha2);\n\n    const oldx = v.x;\n    const oldy = v.y;\n\n    v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n\n    return v;\n  }\n\n  getGradient() {\n    return Math.atan2(this.dy, this.dx);\n  }\n\n  rangeOut(particle) {\n    const angle = Math.abs(this.getGradient());\n\n    if (angle <= MathUtil.PI / 4) {\n      if (particle.p.x <= this.maxx && particle.p.x >= this.minx) return true;\n    } else {\n      if (particle.p.y <= this.maxy && particle.p.y >= this.miny) return true;\n    }\n\n    return false;\n  }\n\n  getLength() {\n    return Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (\n        this.direction === \">\" ||\n        this.direction === \"R\" ||\n        this.direction === \"right\" ||\n        this.direction === \"down\"\n      ) {\n        if (!this.rangeOut(particle)) return;\n        if (this.getDirection(particle.p.x, particle.p.y)) particle.dead = true;\n      } else {\n        if (!this.rangeOut(particle)) return;\n        if (!this.getDirection(particle.p.x, particle.p.y))\n          particle.dead = true;\n      }\n    } else if (this.crossType === \"bound\") {\n      if (!this.rangeOut(particle)) return;\n\n      if (this.getDistance(particle.p.x, particle.p.y) <= particle.radius) {\n        if (this.dx === 0) {\n          particle.v.x *= -1;\n        } else if (this.dy === 0) {\n          particle.v.y *= -1;\n        } else {\n          this.getSymmetric(particle.v);\n        }\n      }\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, LineZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class CircleZone extends Zone {\n  constructor(x, y, radius) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n\n    this.angle = 0;\n    this.center = { x, y };\n  }\n\n  getPosition() {\n    this.angle = MathUtil.PIx2 * Math.random();\n    this.randomRadius = Math.random() * this.radius;\n\n    this.vector.x = this.x + this.randomRadius * Math.cos(this.angle);\n    this.vector.y = this.y + this.randomRadius * Math.sin(this.angle);\n\n    return this.vector;\n  }\n\n  setCenter(x, y) {\n    this.center.x = x;\n    this.center.y = y;\n  }\n\n  crossing(particle) {\n    const d = particle.p.distanceTo(this.center);\n\n    if (this.crossType === \"dead\") {\n      if (d - particle.radius > this.radius) particle.dead = true;\n    } else if (this.crossType === \"bound\") {\n      if (d + particle.radius >= this.radius) this.getSymmetric(particle);\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, CircleZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n\n  getSymmetric(particle) {\n    let tha2 = particle.v.getGradient();\n    let tha1 = this.getGradient(particle);\n\n    let tha = 2 * (tha1 - tha2);\n    let oldx = particle.v.x;\n    let oldy = particle.v.y;\n\n    particle.v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    particle.v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n  }\n\n  getGradient(particle) {\n    return (\n      -MathUtil.PI_2 +\n      Math.atan2(particle.p.y - this.center.y, particle.p.x - this.center.x)\n    );\n  }\n}\n","import Zone from \"./Zone\";\n\nexport default class RectZone extends Zone {\n  constructor(x, y, width, height) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  getPosition() {\n    this.vector.x = this.x + Math.random() * this.width;\n    this.vector.y = this.y + Math.random() * this.height;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    // particle dead zone\n    if (this.crossType === \"dead\") {\n      if (particle.p.x + particle.radius < this.x) particle.dead = true;\n      else if (particle.p.x - particle.radius > this.x + this.width)\n        particle.dead = true;\n\n      if (particle.p.y + particle.radius < this.y) particle.dead = true;\n      else if (particle.p.y - particle.radius > this.y + this.height)\n        particle.dead = true;\n    }\n\n    // particle bound zone\n    else if (this.crossType === \"bound\") {\n      if (particle.p.x - particle.radius < this.x) {\n        particle.p.x = this.x + particle.radius;\n        particle.v.x *= -1;\n      } else if (particle.p.x + particle.radius > this.x + this.width) {\n        particle.p.x = this.x + this.width - particle.radius;\n        particle.v.x *= -1;\n      }\n\n      if (particle.p.y - particle.radius < this.y) {\n        particle.p.y = this.y + particle.radius;\n        particle.v.y *= -1;\n      } else if (particle.p.y + particle.radius > this.y + this.height) {\n        particle.p.y = this.y + this.height - particle.radius;\n        particle.v.y *= -1;\n      }\n    }\n\n    // particle cross zone\n    else if (this.crossType === \"cross\") {\n      if (particle.p.x + particle.radius < this.x && particle.v.x <= 0)\n        particle.p.x = this.x + this.width + particle.radius;\n      else if (\n        particle.p.x - particle.radius > this.x + this.width &&\n        particle.v.x >= 0\n      )\n        particle.p.x = this.x - particle.radius;\n\n      if (particle.p.y + particle.radius < this.y && particle.v.y <= 0)\n        particle.p.y = this.y + this.height + particle.radius;\n      else if (\n        particle.p.y - particle.radius > this.y + this.height &&\n        particle.v.y >= 0\n      )\n        particle.p.y = this.y - particle.radius;\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\n\nexport default class ImageZone extends Zone {\n  constructor(imageData, x, y, d) {\n    super();\n\n    this.reset(imageData, x, y, d);\n  }\n\n  reset(imageData, x, y, d) {\n    this.imageData = imageData;\n    this.x = Util.initValue(x, 0);\n    this.y = Util.initValue(y, 0);\n    this.d = Util.initValue(d, 2);\n\n    this.vectors = [];\n    this.setVectors();\n  }\n\n  setVectors() {\n    let i, j;\n    const length1 = this.imageData.width;\n    const length2 = this.imageData.height;\n\n    for (i = 0; i < length1; i += this.d) {\n      for (j = 0; j < length2; j += this.d) {\n        let index = ((j >> 0) * length1 + (i >> 0)) * 4;\n\n        if (this.imageData.data[index + 3] > 0) {\n          this.vectors.push({ x: i + this.x, y: j + this.y });\n        }\n      }\n    }\n\n    return this.vector;\n  }\n\n  getBound(x, y) {\n    var index = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n    if (this.imageData.data[index + 3] > 0) return true;\n    else return false;\n  }\n\n  getPosition() {\n    const vector = Util.getRandFromArray(this.vectors);\n    return this.vector.copy(vector);\n  }\n\n  getColor(x, y) {\n    x -= this.x;\n    y -= this.y;\n    var i = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n\n    return {\n      r: this.imageData.data[i],\n      g: this.imageData.data[i + 1],\n      b: this.imageData.data[i + 2],\n      a: this.imageData.data[i + 3]\n    };\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.dead = true;\n      else particle.dead = false;\n    } else if (this.crossType === \"bound\") {\n      if (!this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.v.negate();\n    }\n  }\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport CircleZone from \"../zone/CircleZone\";\nimport PointZone from \"../zone/PointZone\";\nimport LineZone from \"../zone/LineZone\";\nimport RectZone from \"../zone/RectZone\";\n\nexport default {\n  addEventListener(proton, func) {\n    proton.addEventListener(\"PROTON_UPDATE_AFTER\", () => func());\n  },\n\n  getStyle(color = \"#ff0000\") {\n    const rgb = ColorUtil.hexToRgb(color);\n    return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.5)`;\n  },\n\n  drawZone(proton, canvas, zone, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      if (zone instanceof PointZone) {\n        context.beginPath();\n        context.fillStyle = style;\n        context.arc(zone.x, zone.y, 10, 0, Math.PI * 2, true);\n        context.fill();\n        context.closePath();\n      } else if (zone instanceof LineZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.moveTo(zone.x1, zone.y1);\n        context.lineTo(zone.x2, zone.y2);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof RectZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.drawRect(zone.x, zone.y, zone.width, zone.height);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof CircleZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.arc(zone.x, zone.y, zone.radius, 0, Math.PI * 2, true);\n        context.stroke();\n        context.closePath();\n      }\n    });\n  },\n\n  drawEmitter(proton, canvas, emitter, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      context.beginPath();\n      context.fillStyle = style;\n      context.arc(emitter.p.x, emitter.p.y, 10, 0, Math.PI * 2, true);\n      context.fill();\n      context.closePath();\n    });\n  }\n};\n","import Proton from \"./core/Proton\";\nimport Particle from \"./core/Particle\";\nimport Pool from \"./core/Pool\";\n\nimport Util from \"./utils/Util\";\nimport ColorUtil from \"./utils/ColorUtil\";\nimport MathUtil from \"./math/MathUtil\";\nimport Vector2D from \"./math/Vector2D\";\nimport Polar2D from \"./math/Polar2D\";\nimport Mat3 from \"./math/Mat3\";\nimport Span from \"./math/Span\";\nimport ArraySpan from \"./math/ArraySpan\";\nimport Rectangle from \"./math/Rectangle\";\nimport ease from \"./math/ease\";\n\nimport Rate from \"./initialize/Rate\";\nimport Initialize from \"./initialize/Initialize\";\nimport Life from \"./initialize/Life\";\nimport Position from \"./initialize/Position\";\nimport Velocity from \"./initialize/Velocity\";\nimport Mass from \"./initialize/Mass\";\nimport Radius from \"./initialize/Radius\";\nimport Body from \"./initialize/Body\";\n\nimport Behaviour from \"./behaviour/Behaviour\";\nimport Force from \"./behaviour/Force\";\nimport Attraction from \"./behaviour/Attraction\";\nimport RandomDrift from \"./behaviour/RandomDrift\";\nimport Gravity from \"./behaviour/Gravity\";\nimport Collision from \"./behaviour/Collision\";\nimport CrossZone from \"./behaviour/CrossZone\";\nimport Alpha from \"./behaviour/Alpha\";\nimport Scale from \"./behaviour/Scale\";\nimport Rotate from \"./behaviour/Rotate\";\nimport Color from \"./behaviour/Color\";\nimport Cyclone from \"./behaviour/Cyclone\";\nimport Repulsion from \"./behaviour/Repulsion\";\nimport GravityWell from \"./behaviour/GravityWell\";\n\nimport Emitter from \"./emitter/Emitter\";\nimport BehaviourEmitter from \"./emitter/BehaviourEmitter\";\nimport FollowEmitter from \"./emitter/FollowEmitter\";\n\nimport CanvasRenderer from \"./render/CanvasRenderer\";\nimport DomRenderer from \"./render/DomRenderer\";\nimport EaselRenderer from \"./render/EaselRenderer\";\nimport PixelRenderer from \"./render/PixelRenderer\";\nimport PixiRenderer from \"./render/PixiRenderer\";\nimport WebGLRenderer from \"./render/WebGLRenderer\";\nimport CustomRenderer from \"./render/CustomRenderer\";\n\nimport Zone from \"./zone/Zone\";\nimport LineZone from \"./zone/LineZone\";\nimport CircleZone from \"./zone/CircleZone\";\nimport PointZone from \"./zone/PointZone\";\nimport RectZone from \"./zone/RectZone\";\nimport ImageZone from \"./zone/ImageZone\";\n\nimport Debug from \"./debug/Debug\";\n\n// namespace\nProton.Particle = Particle;\nProton.Pool = Pool;\n\nProton.Util = Util;\nProton.ColorUtil = ColorUtil;\nProton.MathUtil = MathUtil;\nProton.Vector2D = Proton.Vector = Vector2D;\nProton.Polar2D = Proton.Polar = Polar2D;\nProton.ArraySpan = ArraySpan;\nProton.Rectangle = Rectangle;\nProton.Rate = Rate;\nProton.ease = ease;\nProton.Span = Span;\nProton.Mat3 = Mat3;\nProton.getSpan = (a, b, center) => new Span(a, b, center);\nProton.createArraySpan = ArraySpan.createArraySpan;\n\nProton.Initialize = Proton.Init = Initialize;\nProton.Life = Proton.L = Life;\nProton.Position = Proton.P = Position;\nProton.Velocity = Proton.V = Velocity;\nProton.Mass = Proton.M = Mass;\nProton.Radius = Proton.R = Radius;\nProton.Body = Proton.B = Body;\n\nProton.Behaviour = Behaviour;\nProton.Force = Proton.F = Force;\nProton.Attraction = Proton.A = Attraction;\nProton.RandomDrift = Proton.RD = RandomDrift;\nProton.Gravity = Proton.G = Gravity;\nProton.Collision = Collision;\nProton.CrossZone = CrossZone;\nProton.Alpha = Alpha;\nProton.Scale = Proton.S = Scale;\nProton.Rotate = Rotate;\nProton.Color = Color;\nProton.Repulsion = Repulsion;\nProton.Cyclone = Cyclone;\nProton.GravityWell = GravityWell;\n\nProton.Emitter = Emitter;\nProton.BehaviourEmitter = BehaviourEmitter;\nProton.FollowEmitter = FollowEmitter;\n\nProton.Zone = Zone;\nProton.LineZone = LineZone;\nProton.CircleZone = CircleZone;\nProton.PointZone = PointZone;\nProton.RectZone = RectZone;\nProton.ImageZone = ImageZone;\n\nProton.CanvasRenderer = CanvasRenderer;\nProton.DomRenderer = DomRenderer;\nProton.EaselRenderer = EaselRenderer;\nProton.PixiRenderer = PixiRenderer;\nProton.PixelRenderer = PixelRenderer;\nProton.WebGLRenderer = Proton.WebGlRenderer = WebGLRenderer;\nProton.CustomRenderer = CustomRenderer;\n\nProton.Debug = Debug;\nUtil.assign(Proton, ease);\n\n// export\nexport default Proton;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}