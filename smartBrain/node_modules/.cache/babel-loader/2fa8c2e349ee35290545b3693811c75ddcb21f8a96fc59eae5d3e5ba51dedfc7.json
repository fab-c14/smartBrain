{"ast":null,"code":"\"use strict\";\n\n// rawAsap provides everything we need except exception management.\nvar rawAsap = require(\"./raw\");\n// RawTasks are recycled to reduce GC churn.\nvar freeTasks = [];\n// We queue errors to ensure they are thrown in right order (FIFO).\n// Array-as-queue is good enough here, since we are just dealing with exceptions.\nvar pendingErrors = [];\nvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\nfunction throwFirstError() {\n  if (pendingErrors.length) {\n    throw pendingErrors.shift();\n  }\n}\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with priority\n * over other events like animation, reflow, and repaint. An error thrown from an\n * event will not interrupt, nor even substantially slow down the processing of\n * other events, but will be rather postponed to a lower priority event.\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n  var rawTask;\n  if (freeTasks.length) {\n    rawTask = freeTasks.pop();\n  } else {\n    rawTask = new RawTask();\n  }\n  rawTask.task = task;\n  rawAsap(rawTask);\n}\n\n// We wrap tasks with recyclable task objects.  A task object implements\n// `call`, just like a function.\nfunction RawTask() {\n  this.task = null;\n}\n\n// The sole purpose of wrapping the task is to catch the exception and recycle\n// the task object after its single use.\nRawTask.prototype.call = function () {\n  try {\n    this.task.call();\n  } catch (error) {\n    if (asap.onerror) {\n      // This hook exists purely for testing purposes.\n      // Its name will be periodically randomized to break any code that\n      // depends on its existence.\n      asap.onerror(error);\n    } else {\n      // In a web browser, exceptions are not fatal. However, to avoid\n      // slowing down the queue of pending tasks, we rethrow the error in a\n      // lower priority turn.\n      pendingErrors.push(error);\n      requestErrorThrow();\n    }\n  } finally {\n    this.task = null;\n    freeTasks[freeTasks.length] = this;\n  }\n};","map":{"version":3,"names":["rawAsap","require","freeTasks","pendingErrors","requestErrorThrow","makeRequestCallFromTimer","throwFirstError","length","shift","module","exports","asap","task","rawTask","pop","RawTask","prototype","call","error","onerror","push"],"sources":["/workspace/smartBrain/smartBrain/node_modules/asap/browser-asap.js"],"sourcesContent":["\"use strict\";\n\n// rawAsap provides everything we need except exception management.\nvar rawAsap = require(\"./raw\");\n// RawTasks are recycled to reduce GC churn.\nvar freeTasks = [];\n// We queue errors to ensure they are thrown in right order (FIFO).\n// Array-as-queue is good enough here, since we are just dealing with exceptions.\nvar pendingErrors = [];\nvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\nfunction throwFirstError() {\n    if (pendingErrors.length) {\n        throw pendingErrors.shift();\n    }\n}\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with priority\n * over other events like animation, reflow, and repaint. An error thrown from an\n * event will not interrupt, nor even substantially slow down the processing of\n * other events, but will be rather postponed to a lower priority event.\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawAsap(rawTask);\n}\n\n// We wrap tasks with recyclable task objects.  A task object implements\n// `call`, just like a function.\nfunction RawTask() {\n    this.task = null;\n}\n\n// The sole purpose of wrapping the task is to catch the exception and recycle\n// the task object after its single use.\nRawTask.prototype.call = function () {\n    try {\n        this.task.call();\n    } catch (error) {\n        if (asap.onerror) {\n            // This hook exists purely for testing purposes.\n            // Its name will be periodically randomized to break any code that\n            // depends on its existence.\n            asap.onerror(error);\n        } else {\n            // In a web browser, exceptions are not fatal. However, to avoid\n            // slowing down the queue of pending tasks, we rethrow the error in a\n            // lower priority turn.\n            pendingErrors.push(error);\n            requestErrorThrow();\n        }\n    } finally {\n        this.task = null;\n        freeTasks[freeTasks.length] = this;\n    }\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B;AACA,IAAIC,SAAS,GAAG,EAAE;AAClB;AACA;AACA,IAAIC,aAAa,GAAG,EAAE;AACtB,IAAIC,iBAAiB,GAAGJ,OAAO,CAACK,wBAAwB,CAACC,eAAe,CAAC;AAEzE,SAASA,eAAeA,CAAA,EAAG;EACvB,IAAIH,aAAa,CAACI,MAAM,EAAE;IACtB,MAAMJ,aAAa,CAACK,KAAK,EAAE;EAC/B;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAGC,IAAI;AACrB,SAASA,IAAIA,CAACC,IAAI,EAAE;EAChB,IAAIC,OAAO;EACX,IAAIX,SAAS,CAACK,MAAM,EAAE;IAClBM,OAAO,GAAGX,SAAS,CAACY,GAAG,EAAE;EAC7B,CAAC,MAAM;IACHD,OAAO,GAAG,IAAIE,OAAO,EAAE;EAC3B;EACAF,OAAO,CAACD,IAAI,GAAGA,IAAI;EACnBZ,OAAO,CAACa,OAAO,CAAC;AACpB;;AAEA;AACA;AACA,SAASE,OAAOA,CAAA,EAAG;EACf,IAAI,CAACH,IAAI,GAAG,IAAI;AACpB;;AAEA;AACA;AACAG,OAAO,CAACC,SAAS,CAACC,IAAI,GAAG,YAAY;EACjC,IAAI;IACA,IAAI,CAACL,IAAI,CAACK,IAAI,EAAE;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,IAAIP,IAAI,CAACQ,OAAO,EAAE;MACd;MACA;MACA;MACAR,IAAI,CAACQ,OAAO,CAACD,KAAK,CAAC;IACvB,CAAC,MAAM;MACH;MACA;MACA;MACAf,aAAa,CAACiB,IAAI,CAACF,KAAK,CAAC;MACzBd,iBAAiB,EAAE;IACvB;EACJ,CAAC,SAAS;IACN,IAAI,CAACQ,IAAI,GAAG,IAAI;IAChBV,SAAS,CAACA,SAAS,CAACK,MAAM,CAAC,GAAG,IAAI;EACtC;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}